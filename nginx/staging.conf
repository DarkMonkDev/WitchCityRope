# Nginx configuration for WitchCityRope Staging Environment

# Upstream definitions
upstream staging_web {
    server web:8080;
    keepalive 32;
}

upstream staging_api {
    server api:8080;
    keepalive 32;
}

# HTTP to HTTPS redirect
server {
    listen 80;
    server_name staging.witchcityrope.com www.staging.witchcityrope.com api.staging.witchcityrope.com;
    
    # Allow Let's Encrypt challenges
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all other traffic to HTTPS
    location / {
        return 301 https://$server_name$request_uri;
    }
}

# Main staging website
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name staging.witchcityrope.com www.staging.witchcityrope.com;

    # SSL Configuration
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # Security Headers (relaxed for staging)
    add_header Strict-Transport-Security "max-age=86400" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header X-Environment "staging" always;
    add_header X-Robots-Tag "noindex, nofollow" always; # Prevent search engine indexing
    
    # Logging
    access_log /var/log/nginx/staging.access.log combined;
    error_log /var/log/nginx/staging.error.log warn;
    
    # General settings
    client_max_body_size 10M;
    proxy_read_timeout 90;
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Environment "staging";
    
    # WebSocket support
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection $connection_upgrade;
    
    # Main application
    location / {
        proxy_pass http://staging_web;
        proxy_cache_bypass $http_upgrade;
    }
    
    # SignalR hub
    location /hubs/ {
        proxy_pass http://staging_web;
        proxy_cache off;
    }
    
    # Static files with caching
    location ~* \.(css|js|jpg|jpeg|png|gif|ico|woff|woff2|ttf|svg|eot)$ {
        proxy_pass http://staging_web;
        expires 7d;
        add_header Cache-Control "public, immutable";
        add_header X-Content-Type-Options "nosniff" always;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://staging_web;
        access_log off;
    }
    
    # Staging-specific debug endpoints
    location /debug/ {
        proxy_pass http://staging_web;
        # Optional: Add IP restriction
        # allow 10.0.0.0/8;
        # deny all;
    }
}

# API subdomain
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name api.staging.witchcityrope.com;

    # SSL Configuration (same certificate)
    ssl_certificate /etc/nginx/certs/fullchain.pem;
    ssl_certificate_key /etc/nginx/certs/privkey.pem;
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers off;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384;
    ssl_session_timeout 1d;
    ssl_session_cache shared:SSL:50m;
    ssl_session_tickets off;
    
    # Security Headers
    add_header Strict-Transport-Security "max-age=86400" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Environment "staging-api" always;
    add_header X-Robots-Tag "noindex, nofollow" always;
    
    # CORS headers (handled by application, but backup here)
    add_header Access-Control-Allow-Origin "https://staging.witchcityrope.com" always;
    add_header Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS" always;
    add_header Access-Control-Allow-Headers "Authorization, Content-Type, X-Requested-With" always;
    add_header Access-Control-Max-Age "86400" always;
    
    # Logging
    access_log /var/log/nginx/api.staging.access.log combined;
    error_log /var/log/nginx/api.staging.error.log warn;
    
    # General settings
    client_max_body_size 10M;
    proxy_read_timeout 90;
    proxy_connect_timeout 90;
    proxy_send_timeout 90;
    
    # Proxy headers
    proxy_set_header Host $host;
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-Host $server_name;
    proxy_set_header X-Environment "staging-api";
    proxy_http_version 1.1;
    proxy_set_header Connection "";
    
    # API endpoints
    location / {
        proxy_pass http://staging_api;
    }
    
    # Swagger UI (staging only)
    location /swagger {
        proxy_pass http://staging_api;
    }
    
    # Health check endpoint
    location /health {
        proxy_pass http://staging_api;
        access_log off;
    }
    
    # Metrics endpoint (for monitoring)
    location /metrics {
        proxy_pass http://staging_api;
        # Restrict access to monitoring systems
        allow 10.0.0.0/8;
        allow 172.16.0.0/12;
        deny all;
    }
}

# WebSocket upgrade map
map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Gzip compression
gzip on;
gzip_vary on;
gzip_min_length 1024;
gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;

# Rate limiting zones
limit_req_zone $binary_remote_addr zone=api_limit:10m rate=10r/s;
limit_req_zone $binary_remote_addr zone=login_limit:10m rate=5r/m;

# Apply rate limiting to sensitive endpoints
location ~ ^/api/auth/login {
    limit_req zone=login_limit burst=5 nodelay;
    proxy_pass http://staging_api;
}

location ~ ^/api/ {
    limit_req zone=api_limit burst=20 nodelay;
    proxy_pass http://staging_api;
}