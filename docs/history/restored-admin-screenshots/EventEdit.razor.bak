@page "/admin/events/edit/{EventId:guid}"
@page "/admin/events/new"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using WitchCityRope.Web.Services
@using WitchCityRope.Web.Models
@using WitchCityRope.Core.DTOs
@using WitchCityRope.Core.Entities
@using WitchCityRope.Core.Enums
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using Microsoft.AspNetCore.Components.Authorization
@using Syncfusion.Blazor.RichTextEditor
@using WitchCityRope.Web.Shared.Validation.Components
@using WitchCityRope.Web.Shared.Validation.Enums
@inject ApiClient ApiClient
@inject IEventService EventService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject ILogger<EventEdit> Logger
@inject AuthenticationStateProvider AuthenticationStateProvider
@attribute [Authorize(Roles = "Administrator,Organizer")]

<PageTitle>@(IsNewEvent ? "Create Event" : $"Edit - {model.Title}") - Admin</PageTitle>

<style>
    /* Event Editor Styles */
    .event-editor-container {
        background: #fff;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.08);
        overflow: hidden;
    }

    .editor-header {
        padding: 24px 32px;
        border-bottom: 1px solid #e0e0e0;
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .editor-title {
        font-size: 24px;
        font-weight: 700;
        color: #1a1a1a;
        margin: 0;
    }

    .header-actions {
        display: flex;
        gap: 12px;
    }

    /* Tab Navigation */
    .tab-nav {
        display: flex;
        background: #f5f5f5;
        border-bottom: 2px solid #e0e0e0;
        overflow: visible;
    }

    .tab-button {
        padding: 16px 24px;
        background: none;
        border: none;
        font-weight: 600;
        color: #666;
        cursor: pointer;
        transition: all 0.2s ease;
        white-space: nowrap;
        position: relative;
    }

    .tab-button:hover {
        color: #8B4513;
        background: rgba(139, 69, 19, 0.05);
    }

    .tab-button.active {
        color: #8B4513;
        background: white;
    }

    .tab-button.active::after {
        content: '';
        position: absolute;
        bottom: -2px;
        left: 0;
        right: 0;
        height: 2px;
        background: #8B4513;
    }

    /* Tab Content */
    .tab-content {
        padding: 32px;
        min-height: 400px;
    }

    /* Form Styles */
    .form-section {
        margin-bottom: 32px;
        padding-bottom: 32px;
        border-bottom: 1px solid #e0e0e0;
    }

    .form-section:last-child {
        border-bottom: none;
        padding-bottom: 0;
    }

    .section-title {
        font-size: 20px;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 20px;
    }

    .form-group {
        margin-bottom: 24px;
    }

    .form-label {
        display: block;
        margin-bottom: 8px;
        font-weight: 600;
        font-size: 14px;
        color: #333;
    }

    .required {
        color: #d32f2f;
        margin-left: 4px;
    }

    .form-input {
        width: 100%;
        padding: 10px 12px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 16px;
        transition: border-color 0.2s ease;
    }

    .form-input:focus {
        outline: none;
        border-color: #8B4513;
    }

    .form-textarea {
        width: 100%;
        padding: 10px 12px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        font-size: 16px;
        min-height: 120px;
        resize: vertical;
        transition: border-color 0.2s ease;
    }

    .form-textarea:focus {
        outline: none;
        border-color: #8B4513;
    }

    .form-help {
        font-size: 13px;
        color: #666;
        margin-top: 4px;
    }

    /* Event Title and Type Grid */
    .event-title-type-grid {
        display: grid;
        grid-template-columns: 0.75fr auto;
        gap: 24px;
        align-items: start;
        margin-bottom: 20px;
    }

    /* Event Type Toggle - Original (kept for compatibility) */
    .event-type-toggle {
        display: flex;
        gap: 16px;
        margin-bottom: 20px;
    }

    /* Event Type Toggle - Compact Version */
    .event-type-toggle-compact {
        display: flex;
        gap: 8px;
        margin-top: 4px;
    }

    .type-option {
        flex: 1;
        padding: 16px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
    }

    .type-option-compact {
        padding: 8px 20px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        text-align: center;
        cursor: pointer;
        transition: all 0.2s;
        min-width: 100px;
    }

    .type-option:hover {
        border-color: #8B4513;
    }

    .type-option-compact:hover {
        border-color: #8B4513;
        background: rgba(139, 69, 19, 0.05);
    }

    .type-option.active {
        border-color: #8B4513;
        background: #f8f4f0;
    }

    .type-option-compact.active {
        border-color: #8B4513;
        background: rgba(139, 69, 19, 0.1);
    }

    .type-option-title {
        font-weight: 600;
        margin-bottom: 4px;
    }

    .type-option-compact .type-option-title {
        font-size: 14px;
        margin: 0;
    }

    .type-option-desc {
        font-size: 13px;
        color: #666;
    }

    /* Schedule Venue Grid */
    .schedule-venue-grid {
        display: grid;
        grid-template-columns: minmax(250px, 1fr) minmax(250px, 1fr) minmax(250px, 1fr);
        gap: 20px;
        align-items: start;
    }
    
    .schedule-venue-grid .form-input[type="datetime-local"] {
        width: 100%;
        min-width: 250px;
        max-width: 300px;
    }
    
    /* Date Time Grid - keeping for backward compatibility */
    .datetime-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 16px;
    }

    /* Capacity Registration Grid */
    .capacity-registration-grid {
        display: grid;
        grid-template-columns: minmax(200px, 250px) minmax(250px, 1fr) minmax(250px, 1fr);
        gap: 20px;
        align-items: start;
    }
    
    .capacity-registration-grid .form-input[type="datetime-local"] {
        width: 100%;
        min-width: 250px;
        max-width: 300px;
    }
    
    .capacity-registration-grid .form-input[type="number"] {
        width: 120px;
    }

    /* Image Upload */
    .image-upload {
        border: 2px dashed #e0e0e0;
        border-radius: 6px;
        padding: 40px;
        text-align: center;
        background: #f8f8f8;
        cursor: pointer;
        transition: all 0.2s;
    }

    .image-upload:hover {
        border-color: #8B4513;
        background: rgba(139, 69, 19, 0.05);
    }

    .upload-icon {
        font-size: 48px;
        color: #ccc;
        margin-bottom: 16px;
    }

    .upload-text {
        color: #666;
        margin-bottom: 8px;
    }

    .upload-subtext {
        font-size: 13px;
        color: #999;
    }

    /* Pricing Ticket Grid */
    .pricing-ticket-grid {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 24px;
        margin-bottom: 24px;
    }

    /* Pricing Options */
    .pricing-type {
        margin-bottom: 20px;
    }

    .radio-group {
        display: flex;
        flex-direction: column;
        gap: 12px;
    }

    .radio-option {
        display: flex;
        align-items: center;
        gap: 8px;
    }

    .radio-option input[type="radio"] {
        width: 18px;
        height: 18px;
        cursor: pointer;
    }

    .radio-label {
        cursor: pointer;
        font-weight: 500;
    }

    .pricing-fields {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 24px;
        margin-top: 12px;
    }
    
    .sliding-scale-fields {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        gap: 24px;
        margin-top: 12px;
    }

    /* Tables */
    .data-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 20px;
    }

    .data-table th,
    .data-table td {
        text-align: left;
        padding: 12px;
        border-bottom: 1px solid #e0e0e0;
    }

    .data-table th {
        font-weight: 600;
        background: #f5f5f5;
        font-size: 13px;
        color: #666;
    }

    .status-badge {
        display: inline-block;
        padding: 4px 12px;
        border-radius: 20px;
        font-size: 13px;
        font-weight: 500;
    }

    .status-badge.confirmed {
        background: #e8f5e9;
        color: #2e7d32;
    }

    .status-badge.pending {
        background: #fff3e0;
        color: #f57c00;
    }

    .status-badge.cancelled {
        background: #ffebee;
        color: #d32f2f;
    }

    /* Email Templates */
    .email-template-select {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 16px;
        margin-bottom: 24px;
    }

    .email-template-card {
        padding: 16px;
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        cursor: pointer;
        transition: all 0.2s;
    }

    .email-template-card:hover {
        border-color: #8B4513;
    }

    .email-template-card.active {
        border-color: #8B4513;
        background: #f8f4f0;
    }

    .template-name {
        font-weight: 600;
        margin-bottom: 4px;
    }

    .template-desc {
        font-size: 13px;
        color: #666;
    }

    /* Rich Text Editor */
    .editor-toolbar {
        display: flex;
        gap: 8px;
        padding: 12px;
        background: #f5f5f5;
        border: 2px solid #e0e0e0;
        border-bottom: 1px solid #e0e0e0;
        border-radius: 6px 6px 0 0;
    }

    .editor-button {
        padding: 6px 10px;
        background: white;
        border: 1px solid #ddd;
        border-radius: 4px;
        cursor: pointer;
        font-size: 14px;
        transition: all 0.2s;
    }

    .editor-button:hover {
        background: #f0f0f0;
    }

    .editor-content {
        min-height: 200px;
        padding: 16px;
        border: 2px solid #e0e0e0;
        border-top: none;
        border-radius: 0 0 6px 6px;
        font-size: 16px;
        line-height: 1.6;
    }

    /* Buttons */
    .btn {
        padding: 10px 20px;
        border-radius: 6px;
        font-weight: 600;
        font-size: 14px;
        cursor: pointer;
        transition: all 0.2s;
        border: none;
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .btn-primary {
        background: #8B4513;
        color: white;
    }

    .btn-primary:hover {
        background: #6B3410;
    }

    .btn-secondary {
        background: white;
        color: #666;
        border: 1px solid #e0e0e0;
    }

    .btn-secondary:hover {
        background: #f8f8f8;
    }

    /* Form Footer */
    .form-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 30px;
        background: #f8f8f8;
        border-top: 1px solid #e0e0e0;
        margin: 0 -32px -32px;
    }

    /* Loading State */
    .loading-overlay {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(255, 255, 255, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 3px solid #f3f3f3;
        border-top: 3px solid #8B4513;
        border-radius: 50%;
        animation: spin 1s linear infinite;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    /* Rich Text Editor Styling */
    .e-richtexteditor {
        border: 2px solid #e0e0e0;
        border-radius: 6px;
        overflow: hidden;
    }
    
    .e-richtexteditor.e-focused {
        border-color: #8B4513;
        box-shadow: 0 0 0 3px rgba(139, 69, 19, 0.1);
    }
    
    .e-richtexteditor .e-rte-toolbar {
        background: #f5f5f5;
        border-bottom: 1px solid #e0e0e0;
    }
    
    .e-richtexteditor .e-toolbar-item button {
        color: #333;
    }
    
    .e-richtexteditor .e-toolbar-item button:hover {
        background: rgba(139, 69, 19, 0.1);
        color: #8B4513;
    }
    
    .e-richtexteditor .e-rte-content {
        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
        font-size: 15px;
        line-height: 1.6;
        color: #333;
    }

    /* Alert Styles */
    .alert {
        padding: 16px 20px;
        margin-bottom: 20px;
        border-radius: 6px;
        border: 1px solid transparent;
    }
    
    .alert-danger {
        background-color: #ffebee;
        border-color: #ffcdd2;
        color: #c62828;
    }
    
    .alert-heading {
        font-size: 18px;
        font-weight: 600;
        margin-bottom: 8px;
    }
    
    .alert hr {
        margin: 12px 0;
        border: 0;
        border-top: 1px solid rgba(0, 0, 0, 0.1);
    }
    
    .alert ul {
        margin-bottom: 0;
        padding-left: 20px;
    }
    
    .alert li {
        margin-bottom: 4px;
    }
    
    /* Validation messages */
    .text-danger {
        color: #d32f2f;
    }
    
    .small {
        font-size: 0.875rem;
    }
    
    .validation-message {
        color: #d32f2f;
        font-size: 0.875rem;
        margin-top: 4px;
    }
    
    /* Validation summary */
    .validation-summary-errors {
        background-color: #ffebee;
        border: 1px solid #ffcdd2;
        border-radius: 6px;
        padding: 16px 20px;
        margin-bottom: 20px;
    }
    
    .validation-summary-errors ul {
        margin: 0;
        padding-left: 20px;
    }
    
    .validation-summary-errors li {
        color: #c62828;
        margin-bottom: 4px;
    }
    
    .validation-summary-errors li:last-child {
        margin-bottom: 0;
    }

    /* Responsive adjustments */
    @@media (max-width: 768px) {
        .capacity-registration-grid,
        .schedule-venue-grid,
        .event-title-type-grid,
        .pricing-ticket-grid,
        .pricing-fields,
        .sliding-scale-fields {
            grid-template-columns: 1fr;
            gap: 16px;
        }
    }
</style>

<div class="admin-container">
    <!-- Back Navigation -->
    <div class="back-nav mb-4">
        <a href="/admin/events" class="back-link">
            <span>←</span> Back to Events
        </a>
    </div>

    <!-- Page Header -->
    <div class="page-header mb-2">
        <h1 class="page-title">@(IsNewEvent ? "Create New Event" : $"Edit - {model.Title}")</h1>
    </div>

    @if (isLoading)
    {
        <div class="loading-overlay">
            <div class="spinner"></div>
        </div>
    }

    <!-- Main Editor Container -->
    <div class="event-editor-container">
        <EditForm Model="@model" method="post" OnValidSubmit="@HandleSubmit" FormName="EventEditForm">
            <DataAnnotationsValidator />
            <WcrValidationSummary />
            
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    <h4 class="alert-heading">Error</h4>
                    <p>@errorMessage</p>
                    @if (validationErrors.Any())
                    {
                        <hr>
                        <ul class="mb-0">
                            @foreach (var error in validationErrors)
                            {
                                <li><strong>@error.Key:</strong> @string.Join(", ", error.Value)</li>
                            }
                        </ul>
                    }
                </div>
            }

            <!-- Tab Navigation -->
            <div class="tab-nav">
                <button type="button" class="tab-button @(activeTab == "basic" ? "active" : "")" @onclick="@(() => SetActiveTab("basic"))">
                    Basic Info
                </button>
                <button type="button" class="tab-button @(activeTab == "tickets" ? "active" : "")" @onclick="@(() => SetActiveTab("tickets"))">
                    Tickets
                </button>
                @if (IsSocialEvent)
                {
                    <button type="button" class="tab-button @(activeTab == "rsvps" ? "active" : "")" @onclick="@(() => SetActiveTab("rsvps"))">
                        RSVPs
                    </button>
                }
                <button type="button" class="tab-button @(activeTab == "emails" ? "active" : "")" @onclick="@(() => SetActiveTab("emails"))">
                    Emails
                </button>
                <button type="button" class="tab-button @(activeTab == "volunteers" ? "active" : "")" @onclick="@(() => SetActiveTab("volunteers"))">
                    Volunteers/Staff
                </button>
            </div>

            <!-- Tab Content -->
            <div class="tab-content">
                @if (activeTab == "basic")
                {
                    <!-- Basic Info Tab -->
                    <div class="form-section">
                        <!-- Event Title and Type Row -->
                        <div class="event-title-type-grid">
                            <div class="form-group">
                                <WcrInputText @bind-Value="model.Title" 
                                            Label="Event Title" 
                                            IsRequired="true"
                                            Placeholder="e.g., Rope Basics Workshop"
                                            class="form-input" />
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label">Event Type <span class="required">*</span></label>
                                <div class="event-type-toggle-compact">
                                    <div class="type-option-compact @(model.EventType == Core.Enums.EventType.Workshop ? "active" : "")" @onclick="SetEventTypeWorkshop">
                                        <div class="type-option-title">Class</div>
                                    </div>
                                    <div class="type-option-compact @(model.EventType == Core.Enums.EventType.Social ? "active" : "")" @onclick="SetEventTypeSocial">
                                        <div class="type-option-title">Meetup</div>
                                    </div>
                                </div>
                            </div>
                        </div>

                        <!-- Description -->
                        <div class="form-group">
                            <label class="form-label">Description <span class="required">*</span></label>
                            <SfRichTextEditor @bind-Value="@model.Description" 
                                             @ref="descriptionEditor"
                                             Height="300px"
                                             Placeholder="Describe what attendees will learn or do at this event..."
                                             ValueChange="@OnDescriptionChanged">
                                <RichTextEditorToolbarSettings Items="@BasicToolbarItems" />
                                <RichTextEditorInlineMode Enable="false" ShowOnSelection="false" />
                            </SfRichTextEditor>
                            <p class="form-help">This will be visible on the event page. Use clear, descriptive language.</p>
                        </div>

                        <!-- Event Image -->
                        <div class="form-group">
                            <label class="form-label">Event Image (Optional)</label>
                            <div class="image-upload" @onclick="UploadImage">
                                <div class="upload-icon">📷</div>
                                <div class="upload-text">Click to upload image or drag and drop</div>
                                <div class="upload-subtext">PNG, JPG up to 10MB</div>
                            </div>
                            @if (!string.IsNullOrEmpty(model.ImageUrl))
                            {
                                <div class="mt-2">
                                    <img src="@model.ImageUrl" alt="Event image" style="max-width: 200px; max-height: 150px;" />
                                    <button type="button" class="btn btn-secondary btn-sm ml-2" @onclick="RemoveEventImage">Remove</button>
                                </div>
                            }
                        </div>

                        <!-- Lead Teacher -->
                        <div class="form-group">
                            <WcrInputSelect @bind-Value="model.InstructorId" 
                                          Label="Lead Teacher"
                                          IsRequired="false"
                                          class="form-input" 
                                          style="max-width: 400px;">
                                <option value="">Select a teacher (optional)...</option>
                                @foreach (var instructor in model.AvailableInstructors)
                                {
                                    <option value="@instructor.Id">@instructor.DisplayName</option>
                                }
                            </WcrInputSelect>
                        </div>
                    </div>

                    <div class="form-section">
                        <h2 class="section-title">Schedule & Venue</h2>

                        <div class="schedule-venue-grid">
                            <div class="form-group">
                                <WcrInputDate DateType="WcrDateInputType.DateTimeLocal" 
                                            @bind-Value="model.StartDate" 
                                            Label="Start Date/Time"
                                            IsRequired="true"
                                            class="form-input" />
                            </div>
                            <div class="form-group">
                                <WcrInputDate DateType="WcrDateInputType.DateTimeLocal" 
                                            @bind-Value="model.EndDate" 
                                            @bind-Value:after="OnEndDateChanged" 
                                            Label="End Date/Time"
                                            IsRequired="true"
                                            class="form-input" />
                            </div>
                            <div class="form-group">
                                <WcrInputText @bind-Value="model.Location" 
                                            Label="Venue Name"
                                            IsRequired="true"
                                            Placeholder="Enter venue name"
                                            class="form-input" />
                            </div>
                        </div>

                        <h2 class="section-title" style="margin-top: 32px;">Capacity & Registration</h2>

                        <div class="capacity-registration-grid">
                            <div class="form-group">
                                <WcrInputNumber @bind-Value="model.Capacity" 
                                              Label="Maximum Capacity"
                                              IsRequired="true"
                                              class="form-input" />
                            </div>

                            <div class="form-group">
                                <WcrInputDate DateType="WcrDateInputType.DateTimeLocal" 
                                            @bind-Value="model.RegistrationOpensAt" 
                                            Label="Ticket Sales Open"
                                            class="form-input" />
                            </div>

                            <div class="form-group">
                                <WcrInputDate DateType="WcrDateInputType.DateTimeLocal" 
                                            @bind-Value="model.RegistrationClosesAt" 
                                            Label="Ticket Sales Close"
                                            class="form-input" />
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "tickets")
                {
                    <!-- Tickets Tab -->
                    <div class="form-section">
                        <div class="pricing-ticket-grid">
                            <div class="form-group">
                                <WcrInputSelect @bind-Value="model.PricingType" 
                                              Label="Pricing Type"
                                              IsRequired="true"
                                              class="form-input">
                                    <option value="@PricingType.Fixed">Fixed Price</option>
                                    <option value="@PricingType.SlidingScale">Sliding Scale</option>
                                    <option value="@PricingType.Free">Free Event</option>
                                </WcrInputSelect>
                            </div>

                            @if (model.PricingType != PricingType.Free)
                            {
                                <div class="form-group">
                                    <WcrInputSelect @bind-Value="model.TicketTypes" 
                                                  Label="Ticket Type"
                                                  IsRequired="true"
                                                  class="form-input">
                                        <option value="@TicketType.Individual">Individual</option>
                                        <option value="@TicketType.Couples">Couples</option>
                                    </WcrInputSelect>
                                </div>
                            }
                            
                            <div class="form-group">
                                <WcrInputSelect @bind-Value="model.RefundCutoffHours" 
                                              Label="Refund Policy"
                                              class="form-input">
                                    <option value="24">24 hours before event</option>
                                    <option value="48">48 hours before event</option>
                                    <option value="72">72 hours before event</option>
                                    <option value="0">No refunds</option>
                                </WcrInputSelect>
                            </div>
                        </div>

                            @if (model.PricingType == PricingType.Fixed)
                            {
                                <div class="pricing-fields">
                                    @if (model.TicketTypes == TicketType.Individual)
                                    {
                                        <div class="form-group">
                                            <WcrInputNumber @bind-Value="model.IndividualPrice" 
                                                          Label="Individual Price"
                                                          IsRequired="true"
                                                          class="form-input" />
                                        </div>
                                    }
                                    @if (model.TicketTypes == TicketType.Couples)
                                    {
                                        <div class="form-group">
                                            <WcrInputNumber @bind-Value="model.CouplesPrice" 
                                                          Label="Couples Price"
                                                          IsRequired="true"
                                                          class="form-input" />
                                        </div>
                                    }
                                </div>
                            }
                            else if (model.PricingType == PricingType.SlidingScale)
                            {
                                <div class="sliding-scale-fields">
                                    <div class="form-group">
                                        <WcrInputNumber @bind-Value="model.MinimumPrice" 
                                                      Label="Minimum Price"
                                                      IsRequired="true"
                                                      class="form-input" />
                                    </div>
                                    <div class="form-group">
                                        <WcrInputNumber @bind-Value="model.MaximumPrice" 
                                                      Label="Maximum Price"
                                                      IsRequired="true"
                                                      class="form-input" />
                                    </div>
                                    <div class="form-group">
                                        <WcrInputNumber @bind-Value="model.SuggestedPrice" 
                                                      Label="Suggested Price"
                                                      IsRequired="true"
                                                      class="form-input" />
                                    </div>
                                </div>
                            }
                    </div>

                    @if (!IsNewEvent)
                    {
                        <div class="form-section">
                            <h2 class="section-title">Purchased Tickets</h2>

                            @if (model.Orders.Any())
                            {
                                <table class="data-table">
                                    <thead>
                                        <tr>
                                            <th>Order #</th>
                                            <th>Attendee</th>
                                            <th>Ticket Type</th>
                                            <th>Status</th>
                                            <th>Date</th>
                                            <th>Amount</th>
                                            <th>Actions</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var order in model.Orders)
                                        {
                                            <tr>
                                                <td>@order.OrderNumber</td>
                                                <td>@order.AttendeeName</td>
                                                <td>@order.TicketType</td>
                                                <td>
                                                    <span class="status-badge @order.Status.ToLower()">@order.Status</span>
                                                </td>
                                                <td>@order.OrderDate.ToString("MMM d, yyyy")</td>
                                                <td>$@order.Amount.ToString("F2")</td>
                                                <td>
                                                    <button type="button" class="btn btn-secondary" style="padding: 4px 12px; font-size: 13px;">View</button>
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            }
                            else
                            {
                                <p class="text-muted">No orders yet</p>
                            }
                        </div>

                        <div class="form-section">
                            <h2 class="section-title">Add Tickets for Volunteers</h2>
                            <p class="form-help">Create complimentary or discounted tickets for volunteers</p>

                            @if (model.VolunteerTickets.Any())
                            {
                                @foreach (var volunteer in model.VolunteerTickets)
                                {
                                    <div class="volunteer-ticket-card mb-3 p-3 border rounded">
                                        <div class="d-flex justify-content-between align-items-center">
                                            <div>
                                                <h4>@volunteer.VolunteerName</h4>
                                                <p class="mb-1">Volunteered for: @volunteer.TaskName</p>
                                                @if (volunteer.BackgroundCheckVerified)
                                                {
                                                    <p class="text-success small mb-0">✓ Background check verified</p>
                                                }
                                            </div>
                                            <div>
                                                @if (!volunteer.HasTicket)
                                                {
                                                    <div class="d-flex gap-2 align-items-center">
                                                        <WcrInputNumber TValue="decimal?" 
                                                                      class="form-input" 
                                                                      style="width: 100px;" 
                                                                      Placeholder="0" />
                                                        <button type="button" class="btn btn-primary btn-sm">Add Ticket</button>
                                                    </div>
                                                }
                                                else
                                                {
                                                    <p class="text-success mb-0">✓ Ticket assigned ($@volunteer.TicketPrice)</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                }
                            }
                            else
                            {
                                <p class="text-muted">No volunteers assigned yet</p>
                            }
                        </div>
                    }
                }
                else if (activeTab == "emails")
                {
                    <!-- Emails Tab -->
                    <div class="form-section">
                        <h2 class="section-title">Email Templates</h2>

                        <div class="form-group">
                            <div class="email-template-select">
                                <div class="email-template-card @(selectedTemplateType == EmailTemplateType.RegistrationConfirmation ? "active" : "")"
                                     @onclick="() => SelectEmailTemplate(EmailTemplateType.RegistrationConfirmation)">
                                    <div class="template-name">Registration Confirmation</div>
                                    <div class="template-desc">Sent when someone registers for the event</div>
                                </div>
                                <div class="email-template-card @(selectedTemplateType == EmailTemplateType.EventReminder ? "active" : "")"
                                     @onclick="() => SelectEmailTemplate(EmailTemplateType.EventReminder)">
                                    <div class="template-name">Event Reminder</div>
                                    <div class="template-desc">Sent 24 hours before the event</div>
                                </div>
                                <div class="email-template-card @(selectedTemplateType == EmailTemplateType.WaitlistNotification ? "active" : "")"
                                     @onclick="() => SelectEmailTemplate(EmailTemplateType.WaitlistNotification)">
                                    <div class="template-name">Waitlist Notification</div>
                                    <div class="template-desc">Sent when a spot opens up</div>
                                </div>
                                <div class="email-template-card @(selectedTemplateType == EmailTemplateType.CancellationNotice ? "active" : "")"
                                     @onclick="() => SelectEmailTemplate(EmailTemplateType.CancellationNotice)">
                                    <div class="template-name">Cancellation Notice</div>
                                    <div class="template-desc">Sent if the event is cancelled</div>
                                </div>
                            </div>
                        </div>

                        @if (model.SelectedEmailTemplate != null)
                        {
                            <div class="form-group">
                                <WcrInputText @bind-Value="model.SelectedEmailTemplate.Subject" 
                                            Label="Email Subject"
                                            class="form-input" />
                            </div>

                            <div class="form-group">
                                <label class="form-label">Email Content</label>
                                @if (!string.IsNullOrEmpty(model.SelectedEmailTemplate.Body))
                                {
                                    <SfRichTextEditor @bind-Value="@model.SelectedEmailTemplate.Body"
                                                     @ref="emailTemplateEditor"
                                                     Height="400px">
                                        <RichTextEditorToolbarSettings Items="@EmailToolbarItems" />
                                        <RichTextEditorInlineMode Enable="false" ShowOnSelection="false" />
                                    </SfRichTextEditor>
                                }
                                else
                                {
                                    <textarea @bind="model.SelectedEmailTemplate.Body" 
                                              class="form-control" 
                                              rows="10" 
                                              placeholder="Enter email content..."></textarea>
                                }
                                <p class="form-help">Available variables: {attendee_name}, {event_name}, {event_date}, {event_time}, {venue_name}, {venue_address}</p>
                            </div>

                            <div class="text-right">
                                <button type="button" class="btn btn-primary" @onclick="SaveEmailTemplate">Save Email Template</button>
                            </div>
                        }
                    </div>

                    <div class="form-section">
                        <h2 class="section-title">Send Custom Email</h2>

                        <div class="form-group">
                            <WcrInputSelect @bind-Value="model.CustomEmail.Recipients" 
                                          Label="Recipients"
                                          class="form-input">
                                <option value="@EmailRecipientType.AllRegistered">All registered attendees</option>
                                <option value="@EmailRecipientType.ConfirmedOnly">Confirmed attendees only</option>
                                <option value="@EmailRecipientType.Waitlisted">Waitlisted attendees</option>
                                <option value="@EmailRecipientType.Volunteers">Volunteers only</option>
                                <option value="@EmailRecipientType.Specific">Specific attendees...</option>
                            </WcrInputSelect>
                        </div>

                        <div class="form-group">
                            <WcrInputText @bind-Value="model.CustomEmail.Subject" 
                                        Label="Email Subject"
                                        Placeholder="Enter email subject..."
                                        class="form-input" />
                        </div>

                        <div class="form-group">
                            <label class="form-label">Email Content</label>
                            <textarea @bind="model.CustomEmail.Body" 
                                      class="form-control" 
                                      rows="10" 
                                      placeholder="Type your custom email content here..."></textarea>
                            <p class="form-help">Available variables: {attendee_name}, {event_name}, {event_date}, {event_time}, {venue_address}</p>
                        </div>

                        <div class="d-flex gap-3">
                            <button type="button" class="btn btn-secondary" @onclick="SaveDraftEmail">Save as Draft</button>
                            <button type="button" class="btn btn-secondary" @onclick="SendTestEmail">Send Test Email</button>
                            <button type="button" class="btn btn-primary" @onclick="SendCustomEmail">Send Email</button>
                        </div>
                    </div>
                }
                else if (activeTab == "volunteers")
                {
                    <!-- Volunteers/Staff Tab -->
                    <div class="form-section">
                        <h2 class="section-title">Current Volunteers</h2>

                        @if (model.VolunteerSummary != null)
                        {
                            <div class="row mb-3">
                                <div class="col">
                                    <div class="stat-card">
                                        <div class="stat-value">@model.VolunteerSummary.TotalVolunteers</div>
                                        <div class="stat-label">Total Volunteers</div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="stat-card">
                                        <div class="stat-value text-success">@model.VolunteerSummary.ConfirmedVolunteers</div>
                                        <div class="stat-label">Confirmed</div>
                                    </div>
                                </div>
                                <div class="col">
                                    <div class="stat-card">
                                        <div class="stat-value text-warning">@model.VolunteerSummary.PendingVolunteers</div>
                                        <div class="stat-label">Pending</div>
                                    </div>
                                </div>
                            </div>
                        }

                        @if (model.VolunteerTasks.Any(t => t.Assignments.Any()))
                        {
                            <table class="data-table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>Task</th>
                                        <th>Time Slot</th>
                                        <th>Status</th>
                                        <th>Ticket</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var task in model.VolunteerTasks)
                                    {
                                        @foreach (var assignment in task.Assignments)
                                        {
                                            <tr>
                                                <td>@assignment.UserSceneName</td>
                                                <td>@task.Name</td>
                                                <td>@($"{task.StartTime:h:mm tt} - {task.EndTime:h:mm tt}")</td>
                                                <td>
                                                    <span class="status-badge @assignment.Status.ToString().ToLower()">@assignment.Status</span>
                                                </td>
                                                <td>
                                                    @if (assignment.HasTicket)
                                                    {
                                                        <span class="text-success">✓ Has ticket</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="text-warning">No ticket</span>
                                                    }
                                                </td>
                                                <td>
                                                    @if (!assignment.HasTicket)
                                                    {
                                                        <button type="button" class="btn btn-secondary btn-sm" @onclick="() => AddVolunteerTicket(assignment.Id)">Add Ticket</button>
                                                    }
                                                    else
                                                    {
                                                        <button type="button" class="btn btn-secondary btn-sm">View</button>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <p class="text-muted">No volunteers assigned yet</p>
                        }
                    </div>

                    <div class="form-section">
                        <h2 class="section-title">Volunteer Tasks</h2>

                        <div class="form-group">
                            <label class="form-label">Available Volunteer Positions</label>
                            <button type="button" class="btn btn-secondary mb-3" @onclick="AddNewTask">+ Add New Task</button>

                            @foreach (var task in model.VolunteerTasks)
                            {
                                <div class="volunteer-task-item mb-3 p-3 border rounded @(editingTaskId == task.Id ? "editing" : "")">
                                    @if (editingTaskId == task.Id)
                                    {
                                        <!-- Edit Mode -->
                                        <div class="task-edit-form">
                                            <div class="form-group">
                                                <WcrInputText @bind-Value="editingTask.Name" 
                                                            Label="Task Name"
                                                            class="form-input" />
                                            </div>
                                            <div class="row">
                                                <div class="col">
                                                    <div class="form-group">
                                                        <WcrInputText Value="@editingTaskStartTime" 
                                                                    ValueChanged="@((value) => editingTaskStartTime = value)"
                                                                    Label="Start Time"
                                                                    InputType="time"
                                                                    class="form-input" />
                                                    </div>
                                                </div>
                                                <div class="col">
                                                    <div class="form-group">
                                                        <WcrInputText Value="@editingTaskEndTime" 
                                                                    ValueChanged="@((value) => editingTaskEndTime = value)"
                                                                    Label="End Time"
                                                                    InputType="time"
                                                                    class="form-input" />
                                                    </div>
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <WcrInputTextArea @bind-Value="editingTask.Description" 
                                                                Label="Task Description"
                                                                Rows="3"
                                                                class="form-textarea" />
                                            </div>
                                            <div class="d-flex gap-2">
                                                <button type="button" class="btn btn-primary" @onclick="SaveTask">Save Changes</button>
                                                <button type="button" class="btn btn-secondary" @onclick="CancelEditTask">Cancel</button>
                                            </div>
                                        </div>
                                    }
                                    else
                                    {
                                        <!-- View Mode -->
                                        <div class="task-header d-flex justify-content-between align-items-center mb-2">
                                            <h4 class="mb-0">@task.Name</h4>
                                            <div class="task-actions">
                                                <button type="button" class="btn btn-secondary btn-sm" @onclick="() => EditTask(task.Id)">Edit</button>
                                                <button type="button" class="btn btn-secondary btn-sm text-danger" @onclick="() => DeleteTask(task.Id)">Delete</button>
                                            </div>
                                        </div>
                                        <div class="task-details">
                                            <p class="mb-1"><strong>Time:</strong> @task.StartTime.ToString("h:mm tt") - @task.EndTime.ToString("h:mm tt")</p>
                                            <p class="mb-1">@task.Description</p>
                                            <p class="mb-0">
                                                <span class="text-muted">Volunteers signed up: </span>
                                                @if (task.Assignments.Any())
                                                {
                                                    @string.Join(", ", task.Assignments.Select(a => a.UserSceneName))
                                                }
                                                else
                                                {
                                                    <span>None</span>
                                                }
                                                <button type="button" class="btn btn-secondary btn-sm ml-2" @onclick="() => AddVolunteerToTask(task.Id)">+ Add Person</button>
                                            </p>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }
                else if (activeTab == "rsvps" && IsSocialEvent)
                {
                    <!-- RSVPs Tab -->
                    <div class="form-section">
                        <h2 class="section-title">Event RSVPs</h2>
                        
                        <div class="stats-grid mb-4">
                            <div class="stat-card">
                                <div class="stat-value">@model.Rsvps.Count(r => r.Status == RsvpStatus.Confirmed)</div>
                                <div class="stat-label">Confirmed RSVPs</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">@model.Rsvps.Count(r => r.Status == RsvpStatus.Waitlisted)</div>
                                <div class="stat-label">Waitlisted</div>
                            </div>
                            <div class="stat-card">
                                <div class="stat-value">@model.Rsvps.Count(r => r.Status == RsvpStatus.CheckedIn)</div>
                                <div class="stat-label">Checked In</div>
                            </div>
                        </div>

                        @if (model.Rsvps.Any())
                        {
                            <table class="data-table">
                                <thead>
                                    <tr>
                                        <th>Name</th>
                                        <th>RSVP Date</th>
                                        <th>Status</th>
                                        <th>Has Ticket</th>
                                        <th>Notes</th>
                                        <th>Actions</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var rsvp in model.Rsvps.OrderBy(r => r.RsvpedAt))
                                    {
                                        <tr>
                                            <td>
                                                <strong>@(rsvp.UserSceneName ?? "Unknown")</strong>
                                                @if (!string.IsNullOrEmpty(rsvp.UserEmail))
                                                {
                                                    <br />
                                                    <small class="text-muted">@rsvp.UserEmail</small>
                                                }
                                            </td>
                                            <td>@rsvp.RsvpedAt.ToString("MMM d, yyyy h:mm tt")</td>
                                            <td>
                                                <span class="status-badge @GetRsvpStatusClass(rsvp.Status)">
                                                    @rsvp.Status
                                                </span>
                                            </td>
                                            <td>
                                                @if (HasPurchasedTicket(rsvp.UserId))
                                                {
                                                    <span class="status-badge confirmed">Has Ticket</span>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">No Ticket</span>
                                                }
                                            </td>
                                            <td>
                                                @if (!string.IsNullOrEmpty(rsvp.Comments))
                                                {
                                                    <small>@rsvp.Comments</small>
                                                }
                                                else
                                                {
                                                    <span class="text-muted">-</span>
                                                }
                                            </td>
                                            <td>
                                                @if (rsvp.Status == RsvpStatus.Waitlisted)
                                                {
                                                    <button type="button" class="btn btn-sm btn-primary" @onclick="() => ConfirmRsvpFromWaitlist(rsvp.Id)">
                                                        Confirm
                                                    </button>
                                                }
                                                @if (rsvp.Status != RsvpStatus.Cancelled)
                                                {
                                                    <button type="button" class="btn btn-sm btn-secondary" @onclick="() => CancelRsvp(rsvp.Id)">
                                                        Cancel
                                                    </button>
                                                }
                                            </td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="fas fa-users fa-3x text-muted mb-3"></i>
                                <p>No RSVPs yet</p>
                            </div>
                        }
                    </div>
                }
            </div>

            <!-- Form Footer -->
            <div class="form-footer">
                <button type="button" class="btn btn-secondary" @onclick="SaveDraft">Save as Draft</button>
                <button type="submit" class="btn btn-primary">@(IsNewEvent ? "Create Event" : "Save Changes")</button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    [Parameter] public Guid? EventId { get; set; }

    [SupplyParameterFromForm]
    private EventEditViewModel model { get; set; } = new();
    
    private bool isLoading = true;
    private string activeTab = "basic";
    private bool IsNewEvent => !EventId.HasValue;
    private string? errorMessage = null;
    private Dictionary<string, List<string>> validationErrors = new();

    // Basic Info tab helpers
    private DateTime eventDate = DateTime.Now.AddDays(7).Date;
    private string startTime = "19:00";
    private double duration = 2;

    // Email tab helpers
    private EmailTemplateType? selectedTemplateType;
    
    // Rich Text Editor references
    private SfRichTextEditor? descriptionEditor;
    private SfRichTextEditor? emailTemplateEditor;
    private SfRichTextEditor? customEmailEditor;
    
    // Toolbar configurations
    private List<ToolbarItemModel> BasicToolbarItems = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.StrikeThrough },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontName },
        new ToolbarItemModel() { Command = ToolbarCommand.FontSize },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.FontColor },
        new ToolbarItemModel() { Command = ToolbarCommand.BackgroundColor },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Outdent },
        new ToolbarItemModel() { Command = ToolbarCommand.Indent },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Image },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateTable },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.ClearFormat },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };
    
    private List<ToolbarItemModel> EmailToolbarItems = new List<ToolbarItemModel>()
    {
        new ToolbarItemModel() { Command = ToolbarCommand.Bold },
        new ToolbarItemModel() { Command = ToolbarCommand.Italic },
        new ToolbarItemModel() { Command = ToolbarCommand.Underline },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Formats },
        new ToolbarItemModel() { Command = ToolbarCommand.Alignments },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.OrderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.UnorderedList },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.CreateLink },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Name = "insertVariable" },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.SourceCode },
        new ToolbarItemModel() { Command = ToolbarCommand.Separator },
        new ToolbarItemModel() { Command = ToolbarCommand.Undo },
        new ToolbarItemModel() { Command = ToolbarCommand.Redo }
    };

    // Volunteers tab helpers
    private Guid? editingTaskId;
    private CreateVolunteerTaskRequest editingTask = new();
    private string editingTaskStartTime = "";
    private string editingTaskEndTime = "";
    
    // Helper properties
    private bool IsSocialEvent => model.EventType == Core.Enums.EventType.Social || 
                                  model.EventType == Core.Enums.EventType.PlayParty;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;

            // Load available instructors and volunteers
            await LoadAvailableUsers();

            if (!IsNewEvent)
            {
                // Load existing event data
                await LoadEvent();
            }
            else
            {
                // Initialize new event with defaults
                InitializeNewEvent();
            }
        }
        catch (Exception ex)
        {
            // Handle error
            Console.WriteLine($"Error loading event: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void InitializeNewEvent()
    {
        model = new EventEditViewModel
        {
            EventType = Core.Enums.EventType.Workshop,
            Title = "",  // Explicitly set empty to ensure validation works
            Description = "",  // Explicitly set empty to ensure validation works
            Location = "",  // Explicitly set empty to ensure validation works
            StartDate = DateTime.Now.AddDays(7).Date.AddHours(19),
            EndDate = DateTime.Now.AddDays(7).Date.AddHours(21),
            Capacity = 60,
            PricingType = PricingType.Fixed,
            TicketTypes = TicketType.Individual,
            IndividualPrice = 35,
            CouplesPrice = 60,
            RefundCutoffHours = 48,
            // Set default ticket sales open to current date/time
            RegistrationOpensAt = DateTime.Now,
            // Set default ticket sales close to event end time
            RegistrationClosesAt = DateTime.Now.AddDays(7).Date.AddHours(21)
        };

        // Initialize email templates with defaults
        InitializeEmailTemplates();
    }

    private void InitializeEmailTemplates()
    {
        model.EmailTemplates = new List<EventEmailTemplateDto>
        {
            new EventEmailTemplateDto
            {
                Type = EmailTemplateType.RegistrationConfirmation,
                Subject = "Registration Confirmed: {event_name}",
                Body = @"Hi {attendee_name},

Your registration for {event_name} has been confirmed!

Event Details:
Date: {event_date}
Time: {event_time}
Location: {venue_name}

We look forward to seeing you there!

Best,
The Witch City Rope Team"
            },
            new EventEmailTemplateDto
            {
                Type = EmailTemplateType.EventReminder,
                Subject = "Reminder: {event_name} is tomorrow!",
                Body = @"Hi {attendee_name},

This is a friendly reminder that {event_name} is tomorrow!

Event Details:
Date: {event_date}
Time: {event_time}
Location: {venue_name}
Address: {venue_address}

See you there!

The Witch City Rope Team"
            }
        };
    }

    private async Task LoadEvent()
    {
        try
        {
            // Load event data from API
            var eventData = await ApiClient.GetEventByIdAsync(EventId.Value);
            if (eventData != null)
            {
                // Map to model
                model.Id = eventData.Id;
                model.EventType = eventData.EventType;
                model.Title = eventData.Name;
                model.ImageUrl = eventData.ImageUrl;
                model.Description = eventData.Description;
                model.InstructorId = null; // InstructorId not available in EventDto
                model.StartDate = eventData.StartDateTime;
                model.EndDate = eventData.EndDateTime;
                model.Location = eventData.Location;
                model.Capacity = eventData.MaxAttendees;
                model.RegistrationOpensAt = eventData.RegistrationOpensAt ?? DateTime.Now;
                model.RegistrationClosesAt = eventData.RegistrationClosesAt ?? eventData.EndDateTime;
                model.RequiresVetting = eventData.RequiresVetting;
                model.Tags = eventData.Tags ?? new List<string>();
                model.SkillLevel = eventData.RequiredSkillLevels?.FirstOrDefault();
                model.IsPublished = eventData.Status == "Published";
                
                // Pricing fields
                model.TicketTypes = eventData.TicketTypes;
                model.IndividualPrice = eventData.IndividualPrice;
                model.CouplesPrice = eventData.CouplesPrice;
                model.RefundCutoffHours = eventData.RefundCutoffHours;
                
                // Set date/time fields for UI
                eventDate = model.StartDate.Date;
                startTime = model.StartDate.ToString("HH:mm");
                duration = (model.EndDate - model.StartDate).TotalHours;
                
                // Load related data
                await LoadEventOrders();
                await LoadEventVolunteers();
                await LoadEmailTemplates();
                
                // Load RSVPs for social events
                if (IsSocialEvent)
                {
                    await LoadEventRsvps();
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event {EventId}", EventId);
            // TODO: Show error message to user
        }
    }

    private async Task LoadAvailableUsers()
    {
        try
        {
            // Load available instructors from API - teachers and organizers
            var instructors = await ApiClient.GetUsersAsync("Teacher,Organizer");
            model.AvailableInstructors = instructors?.Select(u => new UserOptionDto
            {
                Id = u.Id,
                Name = u.DisplayName,
                SceneName = u.SceneName
            }).ToList() ?? new List<UserOptionDto>();
            
            // Load available volunteers - all vetted members
            var volunteers = await ApiClient.GetUsersAsync("Member");
            model.AvailableVolunteers = volunteers?.Select(u => new UserOptionDto
            {
                Id = u.Id,
                Name = u.DisplayName,
                SceneName = u.SceneName
            }).ToList() ?? new List<UserOptionDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading available users");
            // Fallback to empty lists
            model.AvailableInstructors = new List<UserOptionDto>();
            model.AvailableVolunteers = new List<UserOptionDto>();
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private async Task HandleSubmit()
    {
        try
        {
            isLoading = true;
            errorMessage = null;
            validationErrors.Clear();

            // Ensure the rich text editor value is synced
            if (descriptionEditor != null)
            {
                model.Description = await descriptionEditor.GetTextAsync();
            }

            // Manual validation for required fields
            if (string.IsNullOrWhiteSpace(model.Title))
            {
                errorMessage = "Event title is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(model.Description))
            {
                errorMessage = "Event description is required.";
                return;
            }

            if (string.IsNullOrWhiteSpace(model.Location))
            {
                errorMessage = "Venue name is required.";
                return;
            }

            // Combine date and time
            model.StartDate = eventDate.Date + TimeSpan.Parse(startTime);
            model.EndDate = model.StartDate.AddHours(duration);

            // Validate dates
            if (model.EndDate <= model.StartDate)
            {
                errorMessage = "End date/time must be after start date/time.";
                return;
            }

            if (model.RegistrationClosesAt.HasValue && model.RegistrationClosesAt > model.EndDate)
            {
                errorMessage = "Registration close date cannot be after the event end date.";
                return;
            }

            // Submit to API
            if (IsNewEvent)
            {
                var createRequest = MapToCreateRequest();
                var result = await ApiClient.CreateEventAsync(createRequest);
                if (result != null)
                {
                    Navigation.NavigateTo($"/admin/events/edit/{result.EventId}");
                }
            }
            else
            {
                // Use EventService for direct database update instead of API
                var success = await EventService.UpdateEventAsync(
                    EventId!.Value, 
                    model.Title ?? "", 
                    model.Description ?? "", 
                    model.StartDate, 
                    model.EndDate, 
                    model.Location ?? "", 
                    model.Capacity);
                
                if (success)
                {
                    Logger.LogInformation("Event updated successfully via EventService");
                    Navigation.NavigateTo("/admin/events");
                }
                else
                {
                    errorMessage = "Failed to update event. Please try again.";
                    Logger.LogError("EventService.UpdateEventAsync returned false");
                }
            }
        }
        catch (HttpRequestException httpEx)
        {
            errorMessage = "Failed to save event. Please check your input and try again.";
            Logger.LogError(httpEx, "HTTP error saving event");
            
            // Try to parse validation errors from the response
            if (httpEx.Message.Contains("400"))
            {
                errorMessage = "Validation error: Please check all required fields are filled correctly.";
            }
            else if (httpEx.Message.Contains("401"))
            {
                errorMessage = "You are not authorized to perform this action. Please log in again.";
            }
            else if (httpEx.Message.Contains("403"))
            {
                errorMessage = "You do not have permission to create or edit events.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
            Logger.LogError(ex, "Error saving event");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task SaveDraft()
    {
        model.IsPublished = false;
        await HandleSubmit();
    }

    private async Task UploadImage()
    {
        // TODO: Implement image upload
        await JSRuntime.InvokeVoidAsync("alert", "Image upload not yet implemented");
    }

    // Email Tab Methods
    private void SelectEmailTemplate(EmailTemplateType type)
    {
        selectedTemplateType = type;
        model.SelectedEmailTemplate = model.EmailTemplates.FirstOrDefault(t => t.Type == type);
        if (model.SelectedEmailTemplate == null)
        {
            model.SelectedEmailTemplate = new EventEmailTemplateDto
            {
                Type = type,
                Subject = "",
                Body = "",
                IsActive = true
            };
            model.EmailTemplates.Add(model.SelectedEmailTemplate);
        }
    }

    private async Task SaveEmailTemplate()
    {
        try
        {
            if (EventId.HasValue && model.SelectedEmailTemplate != null)
            {
                var saveRequest = new SaveEmailTemplateRequest
                {
                    Type = selectedTemplateType.Value,
                    Subject = model.SelectedEmailTemplate.Subject,
                    Body = model.SelectedEmailTemplate.Body,
                    IsActive = model.SelectedEmailTemplate.IsActive
                };
                
                if (model.SelectedEmailTemplate.Id == Guid.Empty)
                {
                    // Create new template
                    await ApiClient.CreateEmailTemplateAsync(EventId.Value, saveRequest);
                }
                else
                {
                    // Update existing template
                    await ApiClient.UpdateEmailTemplateAsync(EventId.Value, model.SelectedEmailTemplate.Id, saveRequest);
                }
                
                await LoadEmailTemplates();
                await JSRuntime.InvokeVoidAsync("alert", "Email template saved successfully");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving email template");
            await JSRuntime.InvokeVoidAsync("alert", "Error saving email template");
        }
    }

    private async Task SendTestEmail()
    {
        try
        {
            if (EventId.HasValue && model.SelectedEmailTemplate != null && model.SelectedEmailTemplate.Id != Guid.Empty)
            {
                // Get current user's email
                var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
                var userEmail = authState.User.FindFirst(c => c.Type == System.Security.Claims.ClaimTypes.Email)?.Value;
                
                if (string.IsNullOrEmpty(userEmail))
                {
                    await JSRuntime.InvokeVoidAsync("alert", "Could not find your email address");
                    return;
                }
                
                await ApiClient.SendTestEmailAsync(EventId.Value, model.SelectedEmailTemplate.Id, userEmail);
                await JSRuntime.InvokeVoidAsync("alert", $"Test email sent to {userEmail}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending test email");
            await JSRuntime.InvokeVoidAsync("alert", "Error sending test email");
        }
    }

    private async Task SendCustomEmail()
    {
        try
        {
            if (EventId.HasValue && !string.IsNullOrWhiteSpace(model.CustomEmail.Subject) && !string.IsNullOrWhiteSpace(model.CustomEmail.Body))
            {
                await ApiClient.SendEventEmailAsync(EventId.Value, model.CustomEmail);
                await JSRuntime.InvokeVoidAsync("alert", "Custom email sent successfully");
                
                // Clear form
                model.CustomEmail = new SendEventEmailRequest();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error sending custom email");
            await JSRuntime.InvokeVoidAsync("alert", "Error sending custom email");
        }
    }

    private async Task SaveDraftEmail()
    {
        // TODO: Save draft email
        await JSRuntime.InvokeVoidAsync("alert", "Email saved as draft");
    }

    // Volunteer Tab Methods
    private void AddNewTask()
    {
        var newTask = new VolunteerTaskDto
        {
            Id = Guid.NewGuid(),
            Name = "New Task",
            Description = "",
            StartTime = TimeOnly.Parse("18:00"),
            EndTime = TimeOnly.Parse("22:00"),
            RequiredVolunteers = 1
        };
        model.VolunteerTasks.Add(newTask);
        EditTask(newTask.Id);
    }

    private void EditTask(Guid taskId)
    {
        var task = model.VolunteerTasks.FirstOrDefault(t => t.Id == taskId);
        if (task != null)
        {
            editingTaskId = taskId;
            editingTask = new CreateVolunteerTaskRequest
            {
                Name = task.Name,
                Description = task.Description,
                StartTime = task.StartTime,
                EndTime = task.EndTime,
                RequiredVolunteers = task.RequiredVolunteers
            };
            editingTaskStartTime = task.StartTime.ToString("HH:mm");
            editingTaskEndTime = task.EndTime.ToString("HH:mm");
        }
    }

    private void CancelEditTask()
    {
        editingTaskId = null;
        editingTask = new();
    }

    private async Task SaveTask()
    {
        var task = model.VolunteerTasks.FirstOrDefault(t => t.Id == editingTaskId);
        if (task != null)
        {
            task.Name = editingTask.Name;
            task.Description = editingTask.Description;
            
            if (TimeOnly.TryParse(editingTaskStartTime, out var startTime))
            {
                task.StartTime = startTime;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid start time format. Please use HH:mm format.");
                return;
            }
            
            if (TimeOnly.TryParse(editingTaskEndTime, out var endTime))
            {
                task.EndTime = endTime;
            }
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", "Invalid end time format. Please use HH:mm format.");
                return;
            }
            
            task.RequiredVolunteers = editingTask.RequiredVolunteers;
        }
        editingTaskId = null;
        // TODO: Save via API
    }

    private async Task DeleteTask(Guid taskId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this task?");
        if (confirmed)
        {
            model.VolunteerTasks.RemoveAll(t => t.Id == taskId);
            // TODO: Delete via API
        }
    }

    private async Task AddVolunteerToTask(Guid taskId)
    {
        // TODO: Show modal to select volunteer
        await JSRuntime.InvokeVoidAsync("alert", "Add volunteer modal not yet implemented");
    }

    private async Task AddVolunteerTicket(Guid assignmentId)
    {
        // TODO: Add ticket for volunteer
        await JSRuntime.InvokeVoidAsync("alert", "Add volunteer ticket not yet implemented");
    }
    
    private void SetEventTypeWorkshop()
    {
        model.EventType = Core.Enums.EventType.Workshop;
    }
    
    private void SetEventTypeSocial()
    {
        model.EventType = Core.Enums.EventType.Social;
    }
    
    private void RemoveEventImage()
    {
        model.ImageUrl = null;
    }
    
    private void OnEndDateChanged()
    {
        // If RegistrationClosesAt is null or hasn't been modified from default, update it to match the end date
        if (!model.RegistrationClosesAt.HasValue || model.RegistrationClosesAt == DateTime.MinValue)
        {
            model.RegistrationClosesAt = model.EndDate;
        }
    }
    
    private async Task LoadEventOrders()
    {
        try
        {
            if (EventId.HasValue)
            {
                var attendees = await ApiClient.GetEventAttendeesAsync(EventId.Value);
                model.Orders = attendees?.Select(a => new EventOrderDto
                {
                    RegistrationId = a.RegistrationId,
                    OrderNumber = a.RegistrationId.ToString().Substring(0, 8).ToUpper(),
                    AttendeeName = a.SceneName,
                    TicketType = "Individual", // Default for now, update when TicketType is available in EventAttendeeDto
                    Status = a.Status.ToString(),
                    OrderDate = a.RegisteredAt,
                    Amount = a.AmountPaid
                }).ToList() ?? new List<EventOrderDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event orders");
            model.Orders = new List<EventOrderDto>();
        }
    }
    
    private async Task LoadEventVolunteers()
    {
        try
        {
            if (EventId.HasValue)
            {
                var tasks = await ApiClient.GetEventVolunteerTasksAsync(EventId.Value);
                model.VolunteerTasks = tasks ?? new List<VolunteerTaskDto>();
                
                // Calculate summary
                var totalVolunteers = model.VolunteerTasks.Sum(t => t.Assignments?.Count ?? 0);
                var confirmedVolunteers = model.VolunteerTasks.Sum(t => 
                    t.Assignments?.Count(a => a.Status == VolunteerStatus.Confirmed) ?? 0);
                var pendingVolunteers = model.VolunteerTasks.Sum(t => 
                    t.Assignments?.Count(a => a.Status == VolunteerStatus.Pending) ?? 0);
                    
                model.VolunteerSummary = new VolunteerSummaryDto
                {
                    TotalVolunteers = totalVolunteers,
                    ConfirmedVolunteers = confirmedVolunteers,
                    PendingVolunteers = pendingVolunteers
                };
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event volunteers");
            model.VolunteerTasks = new List<VolunteerTaskDto>();
        }
    }
    
    private async Task LoadEmailTemplates()
    {
        try
        {
            if (EventId.HasValue)
            {
                var templates = await ApiClient.GetEventEmailTemplatesAsync(EventId.Value);
                model.EmailTemplates = templates ?? new List<EventEmailTemplateDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading email templates");
            model.EmailTemplates = new List<EventEmailTemplateDto>();
        }
    }
    
    private CreateEventRequest MapToCreateRequest()
    {
        return new CreateEventRequest
        {
            EventType = model.EventType,
            Title = model.Title,
            Description = model.Description,
            ImageUrl = model.ImageUrl,
            StartDate = model.StartDate,
            EndDate = model.EndDate,
            Location = model.Location,
            Capacity = model.Capacity,
            InstructorId = model.InstructorId,
            RegistrationOpensAt = model.RegistrationOpensAt,
            RegistrationClosesAt = model.RegistrationClosesAt,
            RequiresVetting = model.RequiresVetting,
            Tags = model.Tags,
            SkillLevel = model.SkillLevel,
            IsPublished = model.IsPublished,
            TicketTypes = model.TicketTypes,
            IndividualPrice = model.IndividualPrice,
            CouplesPrice = model.CouplesPrice,
            RefundCutoffHours = model.RefundCutoffHours
        };
    }
    
    private UpdateEventRequest MapToUpdateRequest()
    {
        return new UpdateEventRequest
        {
            Name = model.Title,
            Description = model.Description,
            ImageUrl = model.ImageUrl,
            StartDateTime = model.StartDate,
            EndDateTime = model.EndDate,
            Location = model.Location,
            MaxAttendees = model.Capacity,
            RegistrationOpensAt = model.RegistrationOpensAt,
            RegistrationClosesAt = model.RegistrationClosesAt,
            RequiresVetting = model.RequiresVetting,
            Tags = model.Tags,
            RequiredSkillLevels = string.IsNullOrEmpty(model.SkillLevel) ? new List<string>() : new List<string> { model.SkillLevel },
            TicketTypes = model.TicketTypes,
            IndividualPrice = model.IndividualPrice,
            CouplesPrice = model.CouplesPrice,
            RefundCutoffHours = model.RefundCutoffHours
        };
    }
    private async Task ShowVariableMenu(SfRichTextEditor? editor)
    {
        if (editor == null) return;
        
        var variables = new[] 
        { 
            "{attendee_name}", 
            "{event_name}", 
            "{event_date}", 
            "{event_time}", 
            "{venue_name}", 
            "{venue_address}" 
        };
        
        // Simple implementation using prompt for variable selection
        var variableList = string.Join("\n", variables.Select((v, i) => $"{i + 1}. {v}"));
        var choice = await JSRuntime.InvokeAsync<string>("prompt", $"Select a variable to insert:\n{variableList}\n\nEnter the number (1-{variables.Length}):");
        
        if (!string.IsNullOrEmpty(choice) && int.TryParse(choice, out int index) && index >= 1 && index <= variables.Length)
        {
            var selectedVariable = variables[index - 1];
            
            // Insert the variable at the cursor position using Syncfusion's ExecuteCommand
            if (editor != null)
            {
                await editor.ExecuteCommandAsync(CommandName.InsertHTML, $"<span style='background-color: #e3f2fd; color: #1976d2; padding: 2px 4px; border-radius: 3px;'>{selectedVariable}</span>");
            }
        }
    }
    
    private async Task LoadEventRsvps()
    {
        try
        {
            if (EventId.HasValue)
            {
                var rsvps = await ApiClient.GetEventRsvpsAsync(EventId.Value);
                model.Rsvps = rsvps ?? new List<RsvpDto>();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading event RSVPs");
            model.Rsvps = new List<RsvpDto>();
        }
    }
    
    private string GetRsvpStatusClass(RsvpStatus status)
    {
        return status switch
        {
            RsvpStatus.Confirmed => "confirmed",
            RsvpStatus.Waitlisted => "waitlisted",
            RsvpStatus.CheckedIn => "checked-in",
            RsvpStatus.Cancelled => "cancelled",
            _ => ""
        };
    }
    
    private bool HasPurchasedTicket(Guid userId)
    {
        // Check if this user has a confirmed ticket in the orders list
        return model.Orders.Any(o => 
            o.AttendeeName == model.Rsvps.FirstOrDefault(r => r.UserId == userId)?.UserSceneName && 
            o.Status == "Confirmed");
    }
    
    private async Task ConfirmRsvpFromWaitlist(Guid rsvpId)
    {
        try
        {
            if (EventId.HasValue)
            {
                var updateRequest = new Core.DTOs.RsvpUpdateRequest
                {
                    Status = RsvpStatus.Confirmed.ToString()
                };
                
                await ApiClient.UpdateRsvpAsync(EventId.Value, rsvpId, updateRequest);
                
                // Update local state
                var rsvp = model.Rsvps.FirstOrDefault(r => r.Id == rsvpId);
                if (rsvp != null)
                {
                    rsvp.Status = RsvpStatus.Confirmed;
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error confirming RSVP from waitlist");
            await JSRuntime.InvokeVoidAsync("alert", "Error confirming RSVP");
        }
    }
    
    private async Task CancelRsvp(Guid rsvpId)
    {
        try
        {
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to cancel this RSVP?");
            if (confirmed && EventId.HasValue)
            {
                await ApiClient.CancelRsvpAsync(EventId.Value, rsvpId);
                
                // Update local state
                var rsvp = model.Rsvps.FirstOrDefault(r => r.Id == rsvpId);
                if (rsvp != null)
                {
                    rsvp.Status = RsvpStatus.Cancelled;
                }
                
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error cancelling RSVP");
            await JSRuntime.InvokeVoidAsync("alert", "Error cancelling RSVP");
        }
    }
    
    private void OnDescriptionChanged(Syncfusion.Blazor.RichTextEditor.ChangeEventArgs args)
    {
        model.Description = args.Value ?? string.Empty;
        StateHasChanged();
    }
}