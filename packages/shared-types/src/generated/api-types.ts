/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/admin/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get paginated list of users (admin only)
         * @description Returns a paginated list of users with optional filtering and sorting
         */
        get: operations["GetUsers"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/users/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user by ID (admin only)
         * @description Returns detailed user information by user ID
         */
        get: operations["GetUser"];
        /**
         * Update user by ID (admin only)
         * @description Updates user information including role, status, and profile data
         */
        put: operations["UpdateUser"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/admin/events/{eventId}/participations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all participations for an event (admin only)
         * @description Returns all RSVPs and ticket purchases for the specified event. Admin role required.
         */
        get: operations["GetEventParticipations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/current-user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current authenticated user information
         * @description Returns the current user's profile information based on JWT token
         */
        get: operations["GetCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Authenticate user with email and password
         * @description Validates user credentials and returns JWT token with user information
         */
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Register new user account
         * @description Creates a new user account with email, password, and scene name
         */
        post: operations["Register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/service-token": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Generate JWT token for service-to-service authentication
         * @description Used by Web Service to get JWT tokens for API calls using service secret authentication
         */
        post: operations["GetServiceToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout current user
         * @description Logs out the current user, clears cookies, and blacklists tokens. Works even with expired tokens.
         */
        post: operations["Logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/user": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user information from httpOnly cookie
         * @description BFF pattern - validates httpOnly cookie and returns user info
         */
        get: operations["GetUserFromCookie"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/refresh": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Refresh authentication token silently
         * @description BFF pattern - refreshes httpOnly cookie with new JWT token
         */
        post: operations["RefreshToken"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/debug-status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Debug authentication status (DEV ONLY)
         * @description Check current authentication status for debugging logout issues
         */
        get: operations["DebugAuthStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/events/{eventId}/attendees": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get attendees for event check-in
         * @description Returns attendees list with search and filtering for check-in interface
         */
        get: operations["GetEventAttendees"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/events/{eventId}/checkin": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Process attendee check-in
         * @description Check in an attendee for the event with capacity validation
         */
        post: operations["ProcessCheckIn"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/events/{eventId}/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get event check-in dashboard
         * @description Returns real-time check-in statistics and recent activity
         */
        get: operations["GetEventDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/events/{eventId}/sync": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Sync offline check-in data
         * @description Process pending check-ins from offline operation with conflict detection
         */
        post: operations["SyncOfflineCheckIns"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/events/{eventId}/manual-entry": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create manual entry for walk-in attendee
         * @description Register and check in a walk-in attendee who isn't pre-registered
         */
        post: operations["CreateManualEntry"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/checkin/sync/pending-count": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get pending sync operations count
         * @description Returns the number of pending offline operations for the current user
         */
        get: operations["GetPendingSyncCount"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's dashboard data
         * @description Returns the current user's dashboard including profile info and vetting status
         */
        get: operations["GetUserDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's upcoming events
         * @description Returns the current user's upcoming events they are registered for
         */
        get: operations["GetUserEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/dashboard/statistics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user's membership statistics
         * @description Returns the current user's attendance history and membership metrics
         */
        get: operations["GetUserStatistics"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get all events
         * @description Returns events from the database. Use ?includeUnpublished=true for admin access to draft events. Requires Administrator role for unpublished events.
         */
        get: operations["GetEvents"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get single event by ID
         * @description Returns a specific event by its unique identifier
         */
        get: operations["GetEvent"];
        /**
         * Update an existing event
         * @description Updates an event with the provided data. Supports partial updates (only non-null fields will be updated). Business rules: Cannot update past events, cannot reduce capacity below current attendance.
         */
        put: operations["UpdateEvent"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get basic API health status
         * @description Returns basic health information including database connectivity and user count
         */
        get: operations["GetHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/health/detailed": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed API health information
         * @description Returns comprehensive health metrics including database version and active user counts
         */
        get: operations["GetDetailedHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Legacy health check endpoint
         * @description Simple health check for compatibility with existing monitoring
         */
        get: operations["GetLegacyHealth"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}/participation": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's participation status for an event
         * @description Returns the user's current participation status (RSVP or ticket) for the specified event
         */
        get: operations["GetParticipationStatus"];
        put?: never;
        post?: never;
        /**
         * Cancel participation in event
         * @description Cancels the user's participation (RSVP or ticket) in the specified event
         */
        delete: operations["CancelParticipation"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}/rsvp": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Create RSVP for social event
         * @description Creates an RSVP for a social event. Blocked for users with OnHold, Denied, or Withdrawn vetting status.
         */
        post: operations["CreateRSVP"];
        /**
         * Cancel RSVP (backward compatibility)
         * @description Cancels the user's RSVP. Alias for cancelling participation.
         */
        delete: operations["CancelRSVP"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events/{eventId}/tickets": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Purchase ticket for class event
         * @description Purchases a ticket for a class event. Blocked for users with OnHold, Denied, or Withdrawn vetting status.
         */
        post: operations["PurchaseTicket"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/participations": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's event participations
         * @description Returns all current participations (RSVPs and tickets) for the authenticated user
         */
        get: operations["GetUserParticipations"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/process": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ProcessPaymentApiRequest"];
                    "text/json": components["schemas"]["ProcessPaymentApiRequest"];
                    "application/*+json": components["schemas"]["ProcessPaymentApiRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PaymentResponse"];
                        "application/json": components["schemas"]["PaymentResponse"];
                        "text/json": components["schemas"]["PaymentResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{paymentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    paymentId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PaymentResponse"];
                        "application/json": components["schemas"]["PaymentResponse"];
                        "text/json": components["schemas"]["PaymentResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/registration/{eventRegistrationId}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    eventRegistrationId: string;
                };
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["PaymentStatusResponse"];
                        "application/json": components["schemas"]["PaymentStatusResponse"];
                        "text/json": components["schemas"]["PaymentStatusResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/payments/{paymentId}/refund": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path: {
                    paymentId: string;
                };
                cookie?: never;
            };
            requestBody?: {
                content: {
                    "application/json": components["schemas"]["ProcessRefundApiRequest"];
                    "text/json": components["schemas"]["ProcessRefundApiRequest"];
                    "application/*+json": components["schemas"]["ProcessRefundApiRequest"];
                };
            };
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["RefundResponse"];
                        "application/json": components["schemas"]["RefundResponse"];
                        "text/json": components["schemas"]["RefundResponse"];
                    };
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ValidationProblemDetails"];
                        "application/json": components["schemas"]["ValidationProblemDetails"];
                        "text/json": components["schemas"]["ValidationProblemDetails"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Not Found */
                404: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProblemDetails"];
                        "application/json": components["schemas"]["ProblemDetails"];
                        "text/json": components["schemas"]["ProblemDetails"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Protected/welcome": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ProtectedWelcomeResponse"];
                        "application/json": components["schemas"]["ProtectedWelcomeResponse"];
                        "text/json": components["schemas"]["ProtectedWelcomeResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ObjectApiResponse"];
                        "application/json": components["schemas"]["ObjectApiResponse"];
                        "text/json": components["schemas"]["ObjectApiResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/Protected/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["AuthUserResponseApiResponse"];
                        "application/json": components["schemas"]["AuthUserResponseApiResponse"];
                        "text/json": components["schemas"]["AuthUserResponseApiResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "text/plain": components["schemas"]["ObjectApiResponse"];
                        "application/json": components["schemas"]["ObjectApiResponse"];
                        "text/json": components["schemas"]["ObjectApiResponse"];
                    };
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/safety/incidents": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Submit safety incident report
         * @description Submit a new safety incident report (anonymous or identified)
         */
        post: operations["SubmitIncident"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/safety/incidents/{referenceNumber}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get incident status for tracking
         * @description Get current status of incident by reference number (public access)
         */
        get: operations["GetIncidentStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/safety/admin/dashboard": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get safety team dashboard data
         * @description Get dashboard statistics and recent incidents for safety team
         */
        get: operations["GetSafetyDashboard"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/safety/admin/incidents/{incidentId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get detailed incident information
         * @description Get full incident details with decrypted data for safety team
         */
        get: operations["GetIncidentDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/safety/my-reports": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get user's incident reports
         * @description Get list of incident reports submitted by current user
         */
        get: operations["GetUserReports"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile
         * @description Returns the current user's profile information based on JWT token
         */
        get: operations["GetUserProfile"];
        /**
         * Update current user profile
         * @description Updates the current user's profile information (scene name, pronouns)
         */
        put: operations["UpdateUserProfile"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/user/profile": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get current user profile (singular endpoint)
         * @description Returns the current user's profile information based on JWT token
         */
        get: operations["GetUserProfileSingular"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/users/by-role/{role}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get users by role
         * @description Get list of users filtered by role (e.g., 'Teacher', 'Admin') for dropdown options
         */
        get: operations["GetUsersByRole"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/reviewer/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Get paginated list of vetting applications */
        post: operations["GetApplicationsForReview"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/reviewer/applications/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get detailed application information */
        get: operations["GetApplicationDetail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/reviewer/applications/{id}/decisions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a review decision for an application */
        post: operations["SubmitReviewDecision"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/reviewer/applications/{id}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a note to an application */
        post: operations["AddApplicationNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/applications/{id}/approve": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Approve an application */
        post: operations["ApproveApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/applications/{id}/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        /** Change application status (for OnHold, etc.) */
        put: operations["ChangeApplicationStatus"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/applications/{id}/notes": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Add a simple note to an application */
        post: operations["AddSimpleApplicationNote"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/applications/{id}/deny": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Deny an application */
        post: operations["DenyApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/status": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's vetting status */
        get: operations["GetVettingStatus"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get current user's vetting application details */
        get: operations["GetMyVettingApplication"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/applications/simplified": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a simplified vetting application from authenticated user */
        post: operations["SubmitSimplifiedApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/my-application": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check if current user has an existing application */
        get: operations["GetMyApplication"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/public/applications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a simplified vetting application (public endpoint) */
        post: operations["SubmitPublicVettingApplication"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/public/applications/full": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Submit a complete vetting application with all fields */
        post: operations["SubmitVettingApplicationFull"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/vetting/public/applications/status/{token}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Check application status using status token */
        get: operations["GetApplicationStatusByToken"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhooks/paypal": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
                /** @description Bad Request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ProblemDetails"];
                    };
                };
                /** @description Internal Server Error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/webhooks/paypal/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody?: never;
            responses: {
                /** @description OK */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content?: never;
                };
            };
        };
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        ActionItem: {
            /** Format: uuid */
            incidentId?: string;
            referenceNumber?: string | null;
            actionNeeded?: string | null;
            priority?: components["schemas"]["IncidentSeverity"];
            /** Format: date-time */
            dueDate?: string;
        };
        AdminDashboardResponse: {
            statistics?: components["schemas"]["SafetyStatistics"];
            recentIncidents?: components["schemas"]["IncidentSummaryResponse"][] | null;
            pendingActions?: components["schemas"]["ActionItem"][] | null;
        };
        ApplicationDetailResponse: {
            /** Format: uuid */
            id?: string;
            applicationNumber?: string | null;
            status?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            /** Format: date-time */
            lastActivityAt?: string | null;
            fullName?: string | null;
            sceneName?: string | null;
            pronouns?: string | null;
            email?: string | null;
            phone?: string | null;
            experienceLevel?: string | null;
            /** Format: int32 */
            yearsExperience?: number;
            experienceDescription?: string | null;
            safetyKnowledge?: string | null;
            consentUnderstanding?: string | null;
            whyJoinCommunity?: string | null;
            skillsInterests?: string[] | null;
            expectationsGoals?: string | null;
            agreesToGuidelines?: boolean;
            isAnonymous?: boolean;
            agreesToTerms?: boolean;
            consentToContact?: boolean;
            assignedReviewerName?: string | null;
            /** Format: date-time */
            reviewStartedAt?: string | null;
            /** Format: int32 */
            priority?: number;
            /** Format: date-time */
            interviewScheduledFor?: string | null;
            references?: components["schemas"]["ReferenceDetailDto"][] | null;
            notes?: components["schemas"]["ApplicationNoteDto"][] | null;
            decisions?: components["schemas"]["ReviewDecisionDto"][] | null;
            workflowHistory?: components["schemas"]["WorkflowHistoryDto"][] | null;
            adminNotes?: string | null;
            tags?: string[] | null;
            attachments?: string[] | null;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: uuid */
            applicationId?: string;
        };
        ApplicationDetailResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["ApplicationDetailResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        ApplicationFilterRequest: {
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            statusFilters?: string[] | null;
            onlyMyAssignments?: boolean | null;
            onlyUnassigned?: boolean | null;
            /** Format: uuid */
            assignedReviewerId?: string | null;
            priorityFilters?: number[] | null;
            experienceLevelFilters?: number[] | null;
            /** Format: int32 */
            minYearsExperience?: number | null;
            /** Format: int32 */
            maxYearsExperience?: number | null;
            skillsFilters?: string[] | null;
            /** Format: date-time */
            submittedAfter?: string | null;
            /** Format: date-time */
            submittedBefore?: string | null;
            /** Format: date-time */
            lastActivityAfter?: string | null;
            /** Format: date-time */
            lastActivityBefore?: string | null;
            searchQuery?: string | null;
            onlyCompleteReferences?: boolean | null;
            onlyPendingReferences?: boolean | null;
            sortBy?: string | null;
            sortDirection?: string | null;
        };
        ApplicationNoteDto: {
            /** Format: uuid */
            id?: string;
            content?: string | null;
            type?: string | null;
            isPrivate?: boolean;
            tags?: string[] | null;
            reviewerName?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        ApplicationProgressSummary: {
            applicationSubmitted?: boolean;
            referencesContacted?: boolean;
            referencesReceived?: boolean;
            underReview?: boolean;
            interviewScheduled?: boolean;
            decisionMade?: boolean;
            /** Format: int32 */
            progressPercentage?: number;
            currentPhase?: string | null;
        };
        ApplicationReferenceStatus: {
            /** Format: int32 */
            totalReferences?: number;
            /** Format: int32 */
            contactedReferences?: number;
            /** Format: int32 */
            respondedReferences?: number;
            allReferencesComplete?: boolean;
            /** Format: date-time */
            oldestPendingReferenceDate?: string | null;
        };
        ApplicationStatusInfo: {
            /** Format: uuid */
            applicationId?: string;
            applicationNumber?: string | null;
            status?: string | null;
            statusDescription?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            /** Format: date-time */
            lastUpdated?: string;
            nextSteps?: string | null;
            /** Format: int32 */
            estimatedDaysRemaining?: number | null;
        };
        ApplicationStatusResponse: {
            applicationNumber?: string | null;
            status?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            statusDescription?: string | null;
            /** Format: date-time */
            lastUpdateAt?: string | null;
            /** Format: int32 */
            estimatedDaysRemaining?: number | null;
            progress?: components["schemas"]["ApplicationProgressSummary"];
            recentUpdates?: components["schemas"]["StatusUpdateSummary"][] | null;
        };
        ApplicationStatusResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["ApplicationStatusResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        ApplicationSubmissionResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            applicationId?: string;
            applicationNumber?: string | null;
            statusToken?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            confirmationMessage?: string | null;
            /** Format: int32 */
            estimatedReviewDays?: number;
            nextSteps?: string | null;
            referenceStatuses?: components["schemas"]["ReferenceStatusSummary"][] | null;
        };
        ApplicationSubmissionResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["ApplicationSubmissionResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        ApplicationSummaryDto: {
            /** Format: uuid */
            id?: string;
            applicationNumber?: string | null;
            status?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            /** Format: date-time */
            lastActivityAt?: string | null;
            sceneName?: string | null;
            experienceLevel?: string | null;
            /** Format: int32 */
            yearsExperience?: number;
            isAnonymous?: boolean;
            assignedReviewerName?: string | null;
            /** Format: date-time */
            reviewStartedAt?: string | null;
            /** Format: int32 */
            priority?: number;
            /** Format: int32 */
            daysInCurrentStatus?: number;
            referenceStatus?: components["schemas"]["ApplicationReferenceStatus"];
            hasRecentNotes?: boolean;
            hasPendingActions?: boolean;
            /** Format: date-time */
            interviewScheduledFor?: string | null;
            skillsTags?: string[] | null;
        };
        ApplicationSummaryDtoPagedResult: {
            items?: components["schemas"]["ApplicationSummaryDto"][] | null;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalPages?: number;
            hasPreviousPage?: boolean;
            hasNextPage?: boolean;
        };
        ApplicationSummaryDtoPagedResultApiResponse: {
            success?: boolean;
            data?: components["schemas"]["ApplicationSummaryDtoPagedResult"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        AuditLogDto: {
            /** Format: uuid */
            id?: string;
            actionType?: string | null;
            actionDescription?: string | null;
            /** Format: uuid */
            userId?: string | null;
            userName?: string | null;
            /** Format: date-time */
            createdAt?: string;
        };
        AuthUserResponse: {
            /** Format: uuid */
            id?: string;
            email?: string | null;
            sceneName?: string | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            lastLoginAt?: string | null;
            role?: string | null;
            roles?: string[] | null;
            isVetted?: boolean;
            isActive?: boolean;
        };
        AuthUserResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["AuthUserResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        CheckInRequest: {
            attendeeId: string;
            checkInTime: string;
            staffMemberId: string;
            notes?: string | null;
            overrideCapacity?: boolean;
            isManualEntry?: boolean;
            manualEntryData?: components["schemas"]["ManualEntryData"];
        };
        CreateApplicationRequest: {
            fullName: string;
            sceneName: string;
            pronouns?: string | null;
            /** Format: email */
            email: string;
            /** Format: tel */
            phone?: string | null;
            /** Format: int32 */
            experienceLevel: number;
            /** Format: int32 */
            yearsExperience: number;
            experienceDescription: string;
            safetyKnowledge: string;
            consentUnderstanding: string;
            whyJoinCommunity: string;
            skillsInterests: string[];
            expectationsGoals: string;
            agreesToGuidelines: boolean;
            references: components["schemas"]["ReferenceRequest"][];
            agreesToTerms: boolean;
            isAnonymous: boolean;
            consentToContact: boolean;
        };
        CreateIncidentRequest: {
            /** Format: uuid */
            reporterId?: string | null;
            severity?: components["schemas"]["IncidentSeverity"];
            /** Format: date-time */
            incidentDate?: string;
            location?: string | null;
            description?: string | null;
            involvedParties?: string | null;
            witnesses?: string | null;
            isAnonymous?: boolean;
            requestFollowUp?: boolean;
            contactEmail?: string | null;
            contactPhone?: string | null;
        };
        CreateNoteRequest: {
            content: string;
            /** Format: int32 */
            type: number;
            isPrivate?: boolean;
            tags?: string[] | null;
        };
        CreateRSVPRequest: {
            /** Format: uuid */
            eventId: string;
            notes?: string | null;
        };
        CreateTicketPurchaseRequest: {
            /** Format: uuid */
            eventId: string;
            notes?: string | null;
            paymentMethodId?: string | null;
        };
        DashboardEventDto: {
            /** Format: uuid */
            id?: string;
            title?: string | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            location?: string | null;
            eventType?: string | null;
            instructorName?: string | null;
            registrationStatus?: string | null;
            /** Format: uuid */
            ticketId?: string;
            confirmationCode?: string | null;
        };
        DetailedHealthResponse: {
            status?: string | null;
            /** Format: date-time */
            timestamp?: string;
            databaseConnected?: boolean;
            /** Format: int32 */
            userCount?: number;
            version?: string | null;
            databaseVersion?: string | null;
            /** Format: int32 */
            activeUserCount?: number;
            environment?: string | null;
        };
        EventDto: {
            id?: string | null;
            title?: string | null;
            shortDescription?: string | null;
            description?: string | null;
            /** Format: date-time */
            startDate?: string;
            /** Format: date-time */
            endDate?: string;
            location?: string | null;
            eventType?: string | null;
            /** Format: int32 */
            capacity?: number;
            isPublished?: boolean;
            /** Format: int32 */
            currentAttendees?: number;
            /** Format: int32 */
            currentRSVPs?: number;
            /** Format: int32 */
            currentTickets?: number;
            sessions?: components["schemas"]["SessionDto"][] | null;
            ticketTypes?: components["schemas"]["TicketTypeDto"][] | null;
            volunteerPositions?: components["schemas"]["VolunteerPositionDto"][] | null;
            teacherIds?: string[] | null;
        };
        EventDtoApiResponse: {
            success?: boolean;
            data?: components["schemas"]["EventDto"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        EventDtoListApiResponse: {
            success?: boolean;
            data?: components["schemas"]["EventDto"][] | null;
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        EventParticipationDto: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            userId?: string;
            userSceneName?: string | null;
            userEmail?: string | null;
            participationType?: components["schemas"]["ParticipationType"];
            status?: components["schemas"]["ParticipationStatus"];
            /** Format: date-time */
            participationDate?: string;
            notes?: string | null;
            canCancel?: boolean;
            metadata?: string | null;
        };
        EventParticipationDtoListApiResponse: {
            success?: boolean;
            data?: components["schemas"]["EventParticipationDto"][] | null;
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        HealthResponse: {
            status?: string | null;
            /** Format: date-time */
            timestamp?: string;
            databaseConnected?: boolean;
            /** Format: int32 */
            userCount?: number;
            version?: string | null;
        };
        IncidentResponse: {
            /** Format: uuid */
            id?: string;
            referenceNumber?: string | null;
            /** Format: uuid */
            reporterId?: string | null;
            reporterName?: string | null;
            severity?: components["schemas"]["IncidentSeverity"];
            /** Format: date-time */
            incidentDate?: string;
            /** Format: date-time */
            reportedAt?: string;
            location?: string | null;
            description?: string | null;
            involvedParties?: string | null;
            witnesses?: string | null;
            contactEmail?: string | null;
            contactPhone?: string | null;
            isAnonymous?: boolean;
            requestFollowUp?: boolean;
            status?: components["schemas"]["IncidentStatus"];
            /** Format: uuid */
            assignedTo?: string | null;
            assignedUserName?: string | null;
            auditTrail?: components["schemas"]["AuditLogDto"][] | null;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        IncidentSeverity: "Low" | "Medium" | "High" | "Critical";
        /** @enum {string} */
        IncidentStatus: "New" | "InProgress" | "Resolved" | "Archived";
        IncidentStatusResponse: {
            referenceNumber?: string | null;
            status?: string | null;
            /** Format: date-time */
            lastUpdated?: string;
            canProvideMoreInfo?: boolean;
        };
        IncidentSummaryResponse: {
            /** Format: uuid */
            id?: string;
            referenceNumber?: string | null;
            severity?: components["schemas"]["IncidentSeverity"];
            /** Format: date-time */
            incidentDate?: string;
            /** Format: date-time */
            reportedAt?: string;
            location?: string | null;
            isAnonymous?: boolean;
            status?: components["schemas"]["IncidentStatus"];
            /** Format: uuid */
            assignedTo?: string | null;
            assignedUserName?: string | null;
        };
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
        };
        LoginResponse: {
            token?: string | null;
            /** Format: date-time */
            expiresAt?: string;
            user?: components["schemas"]["AuthUserResponse"];
        };
        ManualEntryData: {
            name: string;
            /** Format: email */
            email: string;
            /** Format: tel */
            phone: string;
            dietaryRestrictions?: string | null;
            accessibilityNeeds?: string | null;
            hasCompletedWaiver?: boolean;
        };
        MyApplicationStatusResponse: {
            hasApplication?: boolean;
            application?: components["schemas"]["ApplicationStatusInfo"];
        };
        MyApplicationStatusResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["MyApplicationStatusResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        NoteResponse: {
            /** Format: uuid */
            noteId?: string;
            /** Format: date-time */
            createdAt?: string;
            confirmationMessage?: string | null;
        };
        NoteResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["NoteResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        ObjectApiResponse: {
            success?: boolean;
            data?: unknown;
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        /** @enum {string} */
        ParticipationStatus: "Active" | "Cancelled" | "Refunded" | "Waitlisted";
        ParticipationStatusDto: {
            /** Format: uuid */
            eventId?: string;
            /** Format: uuid */
            userId?: string;
            participationType?: components["schemas"]["ParticipationType"];
            status?: components["schemas"]["ParticipationStatus"];
            /** Format: date-time */
            participationDate?: string;
            notes?: string | null;
            canCancel?: boolean;
            metadata?: string | null;
        };
        /** @enum {string} */
        ParticipationType: "RSVP" | "Ticket";
        /** @enum {string} */
        PaymentMethodType: "SavedCard" | "NewCard" | "BankTransfer" | "PayPal" | "Venmo";
        PaymentResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            eventRegistrationId?: string;
            /** Format: uuid */
            userId?: string;
            /** Format: double */
            amount?: number;
            currency?: string | null;
            displayAmount?: string | null;
            /** Format: double */
            originalAmount?: number | null;
            /** Format: double */
            slidingScalePercentage?: number;
            /** Format: double */
            discountAmount?: number | null;
            status?: components["schemas"]["PaymentStatus"];
            statusDescription?: string | null;
            paymentMethodType?: components["schemas"]["PaymentMethodType"];
            /** Format: date-time */
            processedAt?: string | null;
            /** Format: date-time */
            createdAt?: string;
            refundInfo?: components["schemas"]["RefundInfoResponse"];
            clientSecret?: string | null;
        };
        /** @enum {string} */
        PaymentStatus: "Pending" | "Completed" | "Failed" | "Refunded" | "PartiallyRefunded";
        PaymentStatusResponse: {
            /** Format: uuid */
            paymentId?: string;
            /** Format: uuid */
            eventRegistrationId?: string;
            status?: components["schemas"]["PaymentStatus"];
            statusDescription?: string | null;
            isCompleted?: boolean;
            isRefunded?: boolean;
            /** Format: double */
            amount?: number;
            currency?: string | null;
            /** Format: date-time */
            processedAt?: string | null;
        };
        PendingCheckIn: {
            localId: string;
            attendeeId: string;
            checkInTime: string;
            staffMemberId: string;
            notes?: string | null;
            isManualEntry?: boolean;
            manualEntryData?: components["schemas"]["ManualEntryData"];
        };
        ProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
        } & {
            [key: string]: unknown;
        };
        ProcessPaymentApiRequest: {
            /** Format: uuid */
            eventRegistrationId?: string;
            /** Format: double */
            originalAmount?: number;
            currency?: string | null;
            /** Format: double */
            slidingScalePercentage?: number;
            paymentMethodType?: components["schemas"]["PaymentMethodType"];
            returnUrl?: string | null;
            cancelUrl?: string | null;
        };
        ProcessRefundApiRequest: {
            /** Format: uuid */
            paymentId?: string;
            /** Format: double */
            refundAmount?: number;
            currency?: string | null;
            refundReason?: string | null;
            metadata?: {
                [key: string]: unknown;
            } | null;
        };
        ProtectedWelcomeResponse: {
            message?: string | null;
            user?: components["schemas"]["AuthUserResponse"];
            /** Format: date-time */
            serverTime?: string;
            tokenClaims?: components["schemas"]["TokenClaims"];
        };
        PublicApplicationSubmissionRequest: {
            /** Format: email */
            email: string;
            sceneName: string;
            realName: string;
            /** Format: tel */
            phoneNumber: string;
            emergencyContactName: string;
            /** Format: tel */
            emergencyContactPhone: string;
            experience: string;
            interests: string;
            references: string;
            agreeToRules: boolean;
            consentToBackground: boolean;
            pronouns?: string | null;
            additionalInfo?: string | null;
        };
        ReferenceDetailDto: {
            /** Format: uuid */
            id?: string;
            name?: string | null;
            email?: string | null;
            relationship?: string | null;
            /** Format: int32 */
            order?: number;
            status?: string | null;
            /** Format: date-time */
            contactedAt?: string | null;
            /** Format: date-time */
            respondedAt?: string | null;
            /** Format: date-time */
            formExpiresAt?: string | null;
            response?: components["schemas"]["ReferenceResponseDto"];
        };
        ReferenceRequest: {
            name: string;
            /** Format: email */
            email: string;
            relationship: string;
            /** Format: int32 */
            order?: number;
        };
        ReferenceResponseDto: {
            relationshipDuration?: string | null;
            experienceAssessment?: string | null;
            safetyConcerns?: string | null;
            communityReadiness?: string | null;
            recommendation?: string | null;
            additionalComments?: string | null;
            /** Format: date-time */
            respondedAt?: string;
        };
        ReferenceStatusSummary: {
            name?: string | null;
            email?: string | null;
            status?: string | null;
            /** Format: date-time */
            contactedAt?: string | null;
            /** Format: date-time */
            respondedAt?: string | null;
        };
        RefundInfoResponse: {
            /** Format: double */
            refundedAmount?: number;
            currency?: string | null;
            displayAmount?: string | null;
            /** Format: date-time */
            refundedAt?: string | null;
            refundReason?: string | null;
            /** Format: int32 */
            refundCount?: number;
            isPartialRefund?: boolean;
        };
        RefundResponse: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            originalPaymentId?: string;
            /** Format: double */
            refundAmount?: number;
            currency?: string | null;
            displayAmount?: string | null;
            refundReason?: string | null;
            refundStatus?: components["schemas"]["RefundStatus"];
            statusDescription?: string | null;
            /** Format: uuid */
            processedByUserId?: string;
            processedByUserName?: string | null;
            /** Format: date-time */
            processedAt?: string;
            /** Format: date-time */
            createdAt?: string;
        };
        /** @enum {string} */
        RefundStatus: "Processing" | "Completed" | "Failed" | "Cancelled";
        RegisterRequest: {
            /** Format: email */
            email: string;
            password: string;
            sceneName: string;
        };
        ReviewDecisionDto: {
            /** Format: uuid */
            id?: string;
            decisionType?: string | null;
            reasoning?: string | null;
            /** Format: int32 */
            score?: number | null;
            isFinalDecision?: boolean;
            additionalInfoRequested?: string | null;
            /** Format: date-time */
            additionalInfoDeadline?: string | null;
            /** Format: date-time */
            proposedInterviewTime?: string | null;
            interviewNotes?: string | null;
            reviewerName?: string | null;
            /** Format: date-time */
            createdAt?: string;
        };
        ReviewDecisionRequest: {
            decisionType: unknown;
            reasoning: string;
            /** Format: int32 */
            score?: number | null;
            isFinalDecision?: boolean;
            additionalInfoRequested?: string | null;
            /** Format: date-time */
            additionalInfoDeadline?: string | null;
            /** Format: date-time */
            proposedInterviewTime?: string | null;
            interviewNotes?: string | null;
        };
        ReviewDecisionResponse: {
            /** Format: uuid */
            decisionId?: string;
            decisionType?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            newApplicationStatus?: string | null;
            confirmationMessage?: string | null;
            actionsTriggered?: string[] | null;
        };
        ReviewDecisionResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["ReviewDecisionResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        SafetyStatistics: {
            /** Format: int32 */
            criticalCount?: number;
            /** Format: int32 */
            highCount?: number;
            /** Format: int32 */
            mediumCount?: number;
            /** Format: int32 */
            lowCount?: number;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            newCount?: number;
            /** Format: int32 */
            inProgressCount?: number;
            /** Format: int32 */
            resolvedCount?: number;
            /** Format: int32 */
            thisMonth?: number;
        };
        ServiceTokenRequest: {
            userId?: string | null;
            email?: string | null;
        };
        SessionDto: {
            id?: string | null;
            sessionIdentifier?: string | null;
            name?: string | null;
            /** Format: date-time */
            date?: string;
            /** Format: date-time */
            startTime?: string;
            /** Format: date-time */
            endTime?: string;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            registeredCount?: number;
        };
        SimpleNoteRequest: {
            note: string;
            isPrivate?: boolean | null;
            tags?: string[] | null;
        };
        SimpleReasoningRequest: {
            reasoning: string;
        };
        SimplifiedApplicationRequest: {
            realName: string;
            preferredSceneName: string;
            fetLifeHandle?: string | null;
            /** Format: email */
            email: string;
            whyJoin: string;
            experienceWithRope: string;
            agreeToCommunityStandards: boolean;
            pronouns?: string | null;
            otherNames?: string | null;
        };
        SimplifiedApplicationResponse: {
            /** Format: uuid */
            applicationId?: string;
            applicationNumber?: string | null;
            /** Format: date-time */
            submittedAt?: string;
            confirmationMessage?: string | null;
            emailSent?: boolean;
            nextSteps?: string | null;
            pronouns?: string | null;
            otherNames?: string | null;
        };
        SimplifiedApplicationResponseApiResponse: {
            success?: boolean;
            data?: components["schemas"]["SimplifiedApplicationResponse"];
            error?: string | null;
            details?: string | null;
            message?: string | null;
            /** Format: date-time */
            timestamp?: string;
        };
        StatusChangeRequest: {
            status: string;
            reasoning: string;
        };
        StatusUpdateSummary: {
            /** Format: date-time */
            updatedAt?: string;
            message?: string | null;
            type?: string | null;
        };
        SubmissionResponse: {
            referenceNumber?: string | null;
            trackingUrl?: string | null;
            /** Format: date-time */
            submittedAt?: string;
        };
        SyncRequest: {
            deviceId: string;
            pendingCheckIns: components["schemas"]["PendingCheckIn"][];
            lastSyncTimestamp: string;
        };
        TicketTypeDto: {
            id?: string | null;
            name?: string | null;
            type?: string | null;
            sessionIdentifiers?: string[] | null;
            /** Format: double */
            minPrice?: number;
            /** Format: double */
            maxPrice?: number;
            /** Format: int32 */
            quantityAvailable?: number;
            /** Format: date-time */
            salesEndDate?: string | null;
        };
        TokenClaims: {
            userId?: string | null;
            email?: string | null;
            sceneName?: string | null;
        };
        UpdateEventRequest: {
            title?: string | null;
            shortDescription?: string | null;
            description?: string | null;
            /** Format: date-time */
            startDate?: string | null;
            /** Format: date-time */
            endDate?: string | null;
            location?: string | null;
            /** Format: int32 */
            capacity?: number | null;
            pricingTiers?: string | null;
            isPublished?: boolean | null;
            sessions?: components["schemas"]["SessionDto"][] | null;
            ticketTypes?: components["schemas"]["TicketTypeDto"][] | null;
            teacherIds?: string[] | null;
            volunteerPositions?: components["schemas"]["VolunteerPositionDto"][] | null;
        };
        UpdateProfileRequest: {
            sceneName?: string | null;
            pronouns?: string | null;
        };
        UpdateUserRequest: {
            sceneName?: string | null;
            role?: string | null;
            pronouns?: string | null;
            isActive?: boolean | null;
            isVetted?: boolean | null;
            emailConfirmed?: boolean | null;
            /** Format: int32 */
            vettingStatus?: number | null;
        };
        UserDashboardResponse: {
            sceneName?: string | null;
            role?: string | null;
            vettingStatus?: components["schemas"]["VettingStatus"];
            hasVettingApplication?: boolean;
            isVetted?: boolean;
            email?: string | null;
            /** Format: date-time */
            joinDate?: string;
            pronouns?: string | null;
        };
        UserDto: {
            /** Format: uuid */
            id?: string;
            email?: string | null;
            sceneName?: string | null;
            role?: string | null;
            pronouns?: string | null;
            isActive?: boolean;
            isVetted?: boolean;
            emailConfirmed?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            lastLoginAt?: string | null;
            /** Format: int32 */
            vettingStatus?: number;
        };
        UserEventsResponse: {
            upcomingEvents?: components["schemas"]["DashboardEventDto"][] | null;
        };
        UserListResponse: {
            users?: components["schemas"]["UserDto"][] | null;
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            readonly totalPages?: number;
            readonly hasPreviousPage?: boolean;
            readonly hasNextPage?: boolean;
        };
        UserOptionDto: {
            id?: string | null;
            name?: string | null;
            email?: string | null;
        };
        UserParticipationDto: {
            /** Format: uuid */
            id?: string;
            /** Format: uuid */
            eventId?: string;
            eventTitle?: string | null;
            /** Format: date-time */
            eventStartDate?: string;
            /** Format: date-time */
            eventEndDate?: string;
            eventLocation?: string | null;
            participationType?: components["schemas"]["ParticipationType"];
            status?: components["schemas"]["ParticipationStatus"];
            /** Format: date-time */
            participationDate?: string;
            notes?: string | null;
            canCancel?: boolean;
        };
        UserStatisticsResponse: {
            isVerified?: boolean;
            /** Format: int32 */
            eventsAttended?: number;
            /** Format: int32 */
            monthsAsMember?: number;
            /** Format: int32 */
            recentEvents?: number;
            /** Format: date-time */
            joinDate?: string;
            vettingStatus?: components["schemas"]["VettingStatus"];
            /** Format: date-time */
            nextInterviewDate?: string | null;
            /** Format: int32 */
            upcomingRegistrations?: number;
            /** Format: int32 */
            cancelledRegistrations?: number;
        };
        ValidationProblemDetails: {
            type?: string | null;
            title?: string | null;
            /** Format: int32 */
            status?: number | null;
            detail?: string | null;
            instance?: string | null;
            errors?: {
                [key: string]: string[];
            } | null;
        } & {
            [key: string]: unknown;
        };
        /** @enum {string} */
        VettingStatus: "UnderReview" | "InterviewApproved" | "InterviewScheduled" | "FinalReview" | "Approved" | "Denied" | "OnHold" | "Withdrawn";
        VolunteerPositionDto: {
            id?: string | null;
            title?: string | null;
            description?: string | null;
            /** Format: int32 */
            slotsNeeded?: number;
            /** Format: int32 */
            slotsFilled?: number;
            requiresExperience?: boolean;
            requirements?: string | null;
            sessionId?: string | null;
            /** Format: int32 */
            readonly slotsRemaining?: number;
            readonly isFullyStaffed?: boolean;
        };
        WorkflowHistoryDto: {
            action?: string | null;
            /** Format: date-time */
            performedAt?: string;
            performedBy?: string | null;
            notes?: string | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetUsers: {
        parameters: {
            query: {
                SearchTerm?: string;
                Role?: string;
                IsActive?: boolean;
                IsVetted?: boolean;
                Page: number;
                PageSize: number;
                SortBy: string;
                SortDescending: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserListResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetEventParticipations: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventParticipationDtoListApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthUserResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetServiceToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ServiceTokenRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Logout: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    GetUserFromCookie: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthUserResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    RefreshToken: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    DebugAuthStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetEventAttendees: {
        parameters: {
            query?: {
                search?: string;
                status?: string;
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProcessCheckIn: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CheckInRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetEventDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SyncOfflineCheckIns: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SyncRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CreateManualEntry: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ManualEntryData"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetPendingSyncCount: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUserDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDashboardResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    GetUserEvents: {
        parameters: {
            query: {
                count: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserEventsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    GetUserStatistics: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserStatisticsResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ProblemDetails"];
                };
            };
        };
    };
    GetEvents: {
        parameters: {
            query?: {
                includeUnpublished?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDtoListApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDtoApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateEventRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDtoApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetDetailedHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DetailedHealthResponse"];
                };
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetLegacyHealth: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Service Unavailable */
            503: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetParticipationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipationStatusDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CancelParticipation: {
        parameters: {
            query?: {
                reason?: string;
            };
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CreateRSVP: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateRSVPRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipationStatusDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CancelRSVP: {
        parameters: {
            query?: {
                reason?: string;
            };
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description No Content */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    PurchaseTicket: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                eventId: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateTicketPurchaseRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ParticipationStatusDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUserParticipations: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserParticipationDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    SubmitIncident: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateIncidentRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SubmissionResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unprocessable Content */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetIncidentStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                referenceNumber: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncidentStatusResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetSafetyDashboard: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AdminDashboardResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetIncidentDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                incidentId: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncidentResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUserReports: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["IncidentSummaryResponse"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UpdateUserProfile: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProfileRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUserProfileSingular: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetUsersByRole: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                role: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserOptionDto"][];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetApplicationsForReview: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ApplicationFilterRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationSummaryDtoPagedResultApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    GetApplicationDetail: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationDetailResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    SubmitReviewDecision: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ReviewDecisionRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewDecisionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    AddApplicationNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateNoteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    ApproveApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleReasoningRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewDecisionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    ChangeApplicationStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["StatusChangeRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewDecisionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    AddSimpleApplicationNote: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleNoteRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["NoteResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    DenyApplication: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimpleReasoningRequest"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ReviewDecisionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    GetVettingStatus: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MyApplicationStatusResponseApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    GetMyVettingApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationDetailResponseApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    SubmitSimplifiedApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SimplifiedApplicationRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationSubmissionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    GetMyApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SimplifiedApplicationResponseApiResponse"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    SubmitPublicVettingApplication: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["PublicApplicationSubmissionRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationSubmissionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Conflict */
            409: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    SubmitVettingApplicationFull: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateApplicationRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationSubmissionResponseApiResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
    GetApplicationStatusByToken: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                token: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ApplicationStatusResponseApiResponse"];
                };
            };
            /** @description Not Found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
            /** @description Internal Server Error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ObjectApiResponse"];
                };
            };
        };
    };
}
