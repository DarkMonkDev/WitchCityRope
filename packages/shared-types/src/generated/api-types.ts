/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["Login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/events": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["GetEvents"];
        put?: never;
        post: operations["CreateEvent"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserDto: {
            /** Format: uuid */
            id?: string;
            /** Format: email */
            email?: string;
            sceneName?: string | null;
            firstName?: string | null;
            lastName?: string | null;
            roles?: components["schemas"]["UserRole"][];
            isActive?: boolean;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
            /** Format: date-time */
            lastLoginAt?: string | null;
        };
        /** @enum {string} */
        UserRole: "Admin" | "Teacher" | "VettedMember" | "GeneralMember" | "Guest";
        LoginRequest: {
            /** Format: email */
            email: string;
            password: string;
            /** @default false */
            rememberMe?: boolean;
        };
        LoginResponse: {
            success?: boolean;
            user?: components["schemas"]["UserDto"];
            message?: string | null;
        };
        EventDto: {
            /** Format: uuid */
            id?: string;
            title?: string;
            description?: string | null;
            /** Format: date-time */
            startDateTime?: string;
            /** Format: date-time */
            endDateTime?: string;
            /** Format: int32 */
            capacity?: number;
            /** Format: int32 */
            currentAttendees?: number;
            eventType?: components["schemas"]["EventType"];
            status?: components["schemas"]["EventStatus"];
            /** Format: uuid */
            createdBy?: string;
            /** Format: date-time */
            createdAt?: string;
            /** Format: date-time */
            updatedAt?: string;
        };
        /** @enum {string} */
        EventType: "Workshop" | "Performance" | "Social" | "Private";
        /** @enum {string} */
        EventStatus: "Draft" | "Published" | "Cancelled" | "Completed";
        CreateEventRequest: {
            title: string;
            description?: string | null;
            /** Format: date-time */
            startDateTime: string;
            /** Format: date-time */
            endDateTime: string;
            /** Format: int32 */
            capacity: number;
            eventType: components["schemas"]["EventType"];
        };
        EventListResponse: {
            events?: components["schemas"]["EventDto"][];
            /** Format: int32 */
            totalCount?: number;
            /** Format: int32 */
            page?: number;
            /** Format: int32 */
            pageSize?: number;
            /** Format: int32 */
            totalPages?: number;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    GetCurrentUser: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["UserDto"];
                };
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    Login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    GetEvents: {
        parameters: {
            query?: {
                page?: number;
                pageSize?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Success */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventListResponse"];
                };
            };
        };
    };
    CreateEvent: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "application/json": components["schemas"]["CreateEventRequest"];
            };
        };
        responses: {
            /** @description Created */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["EventDto"];
                };
            };
            /** @description Bad Request */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Unauthorized */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Forbidden */
            403: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
