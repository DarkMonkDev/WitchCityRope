#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

function postProcessGeneratedTypes() {
    const generatedFile = path.join(__dirname, '../src/generated/api-client.ts');
    
    if (!fs.existsSync(generatedFile)) {
        console.error('‚ùå Generated file not found:', generatedFile);
        return false;
    }

    console.log('üîß Post-processing generated types...');
    
    let content = fs.readFileSync(generatedFile, 'utf8');
    
    // Add custom headers with generation timestamp
    const header = `/* eslint-disable */
/* tslint:disable */
/*
 * Auto-generated by NSwag TypeScript Client Generator
 * Do not modify this file manually
 * Generated on: ${new Date().toISOString()}
 * API Version: v1
 */

`;
    
    // Fix common issues with generated code
    
    // 1. Fix date handling - keep as string for consistency
    content = content.replace(
        /: Date(\s*[;,\]\}])/g, 
        ': string$1'
    );
    
    // 2. Add JSDoc comments for better IDE support
    content = content.replace(
        /export interface (\w+) \{/g,
        '/**\n * Auto-generated interface from C# DTO\n */\nexport interface $1 {'
    );
    
    // 3. Add JSDoc for enums
    content = content.replace(
        /export enum (\w+) \{/g,
        '/**\n * Auto-generated enum from C# enum\n */\nexport enum $1 {'
    );
    
    // 4. Fix any potential issues with null/undefined handling
    content = content.replace(
        /\| undefined \| null/g,
        '| null | undefined'
    );
    
    // 5. Add exports at the end for convenience
    const exportSection = `

// Convenience re-exports of commonly used types
export type { 
    // Add commonly used types here as they're identified
} from './api-client';

// Type guards and utilities
export const isApiError = (error: any): error is ApiException => {
    return error instanceof ApiException;
};

export const getErrorMessage = (error: any): string => {
    if (isApiError(error)) {
        return error.message || 'An API error occurred';
    }
    if (error instanceof Error) {
        return error.message;
    }
    return 'An unknown error occurred';
};
`;
    
    // Write the processed content
    fs.writeFileSync(generatedFile, header + content);
    
    console.log('‚úÖ Post-processing completed successfully');
    return true;
}

function createVersionFile() {
    const versionFile = path.join(__dirname, '../src/generated/version.ts');
    const packageJson = JSON.parse(fs.readFileSync(path.join(__dirname, '../package.json'), 'utf8'));
    
    const versionContent = `// Auto-generated version information
export const SHARED_TYPES_VERSION = '${packageJson.version}';
export const GENERATED_AT = '${new Date().toISOString()}';
export const API_VERSION = 'v1';

// Runtime version checking utility
export function checkApiCompatibility(serverVersion: string): boolean {
    // For now, just check if major version matches
    const [major] = API_VERSION.substring(1).split('.');
    const [serverMajor] = serverVersion.substring(1).split('.');
    return major === serverMajor;
}
`;
    
    fs.writeFileSync(versionFile, versionContent);
    console.log('‚úÖ Version file created');
}

function splitIntoModules() {
    // For future enhancement: split large generated file into smaller modules
    // organized by feature (users, events, payments, etc.)
    
    console.log('üì¶ Module splitting not implemented yet - keeping single file');
    
    // TODO: Implement logic to:
    // 1. Parse generated interfaces and group by prefix/namespace
    // 2. Create separate files for each domain (auth, events, members, etc.)
    // 3. Update main index to re-export from modules
}

function main() {
    try {
        const success = postProcessGeneratedTypes();
        if (!success) {
            process.exit(1);
        }
        
        createVersionFile();
        splitIntoModules();
        
        console.log('üéâ Post-processing pipeline completed');
    } catch (error) {
        console.error('‚ùå Post-processing failed:', error.message);
        process.exit(1);
    }
}

// Allow running directly
if (require.main === module) {
    main();
}

module.exports = { postProcessGeneratedTypes, createVersionFile };