name: Test Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:
  test:
    name: Test and Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0 # Full history for better analysis

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run tests with coverage
      run: |
        dotnet test --no-build --configuration Release \
          --logger "trx;LogFileName=test-results.trx" \
          --logger "console;verbosity=detailed" \
          --collect:"XPlat Code Coverage" \
          --results-directory ./TestResults \
          -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.2.0
      with:
        reports: 'TestResults/**/coverage.opencover.xml'
        targetdir: 'CoverageReport'
        reporttypes: 'Html;Cobertura;MarkdownSummaryGithub;Badges'
        verbosity: 'Info'
        title: 'WitchCityRope Coverage Report'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        customSettings: 'minimumCoverageThresholds:lineCoverage=60;branchCoverage=60;methodCoverage=60'

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./CoverageReport/Cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results
        path: |
          TestResults/**/*.trx
          TestResults/**/*.xml

    - name: Upload coverage report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: CoverageReport/

    - name: Add coverage PR comment
      uses: 5monkeys/cobertura-action@v14
      if: github.event_name == 'pull_request'
      with:
        path: CoverageReport/Cobertura.xml
        minimum_coverage: 60
        show_missing: true
        show_line: true
        show_branch: true
        fail_below_threshold: false

    - name: Test Report
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: .NET Tests
        path: 'TestResults/**/*.trx'
        reporter: dotnet-trx
        fail-on-error: false

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          ACCEPT_EULA: Y
          SA_PASSWORD: YourStrong@Passw0rd
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P YourStrong@Passw0rd -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 1433:1433

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore

    - name: Build solution
      run: dotnet build --no-restore --configuration Release

    - name: Run integration tests
      env:
        ConnectionStrings__DefaultConnection: "Server=localhost,1433;Database=WitchCityRopeTest;User Id=sa;Password=YourStrong@Passw0rd;TrustServerCertificate=true"
      run: |
        dotnet test tests/WitchCityRope.IntegrationTests/WitchCityRope.IntegrationTests.csproj \
          --no-build --configuration Release \
          --logger "trx;LogFileName=integration-test-results.trx" \
          --logger "console;verbosity=detailed"

    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: integration-test-results
        path: |
          **/*integration-test-results.trx

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ${{ env.NUGET_PACKAGES }}
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install dotnet tools
      run: |
        dotnet tool install --global dotnet-format
        dotnet tool install --global dotnet-reportgenerator-globaltool
        dotnet tool install --global dotnet-sonarscanner

    - name: Restore dependencies
      run: dotnet restore

    - name: Check code format
      run: dotnet format --verify-no-changes --verbosity diagnostic

    - name: Run code analysis
      run: |
        dotnet build --no-restore --configuration Release \
          /p:AnalysisMode=AllEnabledByDefault \
          /p:TreatWarningsAsErrors=true

  build-status:
    name: Build Status
    runs-on: ubuntu-latest
    needs: [test, integration-test, code-quality]
    if: always()
    
    steps:
    - name: Check build status
      run: |
        if [[ "${{ needs.test.result }}" == "failure" || "${{ needs.integration-test.result }}" == "failure" || "${{ needs.code-quality.result }}" == "failure" ]]; then
          echo "Build failed"
          exit 1
        else
          echo "Build succeeded"
        fi