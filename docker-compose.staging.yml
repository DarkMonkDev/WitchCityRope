version: '3.8'

services:
  # API Service
  api:
    build:
      context: .
      dockerfile: src/WitchCityRope.Api/Dockerfile
      target: final
      args:
        - BUILD_CONFIGURATION=Release
    image: witchcityrope/api:staging
    container_name: wcr-staging-api
    restart: unless-stopped
    ports:
      - "5653:8080"
      - "5654:8081"  # HTTPS internal port
    environment:
      # ASP.NET Core Configuration
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - ASPNETCORE_HTTPS_PORT=443
      
      # Use environment file for secrets
      - ConnectionStrings__DefaultConnection=${CONNECTION_STRING:-Data Source=/app/data/witchcityrope_staging.db}
      - ConnectionStrings__Redis=${REDIS_CONNECTION_STRING:-redis:6379,abortConnect=false}
      
      # Feature flags
      - Features__EnableDebugEndpoints=true
      - Features__EnableSwagger=true
      
      # Logging
      - Serilog__WriteTo__2__Name=Seq
      - Serilog__WriteTo__2__Args__serverUrl=http://seq:5341
      - Serilog__WriteTo__2__Args__apiKey=${SEQ_API_KEY}
      
    env_file:
      - .env.staging
    volumes:
      - ./data/staging:/app/data
      - ./logs/api:/app/logs
      - ./uploads:/app/uploads
      - ./certs/staging:/app/certs:ro
      - ./scripts:/app/scripts:ro
    depends_on:
      - redis
      - seq
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Service (Blazor Server)
  web:
    build:
      context: .
      dockerfile: src/WitchCityRope.Web/Dockerfile
      target: final
      args:
        - BUILD_CONFIGURATION=Release
    image: witchcityrope/web:staging
    container_name: wcr-staging-web
    restart: unless-stopped
    ports:
      - "5651:8080"
      - "5652:8081"  # HTTPS internal port
    environment:
      # ASP.NET Core Configuration
      - ASPNETCORE_ENVIRONMENT=Staging
      - ASPNETCORE_URLS=http://+:8080;https://+:8081
      - ASPNETCORE_HTTPS_PORT=443
      
      # API Configuration
      - ApiBaseUrl=http://api:8080/
      - ApiBaseUrlExternal=https://api.staging.witchcityrope.com/
      
      # Session Configuration
      - Session__Cookie__Name=.WitchCityRope.Staging.Session
      
      # Feature flags
      - Features__EnableDebugInfo=true
      - Features__ShowEnvironmentBanner=true
      
      # Logging
      - Serilog__WriteTo__2__Name=Seq
      - Serilog__WriteTo__2__Args__serverUrl=http://seq:5341
      - Serilog__WriteTo__2__Args__apiKey=${SEQ_API_KEY}
      
    env_file:
      - .env.staging
    volumes:
      - ./data/staging:/app/data:ro
      - ./logs/web:/app/logs
      - ./uploads:/app/wwwroot/uploads:ro
      - ./certs/staging:/app/certs:ro
    depends_on:
      - api
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: wcr-staging-redis
    restart: unless-stopped
    command: >
      redis-server
      --appendonly yes
      --maxmemory 256mb
      --maxmemory-policy allkeys-lru
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Seq Logging
  seq:
    image: datalust/seq:latest
    container_name: wcr-staging-seq
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SEQ_API_KEY=${SEQ_API_KEY}
      - SEQ_FIRSTRUN_ADMINPASSWORD=${SEQ_ADMIN_PASSWORD:-StagingSeq123!}
    ports:
      - "5341:80"
      - "45341:45341"
    volumes:
      - seq-data:/data
    networks:
      - staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (optional - for local SSL testing)
  nginx:
    image: nginx:alpine
    container_name: wcr-staging-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/staging.conf:/etc/nginx/conf.d/default.conf:ro
      - ./certs/staging:/etc/nginx/certs:ro
      - ./nginx/snippets:/etc/nginx/snippets:ro
    depends_on:
      - web
      - api
    networks:
      - staging-network
    profiles:
      - with-nginx

  # Database management tool (optional)
  adminer:
    image: adminer:latest
    container_name: wcr-staging-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=sqlite
      - ADMINER_DESIGN=pepa-linha
    volumes:
      - ./data/staging:/data
    networks:
      - staging-network
    profiles:
      - debug

  # Monitoring with Prometheus (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: wcr-staging-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus-staging.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - staging-network
    profiles:
      - monitoring

  # Grafana for visualization (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: wcr-staging-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-StagingGrafana123!}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_ROOT_URL=http://localhost:3000
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - staging-network
    profiles:
      - monitoring

networks:
  staging-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis-data:
    driver: local
  seq-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local