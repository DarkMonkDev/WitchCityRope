@inject IToastService ToastService
@implements IDisposable

<div class="toast-container">
    @foreach (var toast in ToastService.Messages)
    {
        <div class="toast toast-@toast.Level.ToString().ToLower() fade-in" @key="toast.Id">
            <div class="toast-content">
                <span class="toast-icon">
                    @switch (toast.Level)
                    {
                        case ToastLevel.Success:
                            <i class="fas fa-check-circle"></i>
                            break;
                        case ToastLevel.Error:
                            <i class="fas fa-exclamation-circle"></i>
                            break;
                        case ToastLevel.Warning:
                            <i class="fas fa-exclamation-triangle"></i>
                            break;
                        case ToastLevel.Info:
                            <i class="fas fa-info-circle"></i>
                            break;
                    }
                </span>
                <span class="toast-message">@toast.Message</span>
                <button type="button" class="toast-close" @onclick="() => ToastService.Remove(toast.Id)">
                    <i class="fas fa-times"></i>
                </button>
            </div>
        </div>
    }
</div>

<style>
    .toast-container {
        position: fixed;
        top: 20px;
        right: 20px;
        z-index: 9999;
        max-width: 400px;
    }
    
    .toast {
        background: white;
        border-radius: 8px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
        margin-bottom: 10px;
        padding: 16px;
        display: flex;
        align-items: center;
        animation: slideIn 0.3s ease-out;
        border-left: 4px solid;
    }
    
    .toast-content {
        display: flex;
        align-items: center;
        width: 100%;
    }
    
    .toast-icon {
        font-size: 1.2rem;
        margin-right: 12px;
        flex-shrink: 0;
    }
    
    .toast-message {
        flex: 1;
        color: #333;
    }
    
    .toast-close {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 1rem;
        margin-left: 12px;
        padding: 4px;
    }
    
    .toast-close:hover {
        color: #333;
    }
    
    .toast-success {
        border-left-color: #28a745;
    }
    
    .toast-success .toast-icon {
        color: #28a745;
    }
    
    .toast-error {
        border-left-color: #dc3545;
    }
    
    .toast-error .toast-icon {
        color: #dc3545;
    }
    
    .toast-warning {
        border-left-color: #ffc107;
    }
    
    .toast-warning .toast-icon {
        color: #ffc107;
    }
    
    .toast-info {
        border-left-color: #17a2b8;
    }
    
    .toast-info .toast-icon {
        color: #17a2b8;
    }
    
    @@keyframes slideIn {
        from {
            transform: translateX(100%);
            opacity: 0;
        }
        to {
            transform: translateX(0);
            opacity: 1;
        }
    }
    
    .fade-in {
        animation: fadeIn 0.3s ease-out;
    }
    
    @@keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }
</style>

@code {
    protected override void OnInitialized()
    {
        ToastService.OnChange += StateHasChanged;
    }
    
    public void Dispose()
    {
        ToastService.OnChange -= StateHasChanged;
    }
}