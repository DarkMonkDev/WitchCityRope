@* Event card component for displaying event summary information *@

<div class="event-card @(IsClickable ? "event-card-clickable" : "")" @onclick="HandleClick">
    @if (!string.IsNullOrEmpty(Event.ImageUrl))
    {
        <div class="event-card-image">
            <img src="@Event.ImageUrl" alt="@Event.Title" />
            <span class="event-type-badge badge-@Event.Type">@Event.Type</span>
        </div>
    }
    else
    {
        <div class="event-card-image event-card-image-placeholder">
            <span class="event-type-badge badge-@Event.Type">@Event.Type</span>
        </div>
    }

    <div class="event-card-content">
        <h3 class="event-card-title">@Event.Title</h3>
        
        <div class="event-card-meta">
            <div class="meta-item">
                <span class="meta-icon">üìÖ</span>
                <span>@Event.StartDate.ToString("MMM d, yyyy")</span>
            </div>
            <div class="meta-item">
                <span class="meta-icon">üïê</span>
                <span>@Event.StartDate.ToString("h:mm tt")</span>
            </div>
            <div class="meta-item">
                <span class="meta-icon">üìç</span>
                <span>@GetLocationShort()</span>
            </div>
        </div>

        <p class="event-card-description">
            @GetTruncatedDescription()
        </p>

        <div class="event-card-footer">
            <div class="event-price">
                @if (Event.Price > 0)
                {
                    <span class="price-amount">$@Event.Price</span>
                }
                else
                {
                    <span class="price-free">Free</span>
                }
            </div>

            <div class="event-availability">
                @if (Event.AvailableSpots > 0)
                {
                    @if (Event.AvailableSpots <= 5)
                    {
                        <span class="availability-low">@Event.AvailableSpots spots left</span>
                    }
                    else
                    {
                        <span class="availability-good">Available</span>
                    }
                }
                else
                {
                    <span class="availability-none">Sold Out</span>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter, EditorRequired] public EventCardViewModel Event { get; set; } = null!;
    [Parameter] public EventCallback OnClick { get; set; }
    [Parameter] public bool IsClickable { get; set; } = true;

    private async Task HandleClick()
    {
        if (IsClickable && OnClick.HasDelegate)
        {
            await OnClick.InvokeAsync();
        }
    }

    private string GetTruncatedDescription()
    {
        if (string.IsNullOrEmpty(Event.Description))
            return "";

        const int maxLength = 120;
        if (Event.Description.Length <= maxLength)
            return Event.Description;

        return Event.Description.Substring(0, maxLength).TrimEnd() + "...";
    }

    private string GetLocationShort()
    {
        if (string.IsNullOrEmpty(Event.Location))
            return "TBA";

        // If it's a long location, just show the first part
        var parts = Event.Location.Split(',');
        return parts[0].Trim();
    }

    // View model for the event card
    public class EventCardViewModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime StartDate { get; set; }
        public string Type { get; set; } = string.Empty;
        public string Location { get; set; } = string.Empty;
        public decimal Price { get; set; }
        public int AvailableSpots { get; set; }
        public string? ImageUrl { get; set; }
    }
}