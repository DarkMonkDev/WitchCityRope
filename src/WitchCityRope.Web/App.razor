<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)">
                <NotAuthorized>
                    @if (context.User.Identity?.IsAuthenticated != true)
                    {
                        <RedirectToLogin />
                    }
                    else
                    {
                        <p role="alert">You are not authorized to access this resource.</p>
                    }
                </NotAuthorized>
                <Authorizing>
                    <div class="loading-container">
                        <LoadingSpinner Message="Checking authorization..." />
                    </div>
                </Authorizing>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <PageTitle>Not found</PageTitle>
            <LayoutView Layout="@typeof(MainLayout)">
                <div class="page-container">
                    <div class="empty-state">
                        <h1>404 - Page Not Found</h1>
                        <p>Sorry, the page you're looking for doesn't exist.</p>
                        <a href="/" class="btn btn-primary">Go to Home</a>
                    </div>
                </div>
            </LayoutView>
        </NotFound>
    </Router>
</CascadingAuthenticationState>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
}

@* Redirect to login component *@
@code {
    public sealed class RedirectToLogin : ComponentBase
    {
        [Inject] NavigationManager Navigation { get; set; } = null!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }
}