<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Witch City Rope - Salem's Rope Bondage Community</title>
    <base href="/" />
    
    @* Favicon *@
    <link rel="icon" type="image/svg+xml" href="/favicon.svg">
    <link rel="icon" type="image/x-icon" href="/favicon.ico">
    
    @* Optimized Font Loading *@
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Bodoni+Moda:opsz,wght@6..96,400;6..96,700;6..96,900&family=Montserrat:wght@400;500;600;700;800&family=Source+Sans+3:wght@300;400;600&family=Satisfy&family=Inter:wght@400;500;600&display=swap" rel="stylesheet">
    
    @* Stylesheets with cache busting *@
    <link rel="stylesheet" href="css/app.min.css?v=@DateTime.UtcNow.ToString("yyyyMMdd")" />
    
    @* Syncfusion theme - using bootstrap5 for consistency *@
    <link href="_content/Syncfusion.Blazor.Themes/bootstrap5.css" rel="stylesheet" />
    
    @* WCR Custom Theme - Overrides Syncfusion defaults *@
    <link rel="stylesheet" href="css/wcr-theme.min.css?v=@DateTime.UtcNow.ToString("yyyyMMdd")" />
    
    @* Validation Styles *@
    <link rel="stylesheet" href="css/validation.css?v=@DateTime.UtcNow.ToString("yyyyMMdd")" />
    
    @* CMS Content Styles *@
    <link rel="stylesheet" href="css/cms-content.css?v=@DateTime.UtcNow.ToString("yyyyMMdd")" />
    
    @* Font Awesome Icons *@
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />
    
    <HeadOutlet />
</head>
<body>
    <CascadingAuthenticationState>
        <Router AppAssembly="@typeof(App).Assembly">
            <Found Context="routeData">
                <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
                <FocusOnNavigate RouteData="@routeData" Selector="h1" />
            </Found>
            <NotFound>
                <PageTitle>Not found</PageTitle>
                <LayoutView Layout="@typeof(MainLayout)">
                    <div class="page-container">
                        <div class="empty-state">
                            <h1>404 - Page Not Found</h1>
                            <p>Sorry, the page you're looking for doesn't exist.</p>
                            <a href="/" class="btn btn-primary">Go to Home</a>
                        </div>
                    </div>
                </LayoutView>
            </NotFound>
        </Router>
    </CascadingAuthenticationState>

    <div id="blazor-error-ui">
        <environment include="Staging,Production">
            An error has occurred. This application may no longer respond until reloaded.
        </environment>
        <environment include="Development">
            An unhandled exception has occurred. See browser dev tools for details.
        </environment>
        <a href="" class="reload">Reload</a>
        <a class="dismiss">ðŸ—™</a>
    </div>

    @* CRITICAL: Load blazor-fix.js BEFORE blazor.server.js to intercept deprecated events *@
    <script src="js/blazor-fix.js?v=@DateTime.UtcNow.ToString("yyyyMMdd")"></script>
    
    @* E2E Test Helper - Load before blazor.server.js *@
    <script src="js/blazor-e2e-helper.js?v=@DateTime.UtcNow.ToString("yyyyMMdd")"></script>
    
    <script src="_framework/blazor.server.js"></script>
    
    @* Syncfusion scripts *@
    <script src="_content/Syncfusion.Blazor.Core/scripts/syncfusion-blazor.min.js" type="text/javascript"></script>
    
    @* Initialize Syncfusion properly for community license *@
    <script>
        // Initialize Syncfusion after scripts are loaded
        window.addEventListener('load', function() {
            if (window.sfBlazor) {
                // Enable ripple effect
                window.sfBlazor.enableRipple = true;
                
                // Force license validation for community version
                if (window.Syncfusion && window.Syncfusion.licensing) {
                    // console.log('Syncfusion licensing module loaded');
                }
            }
        });
    </script>
    
    @* Custom scripts with cache busting *@
    <script src="js/app.min.js?v=@DateTime.UtcNow.ToString("yyyyMMdd")"></script>
    
    <script>
        // Configure Blazor reconnection after it's ready
        document.addEventListener('DOMContentLoaded', function () {
            // Monitor Blazor initialization for E2E tests
            let blazorCheckInterval;
            let blazorCheckAttempts = 0;
            const maxBlazorChecks = 20; // 10 seconds max
            
            blazorCheckInterval = setInterval(function() {
                blazorCheckAttempts++;
                
                if (window.Blazor && window.Blazor._internal) {
                    // console.log('Blazor initialized successfully');
                    clearInterval(blazorCheckInterval);
                    
                    // Setup reconnection handler
                    if (window.setupBlazorReconnection) {
                        window.setupBlazorReconnection();
                    }
                    
                    // Dispatch custom event for E2E tests
                    window.dispatchEvent(new CustomEvent('blazor:initialized', { 
                        detail: { 
                            hasInternal: true,
                            hasNavigationManager: !!window.Blazor._internal.navigationManager 
                        } 
                    }));
                } else if (blazorCheckAttempts >= maxBlazorChecks) {
                    console.error('Blazor initialization timeout');
                    clearInterval(blazorCheckInterval);
                    
                    // Dispatch failure event for E2E tests
                    window.dispatchEvent(new CustomEvent('blazor:initialization-failed'));
                }
            }, 500);
        });
        
        // Ensure Blazor starts properly
        if (window.Blazor) {
            window.Blazor.start = window.Blazor.start || function() {
                // console.log('Blazor.start() called');
                return Promise.resolve();
            };
        }
    </script>
</body>
</html>

@code {
    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public sealed class RedirectToLogin : ComponentBase
    {
        [Inject] NavigationManager Navigation { get; set; } = null!;

        protected override void OnInitialized()
        {
            Navigation.NavigateTo($"/login?returnUrl={Uri.EscapeDataString(Navigation.Uri)}");
        }
    }
}