@using System.Linq.Expressions
@using Microsoft.AspNetCore.Components.Forms
@using WitchCityRope.Web.Shared.Validation.Services
@inject IValidationService ValidationService

<div class="wcr-form-group">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="wcr-label">
            @Label
            @if (IsRequired)
            {
                <span class="wcr-required">*</span>
            }
        </label>
    }
    
    <div class="wcr-input-wrapper" style="position: relative;">
        <input @attributes="AdditionalAttributes"
               type="@(_showPassword ? "text" : "password")"
               class="@GetCssClass()"
               value="@CurrentValue"
               @oninput="HandlePasswordChanged"
               id="@Id"
               name="@Name"
               placeholder="@Placeholder"
               disabled="@IsDisabled"
               readonly="@IsReadOnly"
               aria-invalid="@HasErrors.ToString().ToLower()"
               aria-describedby="@GetAriaDescribedBy()" />
               
        @if (ShowToggle)
        {
            <button type="button" 
                    class="wcr-password-toggle" 
                    @onclick="TogglePasswordVisibility"
                    tabindex="-1"
                    aria-label="@(_showPassword ? "Hide password" : "Show password")">
                <span class="e-icons @(_showPassword ? "e-eye-hide" : "e-eye")"></span>
            </button>
        }
    </div>
    
    @if (ShowStrengthIndicator && !string.IsNullOrEmpty(CurrentValue))
    {
        <div class="wcr-password-strength">
            <div class="wcr-password-strength-bar">
                <div class="wcr-password-strength-fill @GetStrengthClass()" 
                     style="width: @GetStrengthPercentage()%"></div>
            </div>
            <span class="wcr-password-strength-text">@GetStrengthText()</span>
        </div>
    }
    
    @if (ShowRequirements && (IsFocused || !string.IsNullOrEmpty(CurrentValue)))
    {
        <div class="wcr-password-requirements">
            <div class="wcr-requirement @(CurrentValue.Length >= 8 ? "met" : "")">
                <span class="e-icons @(CurrentValue.Length >= 8 ? "e-check" : "e-close")"></span>
                At least 8 characters
            </div>
            <div class="wcr-requirement @(CurrentValue.Any(char.IsUpper) ? "met" : "")">
                <span class="e-icons @(CurrentValue.Any(char.IsUpper) ? "e-check" : "e-close")"></span>
                One uppercase letter
            </div>
            <div class="wcr-requirement @(CurrentValue.Any(char.IsLower) ? "met" : "")">
                <span class="e-icons @(CurrentValue.Any(char.IsLower) ? "e-check" : "e-close")"></span>
                One lowercase letter
            </div>
            <div class="wcr-requirement @(CurrentValue.Any(char.IsDigit) ? "met" : "")">
                <span class="e-icons @(CurrentValue.Any(char.IsDigit) ? "e-check" : "e-close")"></span>
                One number
            </div>
            <div class="wcr-requirement @(CurrentValue.Any(ch => !char.IsLetterOrDigit(ch)) ? "met" : "")">
                <span class="e-icons @(CurrentValue.Any(ch => !char.IsLetterOrDigit(ch)) ? "e-check" : "e-close")"></span>
                One special character
            </div>
        </div>
    }
    
    @if (HasErrors && ShowInlineError)
    {
        <div id="@($"{Id}-error")" class="wcr-validation-message" role="alert">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }
    
    @if (!string.IsNullOrEmpty(HelpText) && !HasErrors)
    {
        <small id="@($"{Id}-help")" class="wcr-help-text">@HelpText</small>
    }
</div>

<style>
    .wcr-password-toggle {
        position: absolute;
        right: 0.75rem;
        top: 50%;
        transform: translateY(-50%);
        background: none;
        border: none;
        cursor: pointer;
        padding: 0.5rem;
        color: var(--wcr-color-stone);
        transition: color 0.2s;
    }
    
    .wcr-password-toggle:hover {
        color: var(--wcr-color-burgundy);
    }
    
    .wcr-password-strength {
        margin-top: 0.5rem;
    }
    
    .wcr-password-strength-bar {
        height: 4px;
        background-color: #e0e0e0;
        border-radius: 2px;
        overflow: hidden;
        margin-bottom: 0.25rem;
    }
    
    .wcr-password-strength-fill {
        height: 100%;
        transition: width 0.3s ease, background-color 0.3s ease;
    }
    
    .wcr-password-strength-fill.weak {
        background-color: var(--wcr-color-error);
    }
    
    .wcr-password-strength-fill.fair {
        background-color: var(--wcr-color-warning);
    }
    
    .wcr-password-strength-fill.good {
        background-color: #ffd700;
    }
    
    .wcr-password-strength-fill.strong {
        background-color: var(--wcr-color-success);
    }
    
    .wcr-password-strength-text {
        font-size: 0.75rem;
        color: var(--wcr-color-stone);
    }
    
    .wcr-password-requirements {
        margin-top: 0.5rem;
        padding: 0.75rem;
        background-color: #f8f9fa;
        border-radius: 0.375rem;
        font-size: 0.875rem;
    }
    
    .wcr-requirement {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        margin-bottom: 0.25rem;
        color: var(--wcr-color-stone);
        transition: color 0.2s;
    }
    
    .wcr-requirement:last-child {
        margin-bottom: 0;
    }
    
    .wcr-requirement.met {
        color: var(--wcr-color-success);
    }
    
    .wcr-requirement .e-icons {
        font-size: 1rem;
    }
</style>

@code {
    [Parameter] public string CurrentValue { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> CurrentValueChanged { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString("N");
    [Parameter] public string? Name { get; set; }
    [Parameter] public bool IsRequired { get; set; }
    [Parameter] public string? HelpText { get; set; }
    [Parameter] public string? Placeholder { get; set; } = "Enter password";
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool IsReadOnly { get; set; }
    [Parameter] public bool ShowInlineError { get; set; } = true;
    [Parameter] public bool ShowToggle { get; set; } = true;
    [Parameter] public bool ShowStrengthIndicator { get; set; } = true;
    [Parameter] public bool ShowRequirements { get; set; } = true;
    [Parameter] public Expression<Func<string>>? ValidationFor { get; set; }
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object>? AdditionalAttributes { get; set; }
    [Parameter] public string? CssClass { get; set; }
    
    [CascadingParameter] private EditContext? EditContext { get; set; }
    
    private bool _showPassword = false;
    private bool IsFocused = false;
    private int _passwordStrength = 0;
    
    private bool HasErrors => EditContext != null && ValidationFor != null && 
                             EditContext.GetValidationMessages(FieldIdentifier.Create(ValidationFor)).Any();
    
    protected override void OnInitialized()
    {
        // Set Name if not explicitly provided
        if (string.IsNullOrEmpty(Name))
        {
            if (!string.IsNullOrEmpty(Label))
            {
                // Convert label to a valid name attribute
                Name = Label.Replace(" ", "").ToLowerInvariant();
            }
            else
            {
                // Default to "password" for password fields
                Name = "password";
            }
        }
    }
    
    private async Task HandlePasswordChanged(ChangeEventArgs e)
    {
        CurrentValue = e.Value?.ToString() ?? string.Empty;
        await CurrentValueChanged.InvokeAsync(CurrentValue);
        CalculatePasswordStrength();
    }
    
    private void TogglePasswordVisibility()
    {
        _showPassword = !_showPassword;
    }
    
    private void CalculatePasswordStrength()
    {
        _passwordStrength = 0;
        
        if (string.IsNullOrEmpty(CurrentValue))
            return;
            
        // Length check
        if (CurrentValue.Length >= 8) _passwordStrength++;
        if (CurrentValue.Length >= 12) _passwordStrength++;
        
        // Character variety checks
        if (CurrentValue.Any(char.IsUpper)) _passwordStrength++;
        if (CurrentValue.Any(char.IsLower)) _passwordStrength++;
        if (CurrentValue.Any(char.IsDigit)) _passwordStrength++;
        if (CurrentValue.Any(ch => !char.IsLetterOrDigit(ch))) _passwordStrength++;
        
        // Bonus for length
        if (CurrentValue.Length >= 16) _passwordStrength++;
    }
    
    private string GetStrengthClass()
    {
        return _passwordStrength switch
        {
            <= 2 => "weak",
            <= 4 => "fair",
            <= 6 => "good",
            _ => "strong"
        };
    }
    
    private int GetStrengthPercentage()
    {
        return _passwordStrength switch
        {
            0 => 0,
            1 => 15,
            2 => 30,
            3 => 45,
            4 => 60,
            5 => 75,
            6 => 90,
            _ => 100
        };
    }
    
    private string GetStrengthText()
    {
        return _passwordStrength switch
        {
            <= 2 => "Weak",
            <= 4 => "Fair",
            <= 6 => "Good",
            _ => "Strong"
        };
    }
    
    private string GetCssClass()
    {
        var css = "wcr-input";
        
        if (ShowToggle)
        {
            css += " wcr-input-with-toggle";
        }
        
        if (HasErrors)
        {
            css += " wcr-input-error";
        }
        
        if (!string.IsNullOrEmpty(CssClass))
        {
            css += $" {CssClass}";
        }
        
        return css;
    }
    
    private string GetAriaDescribedBy()
    {
        var describedBy = new List<string>();
        
        if (HasErrors)
        {
            describedBy.Add($"{Id}-error");
        }
        
        if (!string.IsNullOrEmpty(HelpText))
        {
            describedBy.Add($"{Id}-help");
        }
        
        if (ShowRequirements)
        {
            describedBy.Add($"{Id}-requirements");
        }
        
        return string.Join(" ", describedBy);
    }
}