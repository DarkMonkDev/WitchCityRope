@page "/admin/dashboard"
@page "/admin"
@using WitchCityRope.Web.Services
@inject ApiClient ApiClient
@inject NavigationManager Navigation
@inject IAuthService AuthService
@attribute [Authorize(Roles = "Administrator,Admin")]
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())

@* Admin dashboard content - layout is provided by AdminLayout *@

<!-- Page Header -->
<div class="page-header">
    <h1 class="page-title">Admin Dashboard</h1>
    <div class="header-actions">
        <span class="last-refresh">Last updated: @lastRefreshTime.ToString("h:mm tt")</span>
        <button class="btn btn-secondary" @onclick="RefreshData" disabled="@isRefreshing">
            <span class="refresh-icon @(isRefreshing ? "spinning" : "")">‚ü≥</span> 
            @(isRefreshing ? "Refreshing..." : "Refresh")
        </button>
    </div>
</div>

@if (isLoading)
{
    <div class="loading-container">
        <div class="loading-spinner"></div>
        <p>Loading dashboard data...</p>
    </div>
}
else
{
    @* Key Metrics Cards *@
    <div class="metrics-grid">
        <div class="metric-card metric-revenue">
            <div class="metric-content">
                <div class="metric-header">
                    <span class="metric-label">Total Revenue</span>
                    <span class="metric-trend trend-up">+12.5%</span>
                </div>
                <div class="metric-value">$@monthRevenue.ToString("N2")</div>
                <div class="metric-footer">
                    <span class="metric-period">Last 30 days</span>
                </div>
            </div>
            <div class="metric-icon">
                <span class="icon-dollar">$</span>
            </div>
        </div>
        
        <div class="metric-card metric-members">
            <div class="metric-content">
                <div class="metric-header">
                    <span class="metric-label">Active Members</span>
                    <span class="metric-trend trend-up">+@newMembersCount</span>
                </div>
                <div class="metric-value">@totalMembers</div>
                <div class="metric-footer">
                    <span class="metric-period">@newMembersCount new this month</span>
                </div>
            </div>
            <div class="metric-icon">
                <span class="icon-users">üë•</span>
            </div>
        </div>
        
        <div class="metric-card metric-events">
            <div class="metric-content">
                <div class="metric-header">
                    <span class="metric-label">Upcoming Events</span>
                </div>
                <div class="metric-value">@activeEvents</div>
                <div class="metric-footer">
                    <span class="metric-period">Next 30 days</span>
                </div>
            </div>
            <div class="metric-icon">
                <span class="icon-calendar">üìÖ</span>
            </div>
        </div>
        
        <div class="metric-card metric-vetting">
            <div class="metric-content">
                <div class="metric-header">
                    <span class="metric-label">Pending Vetting</span>
                    @if (pendingApplications > 0)
                    {
                        <span class="metric-badge">Action Required</span>
                    }
                </div>
                <div class="metric-value">@pendingApplications</div>
                <div class="metric-footer">
                    <a href="/admin/vetting/applications" class="metric-link">Review Queue ‚Üí</a>
                </div>
            </div>
            <div class="metric-icon">
                <span class="icon-shield">üõ°Ô∏è</span>
            </div>
        </div>
    </div>

    @* Dashboard Grid Layout *@
    <div class="dashboard-grid">
        @* Revenue Chart *@
        <div class="dashboard-card chart-card">
            <div class="card-header">
                <h2 class="card-title">Revenue Overview</h2>
                <div class="chart-controls">
                    <select class="period-select" @onchange="OnChartPeriodChangedHandler">
                        <option value="7">Last 7 days</option>
                        <option value="30" selected>Last 30 days</option>
                        <option value="90">Last 90 days</option>
                    </select>
                </div>
            </div>
            <div class="chart-container">
                @* Chart placeholder - in production would use a charting library *@
                <div style="display: flex; align-items: center; justify-content: center; height: 100%; color: #999;">
                    <p>Revenue chart visualization would appear here</p>
                </div>
            </div>
        </div>

        @* Quick Actions *@
        <div class="dashboard-card quick-actions-card">
            <h2 class="card-title">Quick Actions</h2>
            <div class="quick-actions-grid">
                <button class="action-button" @onclick="@(() => Navigation.NavigateTo("/admin/events/new"))">
                    <span class="action-icon">‚ûï</span>
                    <span class="action-text">Create Event</span>
                </button>
                <button class="action-button" @onclick="@(() => Navigation.NavigateTo("/admin/members"))">
                    <span class="action-icon">üë§</span>
                    <span class="action-text">Manage Members</span>
                </button>
                <button class="action-button" @onclick="@(() => Navigation.NavigateTo("/admin/reports"))">
                    <span class="action-icon">üìä</span>
                    <span class="action-text">View Reports</span>
                </button>
                <button class="action-button" @onclick="@(() => Navigation.NavigateTo("/admin/vetting/applications"))">
                    <span class="action-icon">üõ°Ô∏è</span>
                    <span class="action-text">Review Vetting</span>
                </button>
                <button class="action-button" @onclick="ExportData" disabled="@isExporting">
                    <span class="action-icon">üì•</span>
                    <span class="action-text">@(isExporting ? "Exporting..." : "Export Data")</span>
                </button>
                <button class="action-button" @onclick="@(() => Navigation.NavigateTo("/admin/settings"))">
                    <span class="action-icon">‚öôÔ∏è</span>
                    <span class="action-text">Settings</span>
                </button>
            </div>
        </div>

        @* Recent Activity Feed *@
        <div class="dashboard-card activity-card">
            <div class="card-header">
                <h2 class="card-title">Recent Activity</h2>
                <a href="/admin/activity-log" class="view-all-link">View All ‚Üí</a>
            </div>
            <div class="activity-feed">
                @if (recentActivities != null && recentActivities.Any())
                {
                    @foreach (var activity in recentActivities.Take(6))
                    {
                        <div class="activity-item">
                            <div class="activity-icon @GetActivityIconClass(activity.Type)">
                                <span>@GetActivityIcon(activity.Type)</span>
                            </div>
                            <div class="activity-content">
                                <p class="activity-text">@activity.Message</p>
                                <span class="activity-time">@GetRelativeTime(activity.Timestamp)</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="empty-state-text">No recent activity</p>
                }
            </div>
        </div>
        
        @* System Health *@
        <div class="dashboard-card health-card">
            <h2 class="card-title">System Health</h2>
            <div class="health-indicators">
                <div class="health-item status-good">
                    <span class="health-indicator"></span>
                    <span class="health-label">API Services</span>
                    <span class="health-value">Operational</span>
                </div>
                <div class="health-item status-good">
                    <span class="health-indicator"></span>
                    <span class="health-label">Database</span>
                    <span class="health-value">Healthy</span>
                </div>
                <div class="health-item status-good">
                    <span class="health-indicator"></span>
                    <span class="health-label">Payment Gateway</span>
                    <span class="health-value">Connected</span>
                </div>
                <div class="health-item status-good">
                    <span class="health-indicator"></span>
                    <span class="health-label">Email Service</span>
                    <span class="health-value">0 emails in queue</span>
                </div>
            </div>
            <div class="health-footer">
                <small>Last checked: @DateTime.Now.ToString("h:mm tt")</small>
            </div>
        </div>

        @* Recent Registrations *@
        <div class="dashboard-card registrations-card">
            <div class="card-header">
                <h2 class="card-title">Recent Registrations</h2>
                <a href="/admin/registrations" class="view-all-link">View All ‚Üí</a>
            </div>
            <div class="registrations-list">
                <table class="simple-table">
                    <thead>
                        <tr>
                            <th>Member</th>
                            <th>Event</th>
                            <th>Date</th>
                            <th>Status</th>
                        </tr>
                    </thead>
                    <tbody>
                        @if (recentRegistrations != null && recentRegistrations.Any())
                        {
                            @foreach (var registration in recentRegistrations.Take(5))
                            {
                                <tr>
                                    <td>
                                        <div class="member-info">
                                            <strong>@registration.UserName</strong>
                                            <span class="member-email">@registration.UserName</span>
                                        </div>
                                    </td>
                                    <td>@registration.EventName</td>
                                    <td>@registration.RegisteredAt.ToString("MMM d, h:mm tt")</td>
                                    <td>
                                        <span class="status-badge status-@registration.Status.ToLower()">
                                            @registration.Status
                                        </span>
                                    </td>
                                </tr>
                            }
                        }
                        else
                        {
                            <tr>
                                <td colspan="4" style="text-align: center; color: #999;">No recent registrations</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
}

@code {
    private bool isLoading = true;
    private bool isRefreshing = false;
    private bool isExporting = false;
    private DateTime lastRefreshTime = DateTime.Now;
    
    // Metrics
    private int activeEvents = 0;
    private int totalMembers = 0;
    private decimal monthRevenue = 0;
    private int pendingApplications = 0;
    private int newMembersCount = 0;
    
    // Activity
    private List<ActivityItem> recentActivities = new();
    
    // Recent Registrations
    private List<RegistrationItem> recentRegistrations = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            isLoading = true;

            // Load stats (simulated for now - replace with actual API calls)
            activeEvents = 8;
            totalMembers = 287;
            monthRevenue = 15847.50m;
            pendingApplications = 3;
            newMembersCount = 23;

            // Load recent activities (simulated)
            recentActivities = new List<ActivityItem>
            {
                new ActivityItem { Type = "registration", Message = "New member registration: Sarah M.", Timestamp = DateTime.Now.AddHours(-2) },
                new ActivityItem { Type = "event", Message = "Event created: Introduction to Rope Bondage", Timestamp = DateTime.Now.AddHours(-5) },
                new ActivityItem { Type = "payment", Message = "Payment received: $35.00 from John D.", Timestamp = DateTime.Now.AddDays(-1) },
                new ActivityItem { Type = "vetting", Message = "Vetting application submitted by Alex R.", Timestamp = DateTime.Now.AddDays(-1) },
                new ActivityItem { Type = "event", Message = "Event updated: February Rope Jam", Timestamp = DateTime.Now.AddDays(-2) },
                new ActivityItem { Type = "member", Message = "Profile updated: Emma R. updated emergency contacts", Timestamp = DateTime.Now.AddHours(-3) }
            };
            
            lastRefreshTime = DateTime.Now;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading dashboard data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private string GetActivityIcon(string type)
    {
        return type switch
        {
            "registration" => "üë§",
            "event" => "üìÖ",
            "payment" => "üí∞",
            "vetting" => "üìã",
            _ => "üìå"
        };
    }

    private string GetActivityIconClass(string type)
    {
        return type switch
        {
            "registration" => "icon-success",
            "event" => "icon-info",
            "payment" => "icon-primary",
            "vetting" => "icon-warning",
            "member" => "icon-secondary",
            _ => "icon-default"
        };
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var diff = DateTime.Now - timestamp;
        
        if (diff.TotalMinutes < 60)
            return $"{(int)diff.TotalMinutes} minutes ago";
        if (diff.TotalHours < 24)
            return $"{(int)diff.TotalHours} hours ago";
        if (diff.TotalDays < 7)
            return $"{(int)diff.TotalDays} days ago";
        
        return timestamp.ToString("MMM dd, yyyy");
    }

    private async Task RefreshData()
    {
        if (isRefreshing) return;
        
        isRefreshing = true;
        await LoadDashboardData();
        isRefreshing = false;
    }
    
    private async Task ExportData()
    {
        try
        {
            isExporting = true;
            // Simulate export - replace with actual implementation
            await Task.Delay(2000);
            // In real implementation, generate CSV/Excel and download
        }
        finally
        {
            isExporting = false;
        }
    }

    private void OnChartPeriodChangedHandler(ChangeEventArgs e)
    {
        // Handle chart period change
        var period = e.Value?.ToString();
        // Implement chart update logic here
    }

    private class ActivityItem
    {
        public string Type { get; set; } = "";
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }
    
    private class RegistrationItem
    {
        public string UserName { get; set; } = "";
        public string EventName { get; set; } = "";
        public DateTime RegisteredAt { get; set; }
        public string Status { get; set; } = "";
    }
}