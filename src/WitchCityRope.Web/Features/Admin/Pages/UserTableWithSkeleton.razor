@page "/admin/users-skeleton-example"
@using WitchCityRope.Web.Shared.Components.UI

<h1>User Management</h1>
<p>Example of using skeleton loader for table data.</p>

<div class="table-controls">
    <div class="search-box">
        <input type="text" placeholder="Search users..." @bind="searchQuery" />
        <button class="btn btn-primary" @onclick="SearchUsers">Search</button>
    </div>
    <button class="btn btn-secondary" @onclick="RefreshData">
        <span class="refresh-icon">‚ü≥</span> Refresh
    </button>
</div>

@if (isLoading)
{
    <div class="table-container">
        <SkeletonLoader Type="SkeletonLoader.SkeletonType.Table" Count="10" TableColumns="5" />
    </div>
}
else if (users.Any())
{
    <div class="table-container fade-in">
        <table class="data-table">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Email</th>
                    <th>Role</th>
                    <th>Status</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var user in users)
                {
                    <tr>
                        <td>
                            <div class="user-info">
                                <div class="user-avatar" style="background-color: @GetAvatarColor(user.Name)">
                                    @user.Name.Substring(0, 2).ToUpper()
                                </div>
                                <span>@user.Name</span>
                            </div>
                        </td>
                        <td>@user.Email</td>
                        <td>
                            <span class="role-badge role-@user.Role.ToLower()">@user.Role</span>
                        </td>
                        <td>
                            <span class="status-badge status-@user.Status.ToLower()">@user.Status</span>
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn-icon" title="Edit">‚úèÔ∏è</button>
                                <button class="btn-icon" title="View">üëÅÔ∏è</button>
                                <button class="btn-icon btn-danger" title="Delete">üóëÔ∏è</button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        
        <div class="table-footer">
            <div class="pagination">
                <button class="btn-page" disabled>Previous</button>
                <span class="page-info">Page 1 of 3</span>
                <button class="btn-page">Next</button>
            </div>
            <div class="page-size">
                <label>
                    Show 
                    <select @bind="pageSize">
                        <option value="10">10</option>
                        <option value="25">25</option>
                        <option value="50">50</option>
                    </select>
                    entries
                </label>
            </div>
        </div>
    </div>
}
else
{
    <div class="no-data">
        <p>No users found matching your criteria.</p>
    </div>
}

<h2 style="margin-top: 3rem;">List View Example</h2>
<p>Alternative view using list skeleton loader.</p>

<div class="view-toggle">
    <button class="btn @(viewMode == "table" ? "btn-primary" : "btn-secondary")" @onclick="() => SetViewMode(\"table\")">
        Table View
    </button>
    <button class="btn @(viewMode == "list" ? "btn-primary" : "btn-secondary")" @onclick="() => SetViewMode(\"list\")">
        List View
    </button>
</div>

@if (viewMode == "list")
{
    @if (isLoadingList)
    {
        <div class="list-container">
            <SkeletonLoader Type="SkeletonLoader.SkeletonType.List" Count="5" />
        </div>
    }
    else
    {
        <div class="list-container fade-in">
            @foreach (var user in users.Take(5))
            {
                <div class="user-list-item">
                    <div class="user-avatar-large" style="background-color: @GetAvatarColor(user.Name)">
                        @user.Name.Substring(0, 2).ToUpper()
                    </div>
                    <div class="user-details">
                        <h3>@user.Name</h3>
                        <p>@user.Email</p>
                        <div class="user-meta">
                            <span class="role-badge role-@user.Role.ToLower()">@user.Role</span>
                            <span class="status-badge status-@user.Status.ToLower()">@user.Status</span>
                        </div>
                    </div>
                    <div class="user-actions">
                        <button class="btn btn-secondary">View Profile</button>
                    </div>
                </div>
            }
        </div>
    }
}

@code {
    private bool isLoading = true;
    private bool isLoadingList = false;
    private string searchQuery = "";
    private string viewMode = "table";
    private int pageSize = 10;
    private List<UserItem> users = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadUsers();
    }

    private async Task LoadUsers()
    {
        isLoading = true;
        StateHasChanged();

        // Simulate API call
        await Task.Delay(1500);

        users = GenerateMockUsers();
        
        isLoading = false;
        StateHasChanged();
    }

    private async Task SearchUsers()
    {
        await LoadUsers();
    }

    private async Task RefreshData()
    {
        await LoadUsers();
    }

    private async Task SetViewMode(string mode)
    {
        viewMode = mode;
        if (mode == "list")
        {
            isLoadingList = true;
            StateHasChanged();
            await Task.Delay(800);
            isLoadingList = false;
            StateHasChanged();
        }
    }

    private List<UserItem> GenerateMockUsers()
    {
        return new List<UserItem>
        {
            new UserItem { Id = 1, Name = "Alexandra Moon", Email = "alex.moon@witchcity.com", Role = "Admin", Status = "Active" },
            new UserItem { Id = 2, Name = "Blake Rivers", Email = "blake.r@witchcity.com", Role = "Member", Status = "Active" },
            new UserItem { Id = 3, Name = "Casey Storm", Email = "casey.storm@witchcity.com", Role = "Instructor", Status = "Active" },
            new UserItem { Id = 4, Name = "Dakota Vale", Email = "dakota.v@witchcity.com", Role = "Member", Status = "Pending" },
            new UserItem { Id = 5, Name = "Eden Fox", Email = "eden.fox@witchcity.com", Role = "Member", Status = "Active" },
            new UserItem { Id = 6, Name = "Finley Crow", Email = "finley.c@witchcity.com", Role = "Instructor", Status = "Active" },
            new UserItem { Id = 7, Name = "Grey Wilde", Email = "grey.wilde@witchcity.com", Role = "Member", Status = "Suspended" },
            new UserItem { Id = 8, Name = "Harper Night", Email = "harper.n@witchcity.com", Role = "Admin", Status = "Active" },
            new UserItem { Id = 9, Name = "Indigo Raven", Email = "indigo.r@witchcity.com", Role = "Member", Status = "Active" },
            new UserItem { Id = 10, Name = "Jordan Ash", Email = "jordan.ash@witchcity.com", Role = "Member", Status = "Active" }
        };
    }

    private string GetAvatarColor(string name)
    {
        var colors = new[] 
        { 
            "var(--wcr-burgundy)", 
            "var(--wcr-plum)", 
            "var(--wcr-electric)", 
            "var(--wcr-rose-gold)",
            "var(--wcr-copper)",
            "var(--wcr-brass)"
        };
        var hash = name.GetHashCode();
        return colors[Math.Abs(hash) % colors.Length];
    }

    private class UserItem
    {
        public int Id { get; set; }
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Role { get; set; } = "";
        public string Status { get; set; } = "";
    }
}

<style>
    .table-controls {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 1.5rem;
        gap: 1rem;
    }

    .search-box {
        display: flex;
        gap: 0.5rem;
        flex: 1;
        max-width: 400px;
    }

    .search-box input {
        flex: 1;
        padding: 0.75rem;
        border: 2px solid var(--wcr-taupe);
        border-radius: var(--wcr-radius-md);
        background-color: var(--wcr-cream);
        transition: all var(--wcr-transition-base);
    }

    .search-box input:focus {
        border-color: var(--wcr-burgundy);
        background-color: var(--wcr-ivory);
        outline: none;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: var(--wcr-radius-sm);
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
        transition: all var(--wcr-transition-base);
    }

    .btn-primary {
        background: var(--wcr-gradient-primary);
        color: var(--wcr-midnight);
    }

    .btn-primary:hover {
        background: var(--wcr-gradient-primary-hover);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: transparent;
        color: var(--wcr-burgundy);
        border: 2px solid var(--wcr-burgundy);
    }

    .btn-secondary:hover {
        background: var(--wcr-burgundy);
        color: var(--wcr-ivory);
    }

    .refresh-icon {
        display: inline-block;
        transition: transform var(--wcr-transition-base);
    }

    .btn-secondary:hover .refresh-icon {
        transform: rotate(180deg);
    }

    .table-container {
        background-color: var(--wcr-ivory);
        border-radius: var(--wcr-radius-lg);
        overflow: hidden;
        box-shadow: var(--wcr-shadow-md);
    }

    .data-table {
        width: 100%;
        border-collapse: collapse;
    }

    .data-table thead {
        background-color: var(--wcr-charcoal);
        color: var(--wcr-ivory);
    }

    .data-table th {
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        font-size: 0.875rem;
    }

    .data-table tbody tr {
        border-bottom: 1px solid var(--wcr-cream);
        transition: background-color var(--wcr-transition-fast);
    }

    .data-table tbody tr:hover {
        background-color: var(--wcr-cream);
    }

    .data-table td {
        padding: 1rem;
    }

    .user-info {
        display: flex;
        align-items: center;
        gap: 0.75rem;
    }

    .user-avatar {
        width: 36px;
        height: 36px;
        border-radius: var(--wcr-radius-pill);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--wcr-ivory);
        font-weight: 600;
        font-size: 0.875rem;
    }

    .role-badge, .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: var(--wcr-radius-pill);
        font-size: 0.75rem;
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .role-admin {
        background-color: var(--wcr-burgundy);
        color: var(--wcr-ivory);
    }

    .role-instructor {
        background-color: var(--wcr-electric);
        color: var(--wcr-ivory);
    }

    .role-member {
        background-color: var(--wcr-brass);
        color: var(--wcr-midnight);
    }

    .status-active {
        background-color: var(--wcr-success);
        color: white;
    }

    .status-pending {
        background-color: var(--wcr-warning);
        color: var(--wcr-midnight);
    }

    .status-suspended {
        background-color: var(--wcr-error);
        color: white;
    }

    .action-buttons {
        display: flex;
        gap: 0.5rem;
    }

    .btn-icon {
        width: 32px;
        height: 32px;
        border: none;
        background-color: var(--wcr-cream);
        border-radius: var(--wcr-radius-sm);
        cursor: pointer;
        transition: all var(--wcr-transition-fast);
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .btn-icon:hover {
        background-color: var(--wcr-taupe);
        transform: translateY(-2px);
    }

    .btn-icon.btn-danger:hover {
        background-color: var(--wcr-error);
    }

    .table-footer {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        background-color: var(--wcr-cream);
        border-top: 1px solid var(--wcr-taupe);
    }

    .pagination {
        display: flex;
        align-items: center;
        gap: 1rem;
    }

    .btn-page {
        padding: 0.5rem 1rem;
        border: 1px solid var(--wcr-taupe);
        background-color: var(--wcr-ivory);
        border-radius: var(--wcr-radius-sm);
        cursor: pointer;
        transition: all var(--wcr-transition-fast);
    }

    .btn-page:hover:not(:disabled) {
        background-color: var(--wcr-burgundy);
        color: var(--wcr-ivory);
        border-color: var(--wcr-burgundy);
    }

    .btn-page:disabled {
        opacity: 0.5;
        cursor: not-allowed;
    }

    .page-info {
        color: var(--wcr-charcoal);
        font-size: 0.875rem;
    }

    .page-size select {
        padding: 0.25rem 0.5rem;
        border: 1px solid var(--wcr-taupe);
        border-radius: var(--wcr-radius-sm);
        background-color: var(--wcr-cream);
    }

    .view-toggle {
        display: flex;
        gap: 0.5rem;
        margin: 1.5rem 0;
    }

    .list-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .user-list-item {
        display: flex;
        align-items: center;
        gap: 1.5rem;
        padding: 1.5rem;
        background-color: var(--wcr-ivory);
        border-radius: var(--wcr-radius-lg);
        border: 1px solid var(--wcr-taupe);
        transition: all var(--wcr-transition-base);
    }

    .user-list-item:hover {
        transform: translateX(4px);
        box-shadow: var(--wcr-shadow-md);
    }

    .user-avatar-large {
        width: 64px;
        height: 64px;
        border-radius: var(--wcr-radius-pill);
        display: flex;
        align-items: center;
        justify-content: center;
        color: var(--wcr-ivory);
        font-weight: 600;
        font-size: 1.25rem;
        flex-shrink: 0;
    }

    .user-details {
        flex: 1;
    }

    .user-details h3 {
        margin: 0 0 0.25rem 0;
        color: var(--wcr-charcoal);
    }

    .user-details p {
        margin: 0 0 0.5rem 0;
        color: var(--wcr-stone);
    }

    .user-meta {
        display: flex;
        gap: 0.5rem;
    }

    .user-actions {
        flex-shrink: 0;
    }

    .no-data {
        text-align: center;
        padding: 4rem;
        color: var(--wcr-stone);
    }

    .fade-in {
        animation: fadeIn var(--wcr-transition-base);
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @media (max-width: 768px) {
        .table-controls {
            flex-direction: column;
            align-items: stretch;
        }

        .search-box {
            max-width: 100%;
        }

        .table-container {
            overflow-x: auto;
        }

        .data-table {
            min-width: 600px;
        }

        .table-footer {
            flex-direction: column;
            gap: 1rem;
        }

        .user-list-item {
            flex-direction: column;
            text-align: center;
        }

        .user-meta {
            justify-content: center;
        }
    }
</style>