@page "/admin/financial-reports"
@page "/admin/reports"
@using WitchCityRope.Web.Services
@using Syncfusion.Blazor.Charts
@using Syncfusion.Blazor.Cards
@using Syncfusion.Blazor.Calendars
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Buttons
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using Syncfusion.Blazor.DropDowns
@inject ApiClient ApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize(Roles = "Administrator,Admin")]

<div class="page-container">
    <div class="page-header">
        <h1 class="page-title">Financial Reports</h1>
        <div class="header-actions">
            <div class="date-range-container">
                <SfDateRangePicker @bind-StartDate="@startDate" @bind-EndDate="@endDate" 
                                 Placeholder="Select date range"
                                 Format="MMM dd, yyyy"
                                 ShowClearButton="true">
                    <DateRangePickerEvents TValue="DateTime" RangeChange="@OnDateRangeChange"></DateRangePickerEvents>
                    <DateRangePickerPresets>
                        <DateRangePickerPreset Label="Today" Start="@DateTime.Today" End="@DateTime.Today"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="Last 7 Days" Start="@DateTime.Today.AddDays(-7)" End="@DateTime.Today"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="Last 30 Days" Start="@DateTime.Today.AddDays(-30)" End="@DateTime.Today"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="This Month" Start="@(new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1))" End="@DateTime.Today"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="Last Month" Start="@(new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddMonths(-1))" End="@(new DateTime(DateTime.Today.Year, DateTime.Today.Month, 1).AddDays(-1))"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="This Quarter" Start="@GetQuarterStart()" End="@DateTime.Today"></DateRangePickerPreset>
                        <DateRangePickerPreset Label="This Year" Start="@(new DateTime(DateTime.Today.Year, 1, 1))" End="@DateTime.Today"></DateRangePickerPreset>
                    </DateRangePickerPresets>
                </SfDateRangePicker>
            </div>
            <button class="btn btn-secondary" @onclick="RefreshData">
                <span class="refresh-icon">‚ü≥</span> Refresh
            </button>
            <div class="export-dropdown">
                <SfDropDownButton Content="Export" CssClass="e-caret-hide">
                    <DropDownMenuItems>
                        <DropDownMenuItem Text="Export as CSV" IconCss="e-icons e-export-csv" @onclick="@(() => ExportData("csv"))"></DropDownMenuItem>
                        <DropDownMenuItem Text="Export as PDF" IconCss="e-icons e-export-pdf" @onclick="@(() => ExportData("pdf"))"></DropDownMenuItem>
                        <DropDownMenuItem Text="Export as Excel" IconCss="e-icons e-export-excel" @onclick="@(() => ExportData("excel"))"></DropDownMenuItem>
                    </DropDownMenuItems>
                </SfDropDownButton>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <LoadingSpinner />
    }
    else
    {
        @* Key Financial Metrics Summary Cards *@
        <div class="metrics-grid">
            <div class="metric-card metric-revenue">
                <div class="metric-content">
                    <div class="metric-header">
                        <span class="metric-label">Total Revenue</span>
                        <span class="metric-trend @(revenueGrowth >= 0 ? "trend-up" : "trend-down")">
                            @(revenueGrowth >= 0 ? "+" : "")@revenueGrowth.ToString("F1")%
                        </span>
                    </div>
                    <div class="metric-value">$@totalRevenue.ToString("N2")</div>
                    <div class="metric-footer">
                        <span class="metric-period">vs previous period</span>
                    </div>
                </div>
                <div class="metric-icon">
                    <span class="icon-dollar">$</span>
                </div>
            </div>

            <div class="metric-card metric-transactions">
                <div class="metric-content">
                    <div class="metric-header">
                        <span class="metric-label">Total Transactions</span>
                    </div>
                    <div class="metric-value">@totalTransactions</div>
                    <div class="metric-footer">
                        <span class="metric-period">Avg: $@averageTransactionValue.ToString("N2")</span>
                    </div>
                </div>
                <div class="metric-icon">
                    <span class="icon-receipt">üìä</span>
                </div>
            </div>

            <div class="metric-card metric-refunds">
                <div class="metric-content">
                    <div class="metric-header">
                        <span class="metric-label">Refunds Issued</span>
                    </div>
                    <div class="metric-value">$@totalRefunds.ToString("N2")</div>
                    <div class="metric-footer">
                        <span class="metric-period">@refundCount refunds</span>
                    </div>
                </div>
                <div class="metric-icon">
                    <span class="icon-refund">‚Ü©Ô∏è</span>
                </div>
            </div>

            <div class="metric-card metric-sliding-scale">
                <div class="metric-content">
                    <div class="metric-header">
                        <span class="metric-label">Sliding Scale Usage</span>
                    </div>
                    <div class="metric-value">@slidingScalePercentage%</div>
                    <div class="metric-footer">
                        <span class="metric-period">@slidingScaleCount payments</span>
                    </div>
                </div>
                <div class="metric-icon">
                    <span class="icon-scale">‚öñÔ∏è</span>
                </div>
            </div>
        </div>

        <div class="reports-grid">
            @* Additional reports will be added here *@
        </div>
    }
</div>

@code {
    private bool isLoading = true;
    private DateTime startDate = DateTime.Today.AddDays(-30);
    private DateTime endDate = DateTime.Today;
    private string chartView = "daily";

    // Financial Metrics
    private decimal totalRevenue = 0;
    private decimal revenueGrowth = 0;
    private int totalTransactions = 0;
    private decimal averageTransactionValue = 0;
    private decimal totalRefunds = 0;
    private int refundCount = 0;
    private int slidingScaleCount = 0;
    private decimal slidingScalePercentage = 0;

    protected override async Task OnInitializedAsync()
    {
        await LoadFinancialData();
    }

    private async Task LoadFinancialData()
    {
        try
        {
            isLoading = true;
            
            // Mock data for now - replace with API calls
            totalRevenue = 45847.50m;
            revenueGrowth = 15.7m;
            totalTransactions = 342;
            averageTransactionValue = totalRevenue / totalTransactions;
            totalRefunds = 1250.00m;
            refundCount = 8;
            slidingScaleCount = 47;
            slidingScalePercentage = Math.Round((slidingScaleCount * 100m) / totalTransactions, 1);
            
            await Task.Delay(100); // Simulate loading
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading financial data: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshData()
    {
        await LoadFinancialData();
    }

    private async Task OnDateRangeChange(Syncfusion.Blazor.Calendars.RangeEventArgs args)
    {
        startDate = args.StartDate;
        endDate = args.EndDate;
        await LoadFinancialData();
    }

    private DateTime GetQuarterStart()
    {
        var today = DateTime.Today;
        var quarter = (today.Month - 1) / 3;
        return new DateTime(today.Year, quarter * 3 + 1, 1);
    }

    private async Task ExportData(string format)
    {
        await JSRuntime.InvokeVoidAsync("alert", $"Export to {format.ToUpper()} functionality will be implemented");
    }
}