@using WitchCityRope.Web.Shared.Validation.Components
@using System.ComponentModel.DataAnnotations

@if (IsVisible && Incident != null)
{
    <div class="modal modal-visible" @onclick="CloseModal">
        <div class="modal-content modal-small" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2 class="modal-title">Add Note</h2>
                <button type="button" class="modal-close" @onclick="CloseModal">Ã—</button>
            </div>
            
            <EditForm Model="NoteForm" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="modal-body">
                    <div class="incident-info">
                        <label>Incident:</label>
                        <strong>@Incident.Title</strong>
                    </div>

                    <WcrInputTextArea @bind-Value="NoteForm.Note" 
                                      Label="Note"
                                      Placeholder="Enter your note..."
                                      Rows="5"
                                      IsRequired="true" />

                    <WcrInputCheckbox @bind-Value="NoteForm.IsInternalNote" 
                                      Label="Internal note (not visible to reporter)" />

                    <WcrValidationSummary />
                </div>

                <div class="modal-actions">
                    <button type="submit" class="wcr-button wcr-button-primary" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm mr-2"></span>
                            <span>Adding...</span>
                        }
                        else
                        {
                            <span>Add Note</span>
                        }
                    </button>
                    <button type="button" class="wcr-button wcr-button-secondary" @onclick="CloseModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        opacity: 0;
        animation: fadeIn 0.3s forwards;
    }

    .modal-visible {
        opacity: 1;
    }

    .modal-content {
        background: white;
        border-radius: var(--wcr-radius-lg);
        box-shadow: var(--wcr-shadow-xl);
        max-width: 90%;
        max-height: 90vh;
        overflow: auto;
        transform: scale(0.9);
        animation: scaleIn 0.3s forwards;
    }

    .modal-small {
        width: 500px;
    }

    .modal-header {
        padding: var(--wcr-space-lg);
        border-bottom: 1px solid var(--wcr-color-taupe);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--wcr-color-cream);
        border-radius: var(--wcr-radius-lg) var(--wcr-radius-lg) 0 0;
    }

    .modal-title {
        margin: 0;
        font-family: var(--wcr-font-heading);
        font-size: 24px;
        color: var(--wcr-color-burgundy);
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 28px;
        line-height: 1;
        color: var(--wcr-color-stone);
        cursor: pointer;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--wcr-radius-sm);
        transition: all 0.2s ease;
    }

    .modal-close:hover {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .modal-body {
        padding: var(--wcr-space-xl);
    }

    .incident-info {
        display: flex;
        flex-direction: column;
        gap: var(--wcr-space-xs);
        margin-bottom: var(--wcr-space-xl);
        padding: var(--wcr-space-md);
        background: var(--wcr-color-cream);
        border-radius: var(--wcr-radius-md);
    }

    .incident-info label {
        font-weight: 600;
        color: var(--wcr-color-stone);
        font-size: 14px;
    }

    .incident-info strong {
        color: var(--wcr-color-charcoal);
        font-size: 16px;
    }

    .modal-actions {
        padding: var(--wcr-space-lg) var(--wcr-space-xl);
        border-top: 1px solid var(--wcr-color-taupe);
        display: flex;
        gap: var(--wcr-space-md);
        justify-content: flex-end;
        background: var(--wcr-color-cream);
        border-radius: 0 0 var(--wcr-radius-lg) var(--wcr-radius-lg);
    }

    .wcr-button {
        display: inline-flex;
        align-items: center;
        gap: var(--wcr-space-sm);
        padding: var(--wcr-space-sm) var(--wcr-space-lg);
        border: none;
        border-radius: var(--wcr-radius-sm);
        font-family: var(--wcr-font-heading);
        font-weight: 600;
        font-size: 16px;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .wcr-button-primary {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .wcr-button-primary:hover:not(:disabled) {
        background: var(--wcr-color-burgundy-dark);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(139, 0, 0, 0.3);
    }

    .wcr-button-primary:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .wcr-button-secondary {
        background: transparent;
        color: var(--wcr-color-stone);
        border: 2px solid var(--wcr-color-taupe);
    }

    .wcr-button-secondary:hover {
        background: var(--wcr-color-taupe);
        color: white;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes fadeIn {
        to { opacity: 1; }
    }

    @@keyframes scaleIn {
        to { transform: scale(1); }
    }

    @@keyframes spinner-border {
        to { transform: rotate(360deg); }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public IncidentViewModel? Incident { get; set; }
    [Parameter] public EventCallback<NoteModel> OnNoteAdded { get; set; }

    private NoteFormModel NoteForm = new();
    private bool IsProcessing = false;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // Reset form when modal opens
            NoteForm = new NoteFormModel
            {
                IsInternalNote = true // Default to internal
            };
        }
    }

    private async Task HandleSubmit()
    {
        IsProcessing = true;
        StateHasChanged();

        try
        {
            var noteModel = new NoteModel
            {
                IncidentId = Incident!.Id,
                Note = NoteForm.Note,
                IsInternalNote = NoteForm.IsInternalNote
            };

            await OnNoteAdded.InvokeAsync(noteModel);
            await CloseModal();
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    public class NoteFormModel
    {
        [Required(ErrorMessage = "Note is required")]
        [StringLength(1000, MinimumLength = 1, ErrorMessage = "Note must be between 1 and 1000 characters")]
        public string Note { get; set; } = "";
        
        public bool IsInternalNote { get; set; } = true;
    }

    public class NoteModel
    {
        public int IncidentId { get; set; }
        public string Note { get; set; } = "";
        public bool IsInternalNote { get; set; }
    }

    public class IncidentViewModel
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
    }
}