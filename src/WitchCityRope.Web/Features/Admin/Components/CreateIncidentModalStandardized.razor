@using WitchCityRope.Web.Shared.Validation.Components
@using WitchCityRope.Web.Shared.Validation.Enums
@using System.ComponentModel.DataAnnotations

@if (IsVisible)
{
    <div class="modal modal-visible" @onclick="CloseModal">
        <div class="modal-content modal-large" @onclick:stopPropagation="true">
            <div class="modal-header">
                <h2 class="modal-title">Report New Incident</h2>
                <button type="button" class="modal-close" @onclick="CloseModal">Ã—</button>
            </div>
            
            <EditForm Model="IncidentForm" OnValidSubmit="HandleSubmit">
                <DataAnnotationsValidator />

                <div class="modal-body">
                    <div class="form-row">
                        <WcrInputText @bind-Value="IncidentForm.Title" 
                                      Label="Title"
                                      Placeholder="Brief description of the incident"
                                      IsRequired="true" />

                        <WcrInputSelect @bind-Value="IncidentForm.Type" 
                                        Label="Type"
                                        IsRequired="true">
                            <option value="">Select Type</option>
                            <option value="Safety Concern">Safety Concern</option>
                            <option value="Consent Violation">Consent Violation</option>
                            <option value="Harassment">Harassment</option>
                            <option value="Equipment Issue">Equipment Issue</option>
                            <option value="Medical Incident">Medical Incident</option>
                            <option value="Other">Other</option>
                        </WcrInputSelect>
                    </div>

                    <div class="form-row">
                        <WcrInputSelect @bind-Value="IncidentForm.Severity" 
                                        Label="Severity"
                                        IsRequired="true">
                            <option value="Low">Low</option>
                            <option value="Medium">Medium</option>
                            <option value="High">High</option>
                            <option value="Critical">Critical</option>
                        </WcrInputSelect>

                        <WcrInputDate @bind-Value="IncidentForm.IncidentDate" 
                                      Label="Date/Time of Incident"
                                      DateType="WcrDateInputType.DateTimeLocal"
                                      Max="DateTime.Now"
                                      IsRequired="true" />
                    </div>

                    <WcrInputTextArea @bind-Value="IncidentForm.Description" 
                                      Label="Description"
                                      Placeholder="Provide a detailed description of what happened"
                                      Rows="5"
                                      IsRequired="true" />

                    <WcrInputText @bind-Value="IncidentForm.Location" 
                                  Label="Location"
                                  Placeholder="Where did this incident occur?" />

                    <WcrInputText @bind-Value="IncidentForm.InvolvedParties" 
                                  Label="Involved Parties"
                                  Placeholder="Names or descriptions of people involved" />

                    <WcrInputTextArea @bind-Value="IncidentForm.Evidence" 
                                      Label="Evidence/Attachments"
                                      Placeholder="Describe any evidence or list attachment filenames"
                                      Rows="3" />

                    <WcrInputCheckbox @bind-Value="IncidentForm.IsAnonymous" 
                                      Label="Submit as anonymous report" />

                    <WcrValidationSummary />
                </div>

                <div class="modal-actions">
                    <button type="submit" class="wcr-button wcr-button-primary" disabled="@IsProcessing">
                        @if (IsProcessing)
                        {
                            <span class="spinner-border spinner-border-sm mr-2"></span>
                            <span>Creating...</span>
                        }
                        else
                        {
                            <span>Create Incident</span>
                        }
                    </button>
                    <button type="button" class="wcr-button wcr-button-secondary" @onclick="CloseModal">Cancel</button>
                </div>
            </EditForm>
        </div>
    </div>
}

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1050;
        opacity: 0;
        animation: fadeIn 0.3s forwards;
    }

    .modal-visible {
        opacity: 1;
    }

    .modal-content {
        background: white;
        border-radius: var(--wcr-radius-lg);
        box-shadow: var(--wcr-shadow-xl);
        max-width: 90%;
        max-height: 90vh;
        overflow: auto;
        transform: scale(0.9);
        animation: scaleIn 0.3s forwards;
    }

    .modal-large {
        width: 800px;
    }

    .modal-header {
        padding: var(--wcr-space-lg);
        border-bottom: 1px solid var(--wcr-color-taupe);
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: var(--wcr-color-cream);
        border-radius: var(--wcr-radius-lg) var(--wcr-radius-lg) 0 0;
    }

    .modal-title {
        margin: 0;
        font-family: var(--wcr-font-heading);
        font-size: 24px;
        color: var(--wcr-color-burgundy);
    }

    .modal-close {
        background: none;
        border: none;
        font-size: 28px;
        line-height: 1;
        color: var(--wcr-color-stone);
        cursor: pointer;
        padding: 0;
        width: 32px;
        height: 32px;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: var(--wcr-radius-sm);
        transition: all 0.2s ease;
    }

    .modal-close:hover {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .modal-body {
        padding: var(--wcr-space-xl);
    }

    .form-row {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: var(--wcr-space-lg);
        margin-bottom: var(--wcr-space-lg);
    }

    @@media (max-width: 768px) {
        .form-row {
            grid-template-columns: 1fr;
        }
    }

    .modal-actions {
        padding: var(--wcr-space-lg) var(--wcr-space-xl);
        border-top: 1px solid var(--wcr-color-taupe);
        display: flex;
        gap: var(--wcr-space-md);
        justify-content: flex-end;
        background: var(--wcr-color-cream);
        border-radius: 0 0 var(--wcr-radius-lg) var(--wcr-radius-lg);
    }

    .wcr-button {
        display: inline-flex;
        align-items: center;
        gap: var(--wcr-space-sm);
        padding: var(--wcr-space-sm) var(--wcr-space-lg);
        border: none;
        border-radius: var(--wcr-radius-sm);
        font-family: var(--wcr-font-heading);
        font-weight: 600;
        font-size: 16px;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.3s ease;
    }

    .wcr-button-primary {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .wcr-button-primary:hover:not(:disabled) {
        background: var(--wcr-color-burgundy-dark);
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(139, 0, 0, 0.3);
    }

    .wcr-button-primary:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .wcr-button-secondary {
        background: transparent;
        color: var(--wcr-color-stone);
        border: 2px solid var(--wcr-color-taupe);
    }

    .wcr-button-secondary:hover {
        background: var(--wcr-color-taupe);
        color: white;
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes fadeIn {
        to {
            opacity: 1;
        }
    }

    @@keyframes scaleIn {
        to {
            transform: scale(1);
        }
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<IncidentFormModel> OnIncidentCreated { get; set; }

    private IncidentFormModel IncidentForm = new();
    private bool IsProcessing = false;

    protected override void OnParametersSet()
    {
        if (IsVisible)
        {
            // Reset form when modal opens
            IncidentForm = new IncidentFormModel
            {
                IncidentDate = DateTime.Now,
                Severity = "Medium"
            };
        }
    }

    private async Task HandleSubmit()
    {
        IsProcessing = true;
        StateHasChanged();

        try
        {
            // Notify parent component
            await OnIncidentCreated.InvokeAsync(IncidentForm);
            
            // Close modal
            await CloseModal();
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged();
        }
    }

    private async Task CloseModal()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    public class IncidentFormModel
    {
        [Required(ErrorMessage = "Title is required")]
        [StringLength(200, ErrorMessage = "Title must not exceed 200 characters")]
        public string Title { get; set; } = "";
        
        [Required(ErrorMessage = "Please select an incident type")]
        public string Type { get; set; } = "";
        
        [Required(ErrorMessage = "Please select severity level")]
        public string Severity { get; set; } = "Medium";
        
        [Required(ErrorMessage = "Incident date/time is required")]
        public DateTime? IncidentDate { get; set; } = DateTime.Now;
        
        [Required(ErrorMessage = "Description is required")]
        [StringLength(2000, MinimumLength = 10, ErrorMessage = "Description must be between 10 and 2000 characters")]
        public string Description { get; set; } = "";
        
        [StringLength(100, ErrorMessage = "Location must not exceed 100 characters")]
        public string? Location { get; set; }
        
        [StringLength(500, ErrorMessage = "Involved parties must not exceed 500 characters")]
        public string? InvolvedParties { get; set; }
        
        [StringLength(1000, ErrorMessage = "Evidence description must not exceed 1000 characters")]
        public string? Evidence { get; set; }
        
        public bool IsAnonymous { get; set; }
    }
}