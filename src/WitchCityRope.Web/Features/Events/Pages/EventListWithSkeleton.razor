@page "/events-skeleton-example"
@using WitchCityRope.Web.Shared.Components.UI
@using WitchCityRope.Web.Features.Events.Components
@inject IJSRuntime JSRuntime

<h1>Events</h1>
<p>Example of using skeleton loader while fetching event data.</p>

<div class="controls">
    <button class="btn btn-primary" @onclick="ReloadData">Reload Data</button>
    <label>
        <input type="checkbox" @bind="simulateSlowLoad" />
        Simulate slow loading (3 seconds)
    </label>
</div>

@if (isLoading)
{
    <div class="events-grid">
        <SkeletonLoader Type="SkeletonLoader.SkeletonType.Card" Count="6" />
    </div>
}
else if (events.Any())
{
    <div class="events-grid fade-in">
        @foreach (var evt in events)
        {
            <div class="event-card">
                <div class="event-card-header" style="background-color: @GetRandomColor()">
                    <h3>@evt.Title</h3>
                </div>
                <div class="event-card-body">
                    <p class="event-date">@evt.Date.ToString("MMMM dd, yyyy")</p>
                    <p class="event-description">@evt.Description</p>
                    <div class="event-meta">
                        <span class="event-location">@evt.Location</span>
                        <span class="event-price">$@evt.Price</span>
                    </div>
                </div>
                <div class="event-card-footer">
                    <button class="btn btn-secondary">View Details</button>
                </div>
            </div>
        }
    </div>
}
else
{
    <div class="no-events">
        <p>No events found.</p>
    </div>
}

@code {
    private bool isLoading = true;
    private bool simulateSlowLoad = false;
    private List<EventItem> events = new();
    private Random random = new Random();

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        isLoading = true;
        StateHasChanged();

        // Simulate API call delay
        var delay = simulateSlowLoad ? 3000 : 1000;
        await Task.Delay(delay);

        // Generate mock data
        events = GenerateMockEvents();
        
        isLoading = false;
        StateHasChanged();
    }

    private async Task ReloadData()
    {
        await LoadEvents();
    }

    private List<EventItem> GenerateMockEvents()
    {
        var mockEvents = new List<EventItem>
        {
            new EventItem 
            { 
                Id = 1, 
                Title = "Full Moon Rope Jam", 
                Date = DateTime.Now.AddDays(7), 
                Description = "Join us for an enchanting evening of rope under the full moon.",
                Location = "Salem Common",
                Price = 25
            },
            new EventItem 
            { 
                Id = 2, 
                Title = "Beginner's Bondage Workshop", 
                Date = DateTime.Now.AddDays(14), 
                Description = "Learn the basics of rope bondage in a safe, welcoming environment.",
                Location = "WCR Studio",
                Price = 45
            },
            new EventItem 
            { 
                Id = 3, 
                Title = "Advanced Suspension Techniques", 
                Date = DateTime.Now.AddDays(21), 
                Description = "Master advanced suspension skills with experienced instructors.",
                Location = "WCR Studio",
                Price = 75
            },
            new EventItem 
            { 
                Id = 4, 
                Title = "Rope & Wine Social", 
                Date = DateTime.Now.AddDays(10), 
                Description = "Casual rope practice with wine and conversation.",
                Location = "The Cauldron Bar",
                Price = 30
            },
            new EventItem 
            { 
                Id = 5, 
                Title = "Shibari Performance Night", 
                Date = DateTime.Now.AddDays(28), 
                Description = "Witness beautiful rope art performances by local artists.",
                Location = "Salem Theatre",
                Price = 20
            },
            new EventItem 
            { 
                Id = 6, 
                Title = "Self-Tie Sunday", 
                Date = DateTime.Now.AddDays(3), 
                Description = "Learn self-tying techniques for personal practice.",
                Location = "WCR Studio",
                Price = 35
            }
        };

        return mockEvents;
    }

    private string GetRandomColor()
    {
        var colors = new[] 
        { 
            "var(--wcr-burgundy)", 
            "var(--wcr-plum)", 
            "var(--wcr-electric)", 
            "var(--wcr-rose-gold)",
            "var(--wcr-copper)"
        };
        return colors[random.Next(colors.Length)];
    }

    private class EventItem
    {
        public int Id { get; set; }
        public string Title { get; set; } = "";
        public DateTime Date { get; set; }
        public string Description { get; set; } = "";
        public string Location { get; set; } = "";
        public decimal Price { get; set; }
    }
}

<style>
    .controls {
        display: flex;
        gap: 1rem;
        align-items: center;
        margin-bottom: 2rem;
        padding: 1rem;
        background-color: var(--wcr-cream);
        border-radius: var(--wcr-radius-md);
    }

    .controls label {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        color: var(--wcr-charcoal);
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: var(--wcr-radius-sm);
        font-weight: 600;
        text-transform: uppercase;
        letter-spacing: 1px;
        cursor: pointer;
        transition: all var(--wcr-transition-base);
    }

    .btn-primary {
        background: var(--wcr-gradient-primary);
        color: var(--wcr-midnight);
    }

    .btn-primary:hover {
        background: var(--wcr-gradient-primary-hover);
        transform: translateY(-2px);
    }

    .btn-secondary {
        background: transparent;
        color: var(--wcr-burgundy);
        border: 2px solid var(--wcr-burgundy);
        padding: 0.5rem 1rem;
        font-size: 0.875rem;
    }

    .btn-secondary:hover {
        background: var(--wcr-burgundy);
        color: var(--wcr-ivory);
    }

    .events-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 1.5rem;
        margin-top: 2rem;
    }

    .event-card {
        background-color: var(--wcr-ivory);
        border-radius: var(--wcr-radius-lg);
        overflow: hidden;
        box-shadow: var(--wcr-shadow-md);
        transition: all var(--wcr-transition-base);
    }

    .event-card:hover {
        transform: translateY(-4px);
        box-shadow: var(--wcr-shadow-xl);
    }

    .event-card-header {
        padding: 2rem;
        color: var(--wcr-ivory);
        position: relative;
        overflow: hidden;
    }

    .event-card-header::after {
        content: '';
        position: absolute;
        bottom: 0;
        left: 0;
        right: 0;
        height: 4px;
        background: linear-gradient(to right, var(--wcr-amber), var(--wcr-amber-dark));
    }

    .event-card-header h3 {
        margin: 0;
        font-size: 1.5rem;
        font-weight: 600;
    }

    .event-card-body {
        padding: 1.5rem;
    }

    .event-date {
        color: var(--wcr-electric);
        font-weight: 600;
        margin-bottom: 0.5rem;
    }

    .event-description {
        color: var(--wcr-charcoal);
        margin-bottom: 1rem;
        line-height: 1.6;
    }

    .event-meta {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-top: 1rem;
        border-top: 1px solid var(--wcr-taupe);
    }

    .event-location {
        color: var(--wcr-stone);
        font-size: 0.875rem;
    }

    .event-price {
        color: var(--wcr-burgundy);
        font-weight: 600;
        font-size: 1.25rem;
    }

    .event-card-footer {
        padding: 1rem 1.5rem;
        background-color: var(--wcr-cream);
        text-align: center;
    }

    .no-events {
        text-align: center;
        padding: 4rem;
        color: var(--wcr-stone);
    }

    .fade-in {
        animation: fadeIn var(--wcr-transition-base);
    }

    @keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }
        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @media (max-width: 768px) {
        .controls {
            flex-direction: column;
            align-items: stretch;
        }

        .events-grid {
            grid-template-columns: 1fr;
        }
    }
</style>