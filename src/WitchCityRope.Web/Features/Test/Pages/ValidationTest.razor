@page "/test/validation"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using WitchCityRope.Web.Shared.Validation.Components
@using System.ComponentModel.DataAnnotations

<PageTitle>Validation Components Test - Witch City Rope</PageTitle>

<div class="container mt-4">
    <h1>Validation Components Test Suite</h1>
    <p class="text-muted">Testing all validation components with various scenarios</p>

    <div class="row">
        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Test Form</h3>
                </div>
                <div class="card-body">
                    <EditForm Model="testModel" OnValidSubmit="HandleValidSubmit" OnInvalidSubmit="HandleInvalidSubmit">
                        <DataAnnotationsValidator />
                        
                        <h4>Text Input</h4>
                        <WcrInputText @bind-Value="testModel.Name" 
                                      Label="Name" 
                                      Placeholder="Enter your name"
                                      IsRequired="true" />

                        <h4>Email Input</h4>
                        <WcrInputEmail @bind-Value="testModel.Email" 
                                       Label="Email Address"
                                       Placeholder="your@email.com"
                                       IsRequired="true"
                                       CheckUniqueness="true" />

                        <h4>Password Input</h4>
                        <WcrInputPassword @bind-Value="testModel.Password"
                                          Label="Password"
                                          Placeholder="Enter password"
                                          ShowRequirements="true"
                                          IsRequired="true" />

                        <h4>Select Input</h4>
                        <WcrInputSelect @bind-Value="testModel.Role"
                                        Label="Role"
                                        IsRequired="true">
                            <option value="">-- Select Role --</option>
                            <option value="Member">Member</option>
                            <option value="Organizer">Organizer</option>
                            <option value="Administrator">Administrator</option>
                        </WcrInputSelect>

                        <h4>TextArea Input</h4>
                        <WcrInputTextArea @bind-Value="testModel.Bio"
                                          Label="Bio"
                                          Placeholder="Tell us about yourself"
                                          Rows="4" />

                        <h4>Number Input</h4>
                        <WcrInputNumber TValue="int" @bind-Value="testModel.Age"
                                        Label="Age"
                                        Min="21"
                                        Max="100"
                                        IsRequired="true"
                                        data-testid="age-input" />

                        <h4>Date Input</h4>
                        <WcrInputDate TValue="DateTime" @bind-Value="testModel.BirthDate"
                                      Label="Birth Date"
                                      Max="@DateTime.Today.AddYears(-21)"
                                      IsRequired="true"
                                      data-testid="birthdate-input" />

                        <h4>Checkbox Input</h4>
                        <WcrInputCheckbox @bind-Value="testModel.AgreeToTerms"
                                          Label="I agree to the terms and conditions"
                                          IsRequired="true" />

                        <h4>Radio Input</h4>
                        <WcrInputRadio TValue="string" @bind-Value="testModel.MembershipType"
                                       Label="Membership Type"
                                       Options="membershipTypes"
                                       Orientation="horizontal"
                                       IsRequired="true" />

                        <WcrValidationSummary />

                        <div class="mt-4">
                            <button type="submit" class="btn btn-primary">Submit Form</button>
                            <button type="button" class="btn btn-secondary ms-2" @onclick="ResetForm">Reset</button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>

        <div class="col-md-6">
            <div class="card mb-4">
                <div class="card-header">
                    <h3>Form State</h3>
                </div>
                <div class="card-body">
                    <h4>Current Values:</h4>
                    <pre>@System.Text.Json.JsonSerializer.Serialize(testModel, jsonOptions)</pre>

                    <h4>Validation State:</h4>
                    <div class="alert @(isValid ? "alert-success" : "alert-danger")">
                        Form is @(isValid ? "VALID" : "INVALID")
                    </div>

                    <h4>Submission Results:</h4>
                    @if (!string.IsNullOrEmpty(submissionResult))
                    {
                        <div class="alert alert-info">
                            @submissionResult
                        </div>
                    }
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <h3>Test Scenarios</h3>
                </div>
                <div class="card-body">
                    <button class="btn btn-sm btn-outline-primary me-2 mb-2" @onclick="LoadValidData">Load Valid Data</button>
                    <button class="btn btn-sm btn-outline-primary me-2 mb-2" @onclick="LoadInvalidData">Load Invalid Data</button>
                    <button class="btn btn-sm btn-outline-primary me-2 mb-2" @onclick="LoadPartialData">Load Partial Data</button>
                    <button class="btn btn-sm btn-outline-primary me-2 mb-2" @onclick="TestEmailUniqueness">Test Email Uniqueness</button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private TestModel testModel = new();
    private bool isValid = false;
    private string submissionResult = string.Empty;
    private List<string> membershipTypes = new() { "Basic", "Premium", "VIP" };

    private System.Text.Json.JsonSerializerOptions jsonOptions = new()
    {
        WriteIndented = true
    };

    public class TestModel
    {
        [Required(ErrorMessage = "Name is required")]
        [StringLength(50, ErrorMessage = "Name must not exceed 50 characters")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be between 8 and 100 characters")]
        public string Password { get; set; } = string.Empty;

        [Required(ErrorMessage = "Role is required")]
        public string Role { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Bio must not exceed 500 characters")]
        public string? Bio { get; set; }

        [Required(ErrorMessage = "Age is required")]
        [Range(21, 100, ErrorMessage = "Age must be between 21 and 100")]
        public int Age { get; set; } = 21;

        [Required(ErrorMessage = "Birth date is required")]
        public DateTime BirthDate { get; set; } = DateTime.Today.AddYears(-25);

        [Required(ErrorMessage = "You must agree to the terms")]
        [Range(typeof(bool), "true", "true", ErrorMessage = "You must agree to the terms")]
        public bool AgreeToTerms { get; set; }

        [Required(ErrorMessage = "Membership type is required")]
        public string MembershipType { get; set; } = string.Empty;
    }

    private void HandleValidSubmit()
    {
        isValid = true;
        submissionResult = $"Form submitted successfully at {DateTime.Now:HH:mm:ss}!";
    }

    private void HandleInvalidSubmit()
    {
        isValid = false;
        submissionResult = $"Form submission failed at {DateTime.Now:HH:mm:ss} - please fix validation errors.";
    }

    private void ResetForm()
    {
        testModel = new TestModel();
        submissionResult = string.Empty;
        isValid = false;
    }

    private void LoadValidData()
    {
        testModel = new TestModel
        {
            Name = "John Doe",
            Email = "john.doe@example.com",
            Password = "SecurePass123!",
            Role = "Member",
            Bio = "I'm a rope enthusiast with 5 years of experience.",
            Age = 30,
            BirthDate = DateTime.Today.AddYears(-30),
            AgreeToTerms = true,
            MembershipType = "Premium"
        };
    }

    private void LoadInvalidData()
    {
        testModel = new TestModel
        {
            Name = "", // Required but empty
            Email = "invalid-email", // Invalid format
            Password = "short", // Too short
            Role = "", // Required but empty
            Bio = new string('A', 501), // Too long
            Age = 15, // Too young
            BirthDate = DateTime.Today.AddYears(-15), // Too young
            AgreeToTerms = false, // Must be true
            MembershipType = "" // Required but empty
        };
    }

    private void LoadPartialData()
    {
        testModel = new TestModel
        {
            Name = "Jane Smith",
            Email = "jane@example.com",
            Password = "", // Missing required field
            Role = "Organizer",
            Bio = null,
            Age = 25,
            BirthDate = DateTime.Today.AddYears(-25),
            AgreeToTerms = false, // Not agreed
            MembershipType = "Basic"
        };
    }

    private void TestEmailUniqueness()
    {
        // This will trigger the uniqueness check with a known email
        testModel.Email = "admin@witchcityrope.com";
    }
}