@using WitchCityRope.Core.Enums
@using WitchCityRope.Core.DTOs
@using WitchCityRope.Web.Services
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.DropDowns
@using System.ComponentModel.DataAnnotations

@inject ApiClient ApiClient
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<SfDialog @ref="Dialog" Width="600px" Height="auto" IsModal="true" ShowCloseIcon="true" @bind-Visible="@IsVisible">
    <DialogTemplates>
        <Header>
            <div class="dialog-header">
                <h3>@(IsSocialEvent ? "RSVP for Event" : "Register for Event")</h3>
            </div>
        </Header>
        <Content>
            @if (Event != null)
            {
                <div class="registration-form">
                    <div class="event-summary">
                        <h4>@Event.Name</h4>
                        <p class="event-details">
                            <strong>Date:</strong> @Event.StartDateTime.ToString("MMMM dd, yyyy")<br />
                            <strong>Time:</strong> @Event.StartDateTime.ToString("h:mm tt") - @Event.EndDateTime.ToString("h:mm tt")<br />
                            <strong>Location:</strong> @Event.Location
                        </p>
                    </div>

                    <EditForm Model="@RegistrationModel" OnValidSubmit="@HandleRegistration">
                        <DataAnnotationsValidator />
                        
                        @if (!IsSocialEvent && Event.Price > 0)
                        {
                            <div class="form-group">
                                <label>Select Price (Sliding Scale):</label>
                                <div class="price-options">
                                    <label class="price-option">
                                        <input type="radio" name="price" value="@Event.Price" checked="@(RegistrationModel.SelectedPrice == Event.Price)" @onchange="@(() => RegistrationModel.SelectedPrice = Event.Price)" />
                                        <span>$@Event.Price - Standard</span>
                                    </label>
                                    @if (Event.Price > 35)
                                    {
                                        <label class="price-option">
                                            <input type="radio" name="price" value="@(Event.Price - 10)" checked="@(RegistrationModel.SelectedPrice == Event.Price - 10)" @onchange="@(() => RegistrationModel.SelectedPrice = Event.Price - 10)" />
                                            <span>$@(Event.Price - 10) - If helpful</span>
                                        </label>
                                    }
                                    <label class="price-option">
                                        <input type="radio" name="price" value="35" checked="@(RegistrationModel.SelectedPrice == 35)" @onchange="@(() => RegistrationModel.SelectedPrice = 35)" />
                                        <span>$35 - Minimum</span>
                                    </label>
                                </div>
                            </div>
                        }

                        <div class="form-group">
                            <label for="dietary">Dietary Restrictions:</label>
                            <SfTextBox @bind-Value="@RegistrationModel.DietaryRestrictions" 
                                      Placeholder="e.g., Vegetarian, Gluten-free, Nut allergy"
                                      id="dietary" />
                        </div>

                        <div class="form-group">
                            <label for="accessibility">Accessibility Needs:</label>
                            <SfTextBox @bind-Value="@RegistrationModel.AccessibilityNeeds" 
                                      Placeholder="e.g., Wheelchair access, ASL interpreter"
                                      id="accessibility" />
                        </div>

                        <div class="form-group">
                            <label for="emergency-name">Emergency Contact Name: <span class="required">*</span></label>
                            <SfTextBox @bind-Value="@RegistrationModel.EmergencyContactName" 
                                      Placeholder="Full name"
                                      id="emergency-name" />
                            <ValidationMessage For="@(() => RegistrationModel.EmergencyContactName)" />
                        </div>

                        <div class="form-group">
                            <label for="emergency-phone">Emergency Contact Phone: <span class="required">*</span></label>
                            <SfTextBox @bind-Value="@RegistrationModel.EmergencyContactPhone" 
                                      Placeholder="(555) 123-4567"
                                      id="emergency-phone" />
                            <ValidationMessage For="@(() => RegistrationModel.EmergencyContactPhone)" />
                        </div>

                        @if (!IsSocialEvent && Event.Price > 0)
                        {
                            <div class="payment-notice">
                                <p><strong>Payment Required:</strong> You will be charged $@RegistrationModel.SelectedPrice upon registration.</p>
                                <p class="payment-stub-notice">*Payment processing is currently in test mode*</p>
                            </div>
                        }

                        @if (ErrorMessage != null)
                        {
                            <div class="alert alert-danger">@ErrorMessage</div>
                        }

                        <div class="form-actions">
                            <SfButton CssClass="e-primary" Type="ButtonType.Submit" Disabled="@IsProcessing">
                                @if (IsProcessing)
                                {
                                    <span class="spinner-border spinner-border-sm mr-2"></span>
                                    <span>Processing...</span>
                                }
                                else if (IsSocialEvent)
                                {
                                    <span>RSVP for Event</span>
                                }
                                else
                                {
                                    <span>Register & Pay</span>
                                }
                            </SfButton>
                            <SfButton CssClass="e-outline" @onclick="@CloseDialog">Cancel</SfButton>
                        </div>
                    </EditForm>
                </div>
            }
        </Content>
    </DialogTemplates>
</SfDialog>

@code {
    [Parameter] public Core.DTOs.EventDto? Event { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<RegistrationResult> OnRegistrationComplete { get; set; }

    private SfDialog? Dialog;
    private RegistrationFormModel RegistrationModel = new();
    private bool IsProcessing = false;
    private string? ErrorMessage;
    private bool IsSocialEvent => Event?.EventType == Core.Enums.EventType.Social.ToString() || Event?.EventType == Core.Enums.EventType.PlayParty.ToString();

    protected override void OnParametersSet()
    {
        if (Event != null && IsVisible)
        {
            // Initialize the form model
            RegistrationModel = new RegistrationFormModel
            {
                EventId = Event.Id,
                SelectedPrice = Event.Price
            };
            ErrorMessage = null;
        }
    }

    private async Task HandleRegistration()
    {
        IsProcessing = true;
        ErrorMessage = null;
        StateHasChanged(); // Force UI update

        try
        {
            Console.WriteLine($"Starting registration for event: {Event!.Id}");
            
            var request = new RegisterForEventRequest
            {
                EventId = Event!.Id,
                DietaryRestrictions = RegistrationModel.DietaryRestrictions,
                AccessibilityNeeds = RegistrationModel.AccessibilityNeeds,
                EmergencyContactName = RegistrationModel.EmergencyContactName,
                EmergencyContactPhone = RegistrationModel.EmergencyContactPhone,
                SelectedPriceId = (int)RegistrationModel.SelectedPrice, // Converting decimal price to int ID
                PaymentMethod = "Cash" // Cash payment for stub
            };
            
            Console.WriteLine($"Sending registration request for price: ${RegistrationModel.SelectedPrice}");
            var response = await ApiClient.RegisterForEventAsync(Event.Id);
            Console.WriteLine($"Registration response received: Success={response.Success}, Message={response.Message}");

            if (response.Success)
            {
                await OnRegistrationComplete.InvokeAsync(new RegistrationResult
                {
                    Success = true,
                    ConfirmationCode = response.ConfirmationCode,
                    Status = response.Status,
                    Message = response.Message ?? (IsSocialEvent ? "RSVP confirmed!" : "Registration confirmed!")
                });
                await CloseDialog();
            }
            else
            {
                ErrorMessage = response.Message ?? "Registration failed. Please try again.";
                StateHasChanged(); // Force UI update to show error
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"An error occurred: {ex.Message}";
            Console.Error.WriteLine($"Registration error: {ex}");
            StateHasChanged(); // Force UI update to show error
        }
        finally
        {
            IsProcessing = false;
            StateHasChanged(); // Force UI update
        }
    }

    private async Task CloseDialog()
    {
        IsVisible = false;
        await IsVisibleChanged.InvokeAsync(false);
    }

    public class RegistrationFormModel
    {
        public Guid EventId { get; set; }
        public decimal SelectedPrice { get; set; }
        public string? DietaryRestrictions { get; set; }
        public string? AccessibilityNeeds { get; set; }
        
        [Required(ErrorMessage = "Emergency contact name is required")]
        public string EmergencyContactName { get; set; } = string.Empty;
        
        [Required(ErrorMessage = "Emergency contact phone is required")]
        [Phone(ErrorMessage = "Please enter a valid phone number")]
        public string EmergencyContactPhone { get; set; } = string.Empty;
    }

    public class RegistrationResult
    {
        public bool Success { get; set; }
        public string? ConfirmationCode { get; set; }
        public string? Status { get; set; }
        public string? Message { get; set; }
    }
}

<style>
    .dialog-header h3 {
        margin: 0;
        font-size: 1.5rem;
        color: var(--primary-color);
    }

    .registration-form {
        padding: 1rem 0;
    }

    .event-summary {
        background-color: var(--bg-secondary);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .event-summary h4 {
        margin: 0 0 0.5rem 0;
        color: var(--primary-color);
    }

    .event-details {
        margin: 0;
        line-height: 1.6;
    }

    .form-group {
        margin-bottom: 1.5rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        font-weight: 600;
        color: var(--text-primary);
    }

    .required {
        color: var(--danger-color);
    }

    .price-options {
        display: flex;
        flex-direction: column;
        gap: 0.75rem;
        margin-top: 0.5rem;
    }

    .price-options .e-radio-wrapper {
        margin-bottom: 0;
    }

    .payment-notice {
        background-color: var(--info-bg);
        border: 1px solid var(--info-border);
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 1.5rem;
    }

    .payment-notice p {
        margin: 0 0 0.5rem 0;
    }

    .payment-notice p:last-child {
        margin-bottom: 0;
    }

    .payment-stub-notice {
        font-style: italic;
        color: var(--text-secondary);
        font-size: 0.9rem;
    }

    .form-actions {
        display: flex;
        gap: 1rem;
        justify-content: flex-end;
        margin-top: 2rem;
    }

    .alert {
        padding: 0.75rem 1rem;
        border-radius: 0.25rem;
        margin-bottom: 1rem;
    }

    .alert-danger {
        background-color: var(--danger-bg);
        color: var(--danger-color);
        border: 1px solid var(--danger-border);
    }

    .spinner-border {
        display: inline-block;
        width: 1rem;
        height: 1rem;
        vertical-align: text-bottom;
        border: 0.15em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to { transform: rotate(360deg); }
    }
</style>