@page "/member/dashboard"
@using WitchCityRope.Web.Services
@using WitchCityRope.Web.Features.Members.Components
@using WitchCityRope.Web.Shared.Layouts
@using Microsoft.AspNetCore.Authorization
@inject IDashboardService DashboardService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IToastService ToastService
@inject ILogger<Dashboard> Logger
@attribute [Authorize]
@layout MainLayout
@implements IDisposable

<PageTitle>Dashboard - WitchCity Rope</PageTitle>


@if (IsLoading)
{
    <DashboardSkeleton />
}
else if (HasError)
{
    <DashboardError ErrorMessage="@ErrorMessage" OnRetry="@LoadDashboardData" />
}
else if (DashboardData != null)
{
    <div class="dashboard-container">
        <CascadingValue Value="DashboardData">
            <DashboardHeader />
            
            <div class="dashboard-grid">
                <div class="dashboard-main">
                    <UpcomingEvents Events="@DashboardData.UpcomingEvents" />
                    
                    @if (DashboardData.Role == WitchCityRope.Core.Enums.UserRole.Administrator)
                    {
                        <AdminQuickAccess />
                    }
                </div>
                
                <div class="dashboard-sidebar">
                    <MembershipStatus Stats="@DashboardData.Stats" />
                    <QuickLinks Role="@DashboardData.Role" />
                </div>
            </div>
        </CascadingValue>
    </div>
}

<style>
    .dashboard-container {
        max-width: 1320px;
        margin: 0 auto;
        padding: var(--wcr-space-lg);
    }
    
    .dashboard-grid {
        display: grid;
        grid-template-columns: 1fr;
        gap: var(--wcr-space-lg);
        margin-top: var(--wcr-space-xl);
    }
    
    .dashboard-main {
        display: flex;
        flex-direction: column;
        gap: var(--wcr-space-lg);
    }
    
    .dashboard-sidebar {
        display: flex;
        flex-direction: column;
        gap: var(--wcr-space-lg);
    }
    
    /* Tablet - 768px */
    @@media (min-width: 768px) {
        .dashboard-grid {
            gap: var(--wcr-space-xl);
        }
    }
    
    /* Desktop - 1024px */
    @@media (min-width: 1024px) {
        .dashboard-grid {
            grid-template-columns: 2fr 1fr;
        }
    }
    
    /* Large desktop - 1440px */
    @@media (min-width: 1440px) {
        .dashboard-container {
            max-width: 1320px;
        }
    }
</style>

@code {
    private DashboardViewModel? DashboardData { get; set; }
    private bool IsLoading { get; set; } = true;
    private bool HasError { get; set; }
    private string? ErrorMessage { get; set; }
    
    private CancellationTokenSource? _cancellationTokenSource;
    private Timer? _refreshTimer;
    
    protected override async Task OnInitializedAsync()
    {
        Logger.LogInformation("Dashboard OnInitializedAsync started");
        // Set up timer but don't load data yet
        _refreshTimer = new Timer(async _ => await RefreshData(), null, 
            Timeout.Infinite, Timeout.Infinite);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Logger.LogInformation("Dashboard OnAfterRenderAsync - first render, loading data");
            
            // Load dashboard data after the component has been rendered
            // This ensures JavaScript interop is available for localStorage access
            await LoadDashboardData();
            
            // Start the refresh timer
            _refreshTimer?.Change(TimeSpan.FromMinutes(5), TimeSpan.FromMinutes(5));
        }
    }
    
    private async Task LoadDashboardData()
    {
        try
        {
            Logger.LogInformation("LoadDashboardData started");
            IsLoading = true;
            HasError = false;
            ErrorMessage = null;
            
            _cancellationTokenSource?.Cancel();
            _cancellationTokenSource = new CancellationTokenSource();
            
            Logger.LogInformation("Getting current user from AuthService");
            var currentUser = await AuthService.GetCurrentUserAsync();
            if (currentUser == null)
            {
                // Don't redirect during loading or if we haven't rendered yet
                // The [Authorize] attribute will handle the redirect
                Logger.LogWarning("Current user is null in Dashboard");
                HasError = true;
                ErrorMessage = "Unable to load user information. Please try logging in again.";
                IsLoading = false;
                await InvokeAsync(StateHasChanged);
                return;
            }
            
            Logger.LogInformation("Current user found: {UserId}, loading dashboard data", currentUser.Id);
            DashboardData = await DashboardService.GetDashboardDataAsync(
                currentUser.Id, _cancellationTokenSource.Token);
                
            Logger.LogInformation("Dashboard loaded successfully for user {UserId}", currentUser.Id);
        }
        catch (OperationCanceledException)
        {
            // Request was cancelled, ignore
            Logger.LogInformation("Dashboard load was cancelled");
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading dashboard");
            HasError = true;
            ErrorMessage = "Unable to load dashboard. Please try again.";
            ToastService.ShowError(ErrorMessage);
        }
        finally
        {
            IsLoading = false;
            Logger.LogInformation("LoadDashboardData completed, IsLoading = false");
            await InvokeAsync(StateHasChanged);
        }
    }
    
    private async Task RefreshData()
    {
        await InvokeAsync(async () =>
        {
            await LoadDashboardData();
        });
    }
    
    public void Dispose()
    {
        _cancellationTokenSource?.Cancel();
        _cancellationTokenSource?.Dispose();
        _refreshTimer?.Dispose();
    }
}