@page "/dashboard"
@using WitchCityRope.Web.Services
@using WitchCityRope.Web.Shared.Layouts
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Navigations
@using Microsoft.AspNetCore.Authorization
@inject IUserService UserService
@inject IEventService EventService
@inject IRegistrationService RegistrationService
@inject IVettingService VettingService
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IToastService ToastService
@attribute [Authorize]
@layout MainLayout

@* Member dashboard showing personalized content and quick actions *@

<div class="dashboard-container">
    @* Welcome Section *@
    <section class="welcome-section">
        <div class="welcome-content">
            <h1 class="welcome-title">Welcome back, @userProfile?.SceneName!</h1>
            <p class="welcome-subtitle">Here's what's happening in your rope journey</p>
            <div class="quick-actions">
                <SfButton CssClass="e-primary" OnClick="@(() => Navigation.NavigateTo("/events"))">
                    Browse Events
                </SfButton>
                <SfButton CssClass="e-outline" OnClick="@(() => Navigation.NavigateTo("/profile"))">
                    Update Profile
                </SfButton>
            </div>
        </div>
    </section>

    <div class="dashboard-grid">
        @* Quick Stats *@
        <div class="dashboard-section stats-section">
            <h2 class="section-title">Your Activity</h2>
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-value">@upcomingEventsCount</div>
                    <div class="stat-label">Upcoming Events</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@pastEventsCount</div>
                    <div class="stat-label">Events Attended</div>
                </div>
                <div class="stat-card">
                    <div class="stat-value">@memberSinceDays</div>
                    <div class="stat-label">Days as Member</div>
                </div>
                <div class="stat-card @GetVettingStatusClass()">
                    <div class="stat-value">@vettingStatus?.Status</div>
                    <div class="stat-label">Vetting Status</div>
                </div>
            </div>
        </div>

        @* Upcoming Events *@
        <div class="card">
            <div class="card-header">
                <h2 class="card-title">Your Upcoming Events</h2>
                <a href="/my-tickets" class="card-link">View All</a>
            </div>
            
            @if (isLoadingEvents)
            {
                <div class="loading-spinner">
                    <div class="e-spinner-pane">
                        <div class="e-spinner-inner">
                            <div class="e-spin-material"></div>
                        </div>
                    </div>
                </div>
            }
            else if (upcomingRegistrations?.Any() == true)
            {
                <div class="event-list">
                    @foreach (var registration in upcomingRegistrations.Take(3))
                    {
                        <div class="event-item" @onclick="@(() => ViewEvent(registration.EventId))">
                            <div class="event-date-col">
                                <div class="event-date-badge">
                                    <div class="date-month">@registration.EventDate.ToString("MMM")</div>
                                    <div class="date-day">@registration.EventDate.Day</div>
                                </div>
                            </div>
                            <div class="event-info">
                                <h4 class="event-name">@registration.EventTitle</h4>
                                <div class="event-meta">
                                    <span class="e-icons e-clock"></span>
                                    <span>@registration.EventDate.ToString("h:mm tt")</span>
                                </div>
                            </div>
                            <div class="event-actions">
                                <SfButton CssClass="e-small e-outline" OnClick:stopPropagation="true" 
                                         OnClick="@(() => ViewTicket(registration.Id))">
                                    View Ticket
                                </SfButton>
                            </div>
                        </div>
                    }
                </div>
            }
            else
            {
                <div class="empty-state-small">
                    <p>No upcoming events</p>
                    <SfButton CssClass="e-primary e-small" OnClick="@(() => Navigation.NavigateTo("/events"))">
                        Browse Events
                    </SfButton>
                </div>
            }
        </div>

        @* Quick Actions *@
        <div class="card">
            <h2 class="card-title">Quick Actions</h2>
            <div class="quick-actions-grid">
                <a href="/events" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-calendar"></span>
                    </span>
                    <span class="action-label">Browse Events</span>
                </a>
                <a href="/profile" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-user"></span>
                    </span>
                    <span class="action-label">Edit Profile</span>
                </a>
                <a href="/profile/vetting" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-check-circle"></span>
                    </span>
                    <span class="action-label">Vetting Info</span>
                </a>
                <a href="/profile/emergency-contacts" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-warning"></span>
                    </span>
                    <span class="action-label">Emergency Contacts</span>
                </a>
                <a href="/my-tickets" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-ticket"></span>
                    </span>
                    <span class="action-label">My Tickets</span>
                </a>
                <a href="/safety" class="action-card">
                    <span class="action-icon">
                        <span class="e-icons e-shield"></span>
                    </span>
                    <span class="action-label">Safety Resources</span>
                </a>
            </div>
        </div>

        @* Recent Activity *@
        <div class="card activity-section">
            <div class="card-header">
                <h2 class="card-title">Recent Activity</h2>
            </div>
            <div class="activity-list">
                @if (recentActivities?.Any() == true)
                {
                    @foreach (var activity in recentActivities)
                    {
                        <div class="activity-item">
                            <div class="activity-icon @GetActivityIconClass(activity.Type)">
                                <span class="e-icons @GetActivityIcon(activity.Type)"></span>
                            </div>
                            <div class="activity-content">
                                <p class="activity-text">@activity.Description</p>
                                <span class="activity-time">@GetRelativeTime(activity.Timestamp)</span>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p class="text-muted">No recent activity</p>
                }
            </div>
        </div>

        @* Community Announcements *@
        @if (announcements?.Any() == true)
        {
            <div class="card announcements-section">
                <h2 class="card-title">Community Announcements</h2>
                <div class="announcements-list">
                    @foreach (var announcement in announcements)
                    {
                        <div class="announcement-item @GetAnnouncementClass(announcement.Type)">
                            <div class="announcement-header">
                                <h4>@announcement.Title</h4>
                                <span class="announcement-date">@announcement.Date.ToString("MMM d")</span>
                            </div>
                            <p>@announcement.Message</p>
                        </div>
                    }
                </div>
            </div>
        }
    </div>
</div>

@code {
    private UserProfile? userProfile;
    private VettingStatus? vettingStatus;
    private List<UserRegistration>? upcomingRegistrations;
    private List<ActivityItem>? recentActivities;
    private List<AnnouncementViewModel>? announcements;
    
    private int upcomingEventsCount = 0;
    private int pastEventsCount = 0;
    private int memberSinceDays = 0;
    private bool isLoadingEvents = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadDashboardData();
    }

    private async Task LoadDashboardData()
    {
        try
        {
            // Load user profile
            userProfile = await UserService.GetCurrentUserProfileAsync();
            if (userProfile != null)
            {
                memberSinceDays = (DateTime.Now - userProfile.MemberSince).Days;
            }

            // Load vetting status
            vettingStatus = await VettingService.GetMyVettingStatusAsync() ?? new VettingStatus { Status = "Not Started" };

            // Load registrations
            isLoadingEvents = true;
            var allRegistrations = await RegistrationService.GetMyRegistrationsAsync();
            if (allRegistrations != null)
            {
                upcomingRegistrations = allRegistrations
                    .Where(r => r.EventDate >= DateTime.Now)
                    .OrderBy(r => r.EventDate)
                    .ToList();
                
                upcomingEventsCount = upcomingRegistrations.Count;
                pastEventsCount = allRegistrations.Count(r => r.EventDate < DateTime.Now);
            }
            isLoadingEvents = false;

            // Generate sample data for demo
            GenerateSampleData();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load dashboard: {ex.Message}");
            isLoadingEvents = false;
        }
    }

    private void GenerateSampleData()
    {
        // Sample recent activities
        recentActivities = new List<ActivityItem>
        {
            new() { Type = "registration", Description = "Registered for Introduction to Rope Bondage", Timestamp = DateTime.Now.AddHours(-2) },
            new() { Type = "profile", Description = "Updated your profile information", Timestamp = DateTime.Now.AddDays(-1) },
            new() { Type = "vetting", Description = "Submitted vetting application", Timestamp = DateTime.Now.AddDays(-3) }
        };

        // Sample announcements
        announcements = new List<AnnouncementViewModel>
        {
            new() { 
                Title = "New Safety Guidelines", 
                Message = "We've updated our safety protocols. Please review them before your next event.", 
                Date = DateTime.Now.AddDays(-2),
                Type = "info"
            },
            new() { 
                Title = "Special Workshop Announcement", 
                Message = "Guest instructor coming in March! Early bird registration opens next week.", 
                Date = DateTime.Now.AddDays(-5),
                Type = "success"
            }
        };
    }

    private void ViewEvent(Guid eventId)
    {
        Navigation.NavigateTo($"/events/{eventId}");
    }

    private void ViewTicket(Guid registrationId)
    {
        Navigation.NavigateTo($"/my-tickets/{registrationId}");
    }

    private string GetVettingStatusClass()
    {
        return vettingStatus?.Status?.ToLower() switch
        {
            "approved" => "status-approved",
            "pending" => "status-pending",
            "rejected" => "status-rejected",
            _ => "status-default"
        };
    }

    private string GetActivityIcon(string type)
    {
        return type switch
        {
            "registration" => "e-calendar",
            "profile" => "e-user",
            "vetting" => "e-check-circle",
            "payment" => "e-credit-card",
            _ => "e-circle"
        };
    }

    private string GetActivityIconClass(string type)
    {
        return type switch
        {
            "registration" => "icon-success",
            "profile" => "icon-info",
            "vetting" => "icon-warning",
            "payment" => "icon-primary",
            _ => "icon-default"
        };
    }

    private string GetAnnouncementClass(string type)
    {
        return $"announcement-{type}";
    }

    private string GetRelativeTime(DateTime timestamp)
    {
        var timeSpan = DateTime.Now - timestamp;
        
        if (timeSpan.TotalMinutes < 60)
            return $"{(int)timeSpan.TotalMinutes} minutes ago";
        if (timeSpan.TotalHours < 24)
            return $"{(int)timeSpan.TotalHours} hours ago";
        if (timeSpan.TotalDays < 7)
            return $"{(int)timeSpan.TotalDays} days ago";
        
        return timestamp.ToString("MMM d, yyyy");
    }

    // View models
    public class ActivityItem
    {
        public string Type { get; set; } = string.Empty;
        public string Description { get; set; } = string.Empty;
        public DateTime Timestamp { get; set; }
    }

    public class AnnouncementViewModel
    {
        public string Title { get; set; } = string.Empty;
        public string Message { get; set; } = string.Empty;
        public DateTime Date { get; set; }
        public string Type { get; set; } = "info"; // info, warning, success
    }
}