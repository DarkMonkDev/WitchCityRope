@page "/member/profile"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using WitchCityRope.Web.Services
@using WitchCityRope.Web.Shared.Layouts
@using WitchCityRope.Web.Shared.Validation.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IToastService ToastService
@inject NavigationManager Navigation
@attribute [Authorize]
@layout MainLayout

<PageTitle>Member Profile - Witch City Rope</PageTitle>

<style>
    .member-profile-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .profile-header {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .profile-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 0.5rem;
    }

    .profile-subtitle {
        color: #666;
        font-size: 1rem;
        margin-bottom: 2rem;
    }

    .profile-grid {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
    }

    .profile-sidebar {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        height: fit-content;
    }

    .profile-avatar {
        width: 120px;
        height: 120px;
        border-radius: 50%;
        background: #8B4513;
        color: white;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 2.5rem;
        font-weight: 600;
        margin: 0 auto 1.5rem;
    }

    .profile-info {
        text-align: center;
    }

    .scene-name {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 0.5rem;
    }

    .member-since {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 1rem;
    }

    .profile-stats {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
        margin-top: 1.5rem;
    }

    .stat-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.5rem 0;
        border-bottom: 1px solid #eee;
    }

    .stat-label {
        font-weight: 500;
        color: #333;
    }

    .stat-value {
        color: #8B4513;
        font-weight: 600;
    }

    .profile-content {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .content-tabs {
        display: flex;
        gap: 1rem;
        margin-bottom: 2rem;
        border-bottom: 1px solid #eee;
    }

    .tab-button {
        padding: 0.75rem 1rem;
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-weight: 500;
        border-bottom: 2px solid transparent;
        transition: all 0.2s ease;
    }

    .tab-button.active {
        color: #8B4513;
        border-bottom-color: #8B4513;
    }

    .tab-content {
        display: none;
    }

    .tab-content.active {
        display: block;
    }

    .info-section {
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 1rem;
    }

    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .info-item {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 6px;
    }

    .info-label {
        font-weight: 500;
        color: #333;
        margin-bottom: 0.25rem;
    }

    .info-value {
        color: #666;
    }

    .bio-section {
        margin-top: 2rem;
    }

    .bio-text {
        background: #f8f9fa;
        padding: 1.5rem;
        border-radius: 6px;
        line-height: 1.6;
        color: #333;
    }

    .edit-button {
        background: #8B4513;
        color: white;
        border: none;
        padding: 0.75rem 1.5rem;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .edit-button:hover {
        background: #6B3410;
        transform: translateY(-1px);
    }

    .privacy-settings {
        margin-top: 2rem;
    }

    .privacy-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .privacy-label {
        font-weight: 500;
        color: #333;
    }

    .privacy-description {
        font-size: 0.9rem;
        color: #666;
        margin-top: 0.25rem;
    }

    .status-badge {
        padding: 0.25rem 0.75rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .status-vetted {
        background: #d4edda;
        color: #155724;
    }

    .status-pending {
        background: #fff3cd;
        color: #856404;
    }

    .status-not-vetted {
        background: #f8d7da;
        color: #721c24;
    }

    @@media (max-width: 768px) {
        .member-profile-container {
            padding: 1rem;
        }

        .profile-grid {
            grid-template-columns: 1fr;
        }

        .content-tabs {
            flex-wrap: wrap;
        }

        .info-grid {
            grid-template-columns: 1fr;
        }
    }
</style>

<div class="member-profile-container">
    <div class="profile-header">
        <h1 class="profile-title">Member Profile</h1>
        <p class="profile-subtitle">View and manage your profile information</p>
    </div>

    <div class="profile-grid">
        <div class="profile-sidebar">
            <div class="profile-avatar">
                @if (!string.IsNullOrEmpty(currentUser?.AvatarUrl))
                {
                    <img src="@currentUser.AvatarUrl" alt="Profile picture" style="width: 100%; height: 100%; border-radius: 50%; object-fit: cover;" />
                }
                else
                {
                    <span>@GetInitials()</span>
                }
            </div>
            
            <div class="profile-info">
                <div class="scene-name">@(currentUser?.SceneName ?? "Loading...")</div>
                <div class="member-since">Member since @(currentUser?.MemberSince.ToString("MMMM yyyy") ?? "Unknown")</div>
                
                <div class="status-badge @GetStatusClass()">
                    @GetVettingStatusText()
                </div>
            </div>

            <div class="profile-stats">
                <div class="stat-item">
                    <span class="stat-label">Events Attended</span>
                    <span class="stat-value">@eventsAttended</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Classes Completed</span>
                    <span class="stat-value">@classesCompleted</span>
                </div>
                <div class="stat-item">
                    <span class="stat-label">Profile Views</span>
                    <span class="stat-value">@profileViews</span>
                </div>
            </div>
        </div>

        <div class="profile-content">
            <div class="content-tabs">
                <button class="tab-button @(activeTab == "info" ? "active" : "")" @onclick='() => SetActiveTab("info")'>
                    Personal Info
                </button>
                <button class="tab-button @(activeTab == "bio" ? "active" : "")" @onclick='() => SetActiveTab("bio")'>
                    Bio & Interests
                </button>
                <button class="tab-button @(activeTab == "privacy" ? "active" : "")" @onclick='() => SetActiveTab("privacy")'>
                    Privacy Settings
                </button>
            </div>

            <div class="tab-content @(activeTab == "info" ? "active" : "")">
                <div class="info-section">
                    <div class="section-title">
                        Basic Information
                        <button class="edit-button" @onclick='() => Navigation.NavigateTo("/profile", forceLoad: true)' style="float: right;">
                            Edit Profile
                        </button>
                    </div>
                    
                    <div class="info-grid">
                        <div class="info-item">
                            <div class="info-label">Scene Name</div>
                            <div class="info-value">@(currentUser?.SceneName ?? "Not set")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Pronouns</div>
                            <div class="info-value">@(currentUser?.Pronouns ?? "Not specified")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Email</div>
                            <div class="info-value">@(currentUser?.Email ?? "Not available")</div>
                        </div>
                        <div class="info-item">
                            <div class="info-label">Member Since</div>
                            <div class="info-value">@(currentUser?.MemberSince.ToString("MMMM d, yyyy") ?? "Unknown")</div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="tab-content @(activeTab == "bio" ? "active" : "")">
                <div class="bio-section">
                    <div class="section-title">About Me</div>
                    @if (!string.IsNullOrEmpty(currentUser?.Bio))
                    {
                        <div class="bio-text">@currentUser.Bio</div>
                    }
                    else
                    {
                        <div class="bio-text" style="color: #999; font-style: italic;">
                            No bio available. <a href="/profile">Add a bio</a> to help others get to know you.
                        </div>
                    }
                </div>
            </div>

            <div class="tab-content @(activeTab == "privacy" ? "active" : "")">
                <div class="privacy-settings">
                    <div class="section-title">Privacy & Visibility</div>
                    
                    <div class="privacy-item">
                        <div>
                            <div class="privacy-label">Public Profile</div>
                            <div class="privacy-description">Allow other vetted members to view your profile</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="isPublicProfile" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="privacy-item">
                        <div>
                            <div class="privacy-label">Show Attendance History</div>
                            <div class="privacy-description">Display events you've attended on your profile</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="showAttendanceHistory" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="privacy-item">
                        <div>
                            <div class="privacy-label">Allow Messages</div>
                            <div class="privacy-description">Let other members send you direct messages</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="allowMessages" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <button class="edit-button" @onclick="SavePrivacySettings" style="margin-top: 1rem;">
                        Save Privacy Settings
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "info";
    private UserProfileDto? currentUser;
    private bool isLoading = true;
    private int eventsAttended = 0;
    private int classesCompleted = 0;
    private int profileViews = 0;

    // Privacy settings
    private bool isPublicProfile = true;
    private bool showAttendanceHistory = true;
    private bool allowMessages = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserProfile();
        await LoadUserStats();
    }

    private async Task LoadUserProfile()
    {
        try
        {
            isLoading = true;
            var userProfile = await UserService.GetCurrentUserProfileAsync();
            currentUser = new UserProfileDto
            {
                SceneName = userProfile?.SceneName ?? string.Empty,
                Email = userProfile?.Email ?? string.Empty,
                Bio = userProfile?.Bio,
                Pronouns = userProfile?.Pronouns,
                MemberSince = userProfile?.MemberSince ?? DateTime.Now,
                EmailVerified = userProfile?.EmailVerified ?? false
            };
            
            if (currentUser != null)
            {
                // Load privacy settings (these would typically come from the API)
                isPublicProfile = true; // Default values
                showAttendanceHistory = true;
                allowMessages = true;
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load profile: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadUserStats()
    {
        try
        {
            // These would typically come from API calls
            eventsAttended = 12; // Mock data
            classesCompleted = 8;
            profileViews = 45;
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load stats: {ex.Message}");
        }
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
    }

    private string GetInitials()
    {
        if (string.IsNullOrEmpty(currentUser?.SceneName))
            return "?";
        
        var parts = currentUser.SceneName.Split(' ', StringSplitOptions.RemoveEmptyEntries);
        if (parts.Length >= 2)
            return $"{parts[0][0]}{parts[^1][0]}".ToUpper();
        
        return currentUser.SceneName.Substring(0, Math.Min(2, currentUser.SceneName.Length)).ToUpper();
    }

    private string GetStatusClass()
    {
        // This would be based on actual vetting status
        return "status-vetted"; // Mock data
    }

    private string GetVettingStatusText()
    {
        // This would be based on actual vetting status
        return "Vetted Member"; // Mock data
    }

    private async Task SavePrivacySettings()
    {
        try
        {
            // This would call an API to save privacy settings
            await Task.Delay(500); // Mock delay
            ToastService.ShowSuccess("Privacy settings saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save privacy settings: {ex.Message}");
        }
    }

    // Mock DTOs - these would normally come from the Core project
    public class UserProfileDto
    {
        public string SceneName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string? Bio { get; set; }
        public string? Pronouns { get; set; }
        public DateTime MemberSince { get; set; }
        public string? AvatarUrl { get; set; }
        public bool EmailVerified { get; set; }
    }
}

<style>
    /* Toggle Switch Styling */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #8B4513;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }
</style>