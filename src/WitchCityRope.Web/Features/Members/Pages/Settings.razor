@page "/member/settings"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using WitchCityRope.Web.Services
@using WitchCityRope.Web.Shared.Layouts
@using WitchCityRope.Web.Shared.Validation.Components
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations
@inject IUserService UserService
@inject IToastService ToastService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]
@layout MainLayout

<PageTitle>Account Settings - Witch City Rope</PageTitle>

<style>
    .settings-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 2rem;
    }

    .settings-header {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        margin-bottom: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .settings-title {
        font-size: 2rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 0.5rem;
    }

    .settings-subtitle {
        color: #666;
        font-size: 1rem;
        margin-bottom: 2rem;
    }

    .settings-grid {
        display: grid;
        grid-template-columns: 300px 1fr;
        gap: 2rem;
    }

    .settings-sidebar {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        height: fit-content;
    }

    .sidebar-title {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #1a1a1a;
    }

    .sidebar-nav {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }

    .sidebar-link {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem 1rem;
        color: #666;
        text-decoration: none;
        border-radius: 6px;
        transition: all 0.2s ease;
        cursor: pointer;
        border: none;
        background: none;
        width: 100%;
        text-align: left;
    }

    .sidebar-link:hover {
        background: #f8f9fa;
        color: #1a1a1a;
    }

    .sidebar-link.active {
        background: #8B4513;
        color: white;
    }

    .sidebar-icon {
        width: 20px;
        height: 20px;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .settings-content {
        background: white;
        border-radius: 8px;
        padding: 2rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .content-section {
        display: none;
    }

    .content-section.active {
        display: block;
    }

    .section-title {
        font-size: 1.5rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 1rem;
    }

    .section-description {
        color: #666;
        margin-bottom: 2rem;
    }

    .form-section {
        margin-bottom: 2rem;
        padding-bottom: 2rem;
        border-bottom: 1px solid #eee;
    }

    .form-section:last-child {
        border-bottom: none;
        margin-bottom: 0;
    }

    .form-section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #1a1a1a;
        margin-bottom: 1rem;
    }

    .form-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }

    .notification-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .notification-info {
        flex: 1;
    }

    .notification-title {
        font-weight: 500;
        color: #1a1a1a;
        margin-bottom: 0.25rem;
    }

    .notification-description {
        font-size: 0.9rem;
        color: #666;
    }

    .privacy-item {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 1rem;
        background: #f8f9fa;
        border-radius: 6px;
        margin-bottom: 1rem;
    }

    .privacy-info {
        flex: 1;
    }

    .privacy-title {
        font-weight: 500;
        color: #1a1a1a;
        margin-bottom: 0.25rem;
    }

    .privacy-description {
        font-size: 0.9rem;
        color: #666;
    }

    .action-buttons {
        display: flex;
        gap: 1rem;
        margin-top: 2rem;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        border: none;
        border-radius: 6px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .btn-primary {
        background: #8B4513;
        color: white;
    }

    .btn-primary:hover {
        background: #6B3410;
        transform: translateY(-1px);
    }

    .btn-secondary {
        background: #f8f9fa;
        color: #333;
        border: 1px solid #dee2e6;
    }

    .btn-secondary:hover {
        background: #e9ecef;
    }

    .btn-danger {
        background: #dc3545;
        color: white;
    }

    .btn-danger:hover {
        background: #c82333;
    }

    .danger-zone {
        background: #fff5f5;
        border: 1px solid #fed7d7;
        border-radius: 8px;
        padding: 2rem;
        margin-top: 2rem;
    }

    .danger-zone-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: #dc3545;
        margin-bottom: 1rem;
    }

    .danger-zone-description {
        color: #666;
        margin-bottom: 1.5rem;
    }

    .security-info {
        background: #e7f3ff;
        border: 1px solid #bee5eb;
        border-radius: 6px;
        padding: 1rem;
        margin-bottom: 1rem;
    }

    .security-info-title {
        font-weight: 500;
        color: #0c5460;
        margin-bottom: 0.5rem;
    }

    .security-info-text {
        color: #0c5460;
        font-size: 0.9rem;
    }

    /* Toggle Switch */
    .switch {
        position: relative;
        display: inline-block;
        width: 60px;
        height: 34px;
    }

    .switch input {
        opacity: 0;
        width: 0;
        height: 0;
    }

    .slider {
        position: absolute;
        cursor: pointer;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-color: #ccc;
        transition: .4s;
        border-radius: 34px;
    }

    .slider:before {
        position: absolute;
        content: "";
        height: 26px;
        width: 26px;
        left: 4px;
        bottom: 4px;
        background-color: white;
        transition: .4s;
        border-radius: 50%;
    }

    input:checked + .slider {
        background-color: #8B4513;
    }

    input:checked + .slider:before {
        transform: translateX(26px);
    }

    @@media (max-width: 768px) {
        .settings-container {
            padding: 1rem;
        }

        .settings-grid {
            grid-template-columns: 1fr;
        }

        .sidebar-nav {
            flex-direction: row;
            overflow-x: auto;
            padding-bottom: 1rem;
        }

        .sidebar-link {
            white-space: nowrap;
        }

        .form-grid {
            grid-template-columns: 1fr;
        }

        .action-buttons {
            flex-direction: column;
        }
    }
</style>

<div class="settings-container">
    <div class="settings-header">
        <h1 class="settings-title">Account Settings</h1>
        <p class="settings-subtitle">Manage your account preferences, security, and privacy settings</p>
    </div>

    <div class="settings-grid">
        <div class="settings-sidebar">
            <h3 class="sidebar-title">Settings</h3>
            <nav class="sidebar-nav">
                <button class="sidebar-link @(activeSection == "account" ? "active" : "")" @onclick='() => SetActiveSection("account")'>
                    <div class="sidebar-icon">üë§</div>
                    Account
                </button>
                <button class="sidebar-link @(activeSection == "security" ? "active" : "")" @onclick='() => SetActiveSection("security")'>
                    <div class="sidebar-icon">üîí</div>
                    Security
                </button>
                <button class="sidebar-link @(activeSection == "notifications" ? "active" : "")" @onclick='() => SetActiveSection("notifications")'>
                    <div class="sidebar-icon">üîî</div>
                    Notifications
                </button>
                <button class="sidebar-link @(activeSection == "privacy" ? "active" : "")" @onclick='() => SetActiveSection("privacy")'>
                    <div class="sidebar-icon">üõ°Ô∏è</div>
                    Privacy
                </button>
                <button class="sidebar-link @(activeSection == "danger" ? "active" : "")" @onclick='() => SetActiveSection("danger")'>
                    <div class="sidebar-icon">‚ö†Ô∏è</div>
                    Account Management
                </button>
            </nav>
        </div>

        <div class="settings-content">
            <!-- Account Settings -->
            <div class="content-section @(activeSection == "account" ? "active" : "")">
                <h2 class="section-title">Account Settings</h2>
                <p class="section-description">Manage your basic account information and preferences.</p>

                <div class="form-section">
                    <h3 class="form-section-title">Basic Information</h3>
                    <div class="form-grid">
                        <WcrInputText @bind-Value="accountSettings.SceneName" 
                                      Label="Scene Name" 
                                      IsRequired="true"
                                      HelpText="This is how you'll be known in the community" />
                        <WcrInputEmail @bind-Value="accountSettings.Email" 
                                       Label="Email Address" 
                                       IsRequired="true"
                                       IsReadOnly="true"
                                       HelpText="Contact support to change your email" />
                    </div>
                </div>

                <div class="form-section">
                    <h3 class="form-section-title">Communication Preferences</h3>
                    <WcrInputSelect @bind-Value="accountSettings.TimeZone" Label="Time Zone">
                        <option value="EST">Eastern Time (EST)</option>
                        <option value="CST">Central Time (CST)</option>
                        <option value="MST">Mountain Time (MST)</option>
                        <option value="PST">Pacific Time (PST)</option>
                    </WcrInputSelect>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SaveAccountSettings">Save Changes</button>
                    <button class="btn btn-secondary" @onclick="ResetAccountSettings">Reset</button>
                </div>
            </div>

            <!-- Security Settings -->
            <div class="content-section @(activeSection == "security" ? "active" : "")">
                <h2 class="section-title">Security Settings</h2>
                <p class="section-description">Manage your password and security preferences.</p>

                <div class="form-section">
                    <h3 class="form-section-title">Password</h3>
                    <div class="security-info">
                        <div class="security-info-title">Password Security</div>
                        <div class="security-info-text">
                            Use a strong password with at least 8 characters, including uppercase, lowercase, numbers, and symbols.
                        </div>
                    </div>
                    <div class="form-grid">
                        <WcrInputPassword @bind-Value="passwordSettings.CurrentPassword" 
                                          Label="Current Password" 
                                          IsRequired="true" />
                        <WcrInputPassword @bind-Value="passwordSettings.NewPassword" 
                                          Label="New Password" 
                                          IsRequired="true" />
                        <WcrInputPassword @bind-Value="passwordSettings.ConfirmPassword" 
                                          Label="Confirm New Password" 
                                          IsRequired="true" />
                    </div>
                </div>

                <div class="form-section">
                    <h3 class="form-section-title">Two-Factor Authentication</h3>
                    <div class="notification-item">
                        <div class="notification-info">
                            <div class="notification-title">Enable Two-Factor Authentication</div>
                            <div class="notification-description">Add an extra layer of security to your account</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="securitySettings.TwoFactorEnabled" />
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SaveSecuritySettings">Update Security</button>
                </div>
            </div>

            <!-- Notifications -->
            <div class="content-section @(activeSection == "notifications" ? "active" : "")">
                <h2 class="section-title">Notification Settings</h2>
                <p class="section-description">Choose what notifications you want to receive.</p>

                <div class="form-section">
                    <h3 class="form-section-title">Email Notifications</h3>
                    
                    <div class="notification-item">
                        <div class="notification-info">
                            <div class="notification-title">Event Announcements</div>
                            <div class="notification-description">Get notified about new events and classes</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="notificationSettings.EventAnnouncements" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="notification-item">
                        <div class="notification-info">
                            <div class="notification-title">Event Reminders</div>
                            <div class="notification-description">Receive reminders for events you're registered for</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="notificationSettings.EventReminders" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="notification-item">
                        <div class="notification-info">
                            <div class="notification-title">Community Updates</div>
                            <div class="notification-description">Updates about community news and changes</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="notificationSettings.CommunityUpdates" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="notification-item">
                        <div class="notification-info">
                            <div class="notification-title">Safety Alerts</div>
                            <div class="notification-description">Important safety notifications and updates</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="notificationSettings.SafetyAlerts" />
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SaveNotificationSettings">Save Preferences</button>
                </div>
            </div>

            <!-- Privacy Settings -->
            <div class="content-section @(activeSection == "privacy" ? "active" : "")">
                <h2 class="section-title">Privacy Settings</h2>
                <p class="section-description">Control how your information is shared and displayed.</p>

                <div class="form-section">
                    <h3 class="form-section-title">Profile Visibility</h3>
                    
                    <div class="privacy-item">
                        <div class="privacy-info">
                            <div class="privacy-title">Public Profile</div>
                            <div class="privacy-description">Allow other vetted members to view your profile</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="privacySettings.PublicProfile" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="privacy-item">
                        <div class="privacy-info">
                            <div class="privacy-title">Show Attendance History</div>
                            <div class="privacy-description">Display events you've attended on your profile</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="privacySettings.ShowAttendanceHistory" />
                            <span class="slider"></span>
                        </label>
                    </div>

                    <div class="privacy-item">
                        <div class="privacy-info">
                            <div class="privacy-title">Allow Messages</div>
                            <div class="privacy-description">Let other members send you direct messages</div>
                        </div>
                        <label class="switch">
                            <input type="checkbox" @bind="privacySettings.AllowMessages" />
                            <span class="slider"></span>
                        </label>
                    </div>
                </div>

                <div class="action-buttons">
                    <button class="btn btn-primary" @onclick="SavePrivacySettings">Save Privacy Settings</button>
                </div>
            </div>

            <!-- Account Management -->
            <div class="content-section @(activeSection == "danger" ? "active" : "")">
                <h2 class="section-title">Account Management</h2>
                <p class="section-description">Manage your account data and membership.</p>

                <div class="form-section">
                    <h3 class="form-section-title">Data Export</h3>
                    <p>Download a copy of your account data including profile information, event history, and communications.</p>
                    <button class="btn btn-secondary" @onclick="ExportAccountData">Download My Data</button>
                </div>

                <div class="danger-zone">
                    <h3 class="danger-zone-title">Danger Zone</h3>
                    <p class="danger-zone-description">
                        These actions are permanent and cannot be undone. Please proceed with caution.
                    </p>
                    
                    <div class="form-section">
                        <h4>Deactivate Account</h4>
                        <p>Temporarily deactivate your account. You can reactivate it later by contacting support.</p>
                        <button class="btn btn-danger" @onclick="DeactivateAccount">Deactivate Account</button>
                    </div>

                    <div class="form-section">
                        <h4>Delete Account</h4>
                        <p>Permanently delete your account and all associated data. This action cannot be undone.</p>
                        <button class="btn btn-danger" @onclick="DeleteAccount">Delete Account</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private string activeSection = "account";
    
    private AccountSettingsModel accountSettings = new();
    private PasswordSettingsModel passwordSettings = new();
    private SecuritySettingsModel securitySettings = new();
    private NotificationSettingsModel notificationSettings = new();
    private PrivacySettingsModel privacySettings = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSettings();
    }

    private async Task LoadSettings()
    {
        try
        {
            // Load user settings from API
            // This would typically call various API endpoints
            accountSettings = new AccountSettingsModel
            {
                SceneName = "Sample User",
                Email = "user@example.com",
                TimeZone = "EST"
            };

            securitySettings = new SecuritySettingsModel
            {
                TwoFactorEnabled = false
            };

            notificationSettings = new NotificationSettingsModel
            {
                EventAnnouncements = true,
                EventReminders = true,
                CommunityUpdates = true,
                SafetyAlerts = true
            };

            privacySettings = new PrivacySettingsModel
            {
                PublicProfile = true,
                ShowAttendanceHistory = true,
                AllowMessages = true
            };
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to load settings: {ex.Message}");
        }
    }

    private void SetActiveSection(string section)
    {
        activeSection = section;
    }

    private async Task SaveAccountSettings()
    {
        try
        {
            // Save account settings via API
            await Task.Delay(500); // Mock delay
            ToastService.ShowSuccess("Account settings saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save account settings: {ex.Message}");
        }
    }

    private async Task SaveSecuritySettings()
    {
        try
        {
            // Validate password if changing
            if (!string.IsNullOrEmpty(passwordSettings.NewPassword))
            {
                if (passwordSettings.NewPassword != passwordSettings.ConfirmPassword)
                {
                    ToastService.ShowError("New password and confirmation do not match!");
                    return;
                }
            }

            // Save security settings via API
            await Task.Delay(500); // Mock delay
            ToastService.ShowSuccess("Security settings updated successfully!");
            
            // Clear password fields
            passwordSettings = new PasswordSettingsModel();
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to update security settings: {ex.Message}");
        }
    }

    private async Task SaveNotificationSettings()
    {
        try
        {
            // Save notification settings via API
            await Task.Delay(500); // Mock delay
            ToastService.ShowSuccess("Notification preferences saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save notification settings: {ex.Message}");
        }
    }

    private async Task SavePrivacySettings()
    {
        try
        {
            // Save privacy settings via API
            await Task.Delay(500); // Mock delay
            ToastService.ShowSuccess("Privacy settings saved successfully!");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to save privacy settings: {ex.Message}");
        }
    }

    private async Task ResetAccountSettings()
    {
        await LoadSettings();
        ToastService.ShowInfo("Settings reset to last saved values.");
    }

    private async Task ExportAccountData()
    {
        try
        {
            // Export account data
            await Task.Delay(1000); // Mock delay
            ToastService.ShowSuccess("Account data export started! You'll receive an email when it's ready.");
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Failed to export account data: {ex.Message}");
        }
    }

    private async Task DeactivateAccount()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to deactivate your account? You can reactivate it later by contacting support.");
        
        if (confirmed)
        {
            try
            {
                // Deactivate account via API
                await Task.Delay(1000); // Mock delay
                ToastService.ShowSuccess("Account deactivated successfully.");
                Navigation.NavigateTo("/");
            }
            catch (Exception ex)
            {
                ToastService.ShowError($"Failed to deactivate account: {ex.Message}");
            }
        }
    }

    private async Task DeleteAccount()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
            "Are you sure you want to permanently delete your account? This action cannot be undone and all your data will be lost.");
        
        if (confirmed)
        {
            var doubleConfirmed = await JSRuntime.InvokeAsync<bool>("confirm", 
                "This is your final warning. Are you absolutely sure you want to delete your account permanently?");
            
            if (doubleConfirmed)
            {
                try
                {
                    // Delete account via API
                    await Task.Delay(1000); // Mock delay
                    ToastService.ShowSuccess("Account deleted successfully.");
                    Navigation.NavigateTo("/");
                }
                catch (Exception ex)
                {
                    ToastService.ShowError($"Failed to delete account: {ex.Message}");
                }
            }
        }
    }

    // Settings Models
    public class AccountSettingsModel
    {
        public string SceneName { get; set; } = string.Empty;
        public string Email { get; set; } = string.Empty;
        public string TimeZone { get; set; } = string.Empty;
    }

    public class PasswordSettingsModel
    {
        public string CurrentPassword { get; set; } = string.Empty;
        public string NewPassword { get; set; } = string.Empty;
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    public class SecuritySettingsModel
    {
        public bool TwoFactorEnabled { get; set; }
    }

    public class NotificationSettingsModel
    {
        public bool EventAnnouncements { get; set; } = true;
        public bool EventReminders { get; set; } = true;
        public bool CommunityUpdates { get; set; } = true;
        public bool SafetyAlerts { get; set; } = true;
    }

    public class PrivacySettingsModel
    {
        public bool PublicProfile { get; set; } = true;
        public bool ShowAttendanceHistory { get; set; } = true;
        public bool AllowMessages { get; set; } = true;
    }
}