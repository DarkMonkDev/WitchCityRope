@using WitchCityRope.Web.Services
@inject AuthenticationService AuthService

@* Two-factor authentication modal component for secure login *@

<div class="modal @(IsVisible ? "modal-visible" : "")" @onclick="HandleBackgroundClick">
    <div class="modal-content" @onclick:stopPropagation="true">
        <div class="modal-header">
            <h2 class="modal-title">Two-Factor Authentication</h2>
            <button type="button" class="modal-close" @onclick="OnClose">
                <span aria-hidden="true">&times;</span>
            </button>
        </div>

        <div class="modal-body">
            <p class="modal-description">
                Enter the 6-digit code from your authenticator app to complete sign in.
            </p>

            <EditForm Model="@twoFactorModel" OnValidSubmit="@HandleSubmit">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <label for="code" class="form-label">Verification Code</label>
                    <InputText id="code" @bind-Value="twoFactorModel.Code" 
                               class="form-input form-input-large" 
                               placeholder="000000" 
                               maxlength="6"
                               autocomplete="off"
                               inputmode="numeric" />
                    <ValidationMessage For="@(() => twoFactorModel.Code)" class="validation-message" />
                </div>

                <div class="form-group">
                    <label class="checkbox-label">
                        <InputCheckbox @bind-Value="twoFactorModel.RememberDevice" />
                        <span>Remember this device for 30 days</span>
                    </label>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-error">
                        @errorMessage
                    </div>
                }

                <div class="modal-actions">
                    <button type="button" class="btn btn-secondary" @onclick="OnClose">
                        Cancel
                    </button>
                    <button type="submit" class="btn btn-primary" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span>Verifying...</span>
                        }
                        else
                        {
                            <span>Verify</span>
                        }
                    </button>
                </div>
            </EditForm>

            <div class="modal-footer">
                <button type="button" class="btn-link" @onclick="HandleUseRecoveryCode">
                    Use a recovery code instead
                </button>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> OnSuccess { get; set; }
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter] public string? UserId { get; set; }

    private TwoFactorModel twoFactorModel = new();
    private bool isLoading = false;
    private string? errorMessage;

    private async Task HandleSubmit()
    {
        isLoading = true;
        errorMessage = null;

        try
        {
            // TODO: Implement actual 2FA verification
            var result = await AuthService.VerifyTwoFactorAsync(UserId, twoFactorModel.Code, twoFactorModel.RememberDevice);
            
            if (result.Succeeded)
            {
                await OnSuccess.InvokeAsync(true);
            }
            else
            {
                errorMessage = "Invalid verification code. Please try again.";
            }
        }
        catch (Exception)
        {
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void HandleBackgroundClick()
    {
        OnClose.InvokeAsync();
    }

    private void HandleUseRecoveryCode()
    {
        // TODO: Navigate to recovery code entry
        // For now, just show a message
        errorMessage = "Recovery code feature coming soon.";
    }

    // Two-factor model for form binding
    public class TwoFactorModel
    {
        [Required(ErrorMessage = "Verification code is required")]
        [StringLength(6, MinimumLength = 6, ErrorMessage = "Code must be 6 digits")]
        [RegularExpression(@"^\d{6}$", ErrorMessage = "Code must be 6 digits")]
        public string Code { get; set; } = string.Empty;

        public bool RememberDevice { get; set; }
    }
}