@page "/forgot-password"
@page "/identity/account/forgotpassword"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())

@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.Identity.UI.Services
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using System.Text.Encodings.Web
@using System.ComponentModel.DataAnnotations
@using WitchCityRope.Infrastructure.Identity
@using WitchCityRope.Web.Shared.Validation.Components

@inject UserManager<WitchCityRopeUser> UserManager
@inject IEmailSender EmailSender
@inject NavigationManager Navigation
@inject ILogger<ForgotPassword> Logger

<PageTitle>Forgot Password - Witch City Rope</PageTitle>

<div class="auth-container">
    <div class="auth-card forgot-password-card">
        <div class="auth-header">
            <h1 class="auth-title">FORGOT PASSWORD?</h1>
            <p class="auth-subtitle">Enter your email address and we'll send you a password reset link.</p>
        </div>

        <EditForm Model="forgotPasswordModel" OnValidSubmit="HandleForgotPassword">
            <DataAnnotationsValidator />
            
            @if (showSuccess)
            {
                <div class="alert alert-success mb-4">
                    <i class="bi bi-check-circle"></i>
                    <span>If an account exists with that email, a password reset link has been sent. Please check your inbox.</span>
                </div>
            }
            else
            {
                <div class="form-group">
                    <WcrInputEmail @bind-Value="forgotPasswordModel.Email" 
                                   Placeholder="your@email.com"
                                   Label="EMAIL ADDRESS*"
                                   CheckUniqueness="false" />
                </div>

                <WcrValidationSummary />

                <button type="submit" class="btn-primary forgot-password-btn" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Sending...</span>
                    }
                    else
                    {
                        <span>SEND RESET LINK</span>
                    }
                </button>
            }
        </EditForm>

        <div class="auth-footer">
            <p>Remember your password? <a href="/Identity/Account/Login" class="auth-link">Sign In</a></p>
            <p>Don't have an account? <a href="/Identity/Account/Register" class="auth-link">Create Account</a></p>
        </div>
    </div>
</div>

<style>
    .forgot-password-card {
        max-width: 450px;
        margin: 0 auto;
    }

    .auth-subtitle {
        color: #666;
        font-size: 0.95rem;
        margin-bottom: 2rem;
        line-height: 1.5;
    }

    .forgot-password-btn {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        margin-top: 1.5rem;
        transition: all 0.3s ease;
    }

    .forgot-password-btn:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(139, 69, 19, 0.3);
    }

    .forgot-password-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
    }

    .alert i {
        font-size: 1.25rem;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .alert-success {
        background-color: rgba(40, 167, 69, 0.1);
        border: 1px solid rgba(40, 167, 69, 0.2);
        color: #155724;
    }

    .alert-success i {
        color: #28a745;
    }

    .auth-footer {
        margin-top: 2rem;
        text-align: center;
    }

    .auth-footer p {
        margin: 0.5rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .auth-link {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
    }

    .auth-link:hover {
        color: var(--primary-hover);
        text-decoration: underline;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2rem;
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .forgot-password-card {
            background-color: #1a1a1a;
            border-color: #333;
        }

        .auth-subtitle {
            color: #999;
        }

        .alert-success {
            background-color: rgba(40, 167, 69, 0.05);
            border-color: rgba(40, 167, 69, 0.3);
            color: #5cb85c;
        }

        .auth-footer p {
            color: #999;
        }
    }
</style>

@code {
    private ForgotPasswordModel forgotPasswordModel = new();
    private bool isSubmitting = false;
    private bool showSuccess = false;

    public class ForgotPasswordModel
    {
        [Required(ErrorMessage = "Email address is required")]
        [EmailAddress(ErrorMessage = "Please enter a valid email address")]
        public string Email { get; set; } = string.Empty;
    }

    private async Task HandleForgotPassword()
    {
        try
        {
            isSubmitting = true;
            StateHasChanged();

            var user = await UserManager.FindByEmailAsync(forgotPasswordModel.Email);
            
            // Always show success message to prevent user enumeration
            showSuccess = true;
            
            if (user != null && await UserManager.IsEmailConfirmedAsync(user))
            {
                // Generate password reset token
                var code = await UserManager.GeneratePasswordResetTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                
                var callbackUrl = Navigation.ToAbsoluteUri($"/reset-password?code={code}").ToString();

                await EmailSender.SendEmailAsync(
                    forgotPasswordModel.Email,
                    "Reset Your Witch City Rope Password",
                    $@"
                    <h2>Password Reset Request</h2>
                    <p>Hello {user.SceneNameValue},</p>
                    <p>We received a request to reset your password for your Witch City Rope account.</p>
                    <p>Please reset your password by clicking the link below:</p>
                    <p><a href='{HtmlEncoder.Default.Encode(callbackUrl)}' style='display: inline-block; padding: 10px 20px; background-color: #8B4513; color: white; text-decoration: none; border-radius: 5px;'>Reset Password</a></p>
                    <p>If you didn't request this password reset, you can safely ignore this email.</p>
                    <p>This link will expire in 24 hours for security reasons.</p>
                    <br>
                    <p>Best regards,<br>The Witch City Rope Team</p>
                    ");
                
                Logger.LogInformation("Password reset email sent to {Email}", forgotPasswordModel.Email);
            }
            else
            {
                // Log for debugging but don't reveal to user
                Logger.LogWarning("Password reset requested for non-existent or unconfirmed email: {Email}", forgotPasswordModel.Email);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during password reset request");
            showSuccess = true; // Still show success to prevent enumeration
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}