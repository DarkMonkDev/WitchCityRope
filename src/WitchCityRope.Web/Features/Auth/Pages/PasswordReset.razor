@page "/auth/password-reset"
@page "/auth/password-reset/{token}"
@layout PublicLayout
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<PageTitle>Password Reset - Witch City Rope</PageTitle>

<div class="auth-page">
    <div class="bg-shape-1"></div>
    <div class="bg-shape-2"></div>
    
    <main class="main-container">
        <div class="reset-card">
            @if (_currentState == ResetState.Request)
            {
                <!-- Request Reset State -->
                <div class="state-content">
                    <div class="card-header">
                        <div class="icon-container">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <circle cx="12" cy="12" r="10"></circle>
                                <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                                <line x1="12" y1="17" x2="12.01" y2="17"></line>
                            </svg>
                        </div>
                        <h1 class="card-title">Forgot Your Password?</h1>
                        <p class="card-subtitle">No worries! Enter your email and we'll send you reset instructions</p>
                    </div>
                    
                    <div class="card-content">
                        @if (_showError)
                        {
                            <div class="alert alert-error">
                                @_errorMessage
                            </div>
                        }
                        
                        <EditForm Model="@_requestModel" OnValidSubmit="@HandleRequestSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label class="form-label" for="email">Email Address</label>
                                <SfTextBox @bind-Value="@_requestModel.Email" 
                                           ID="email" 
                                           Placeholder="your@email.com" 
                                           Type="InputType.Email"
                                           CssClass="wcr-input" />
                                <ValidationMessage For="@(() => _requestModel.Email)" />
                            </div>
                            
                            <div class="info-box">
                                We'll send a password reset link to your email address. The link will expire in 1 hour for security reasons.
                            </div>
                            
                            <SfButton Type="submit" 
                                      CssClass="btn-primary-full" 
                                      Disabled="@_isLoading"
                                      IsPrimary="true">
                                @if (_isLoading)
                                {
                                    <span class="loading-spinner"></span>
                                    <span>Sending...</span>
                                }
                                else
                                {
                                    <span>Send Reset Link</span>
                                }
                            </SfButton>
                        </EditForm>
                    </div>
                    
                    <div class="card-footer">
                        <a href="/auth/login" class="footer-link">Remember your password? Sign in</a>
                    </div>
                </div>
            }
            else if (_currentState == ResetState.Sent)
            {
                <!-- Email Sent State -->
                <div class="state-content">
                    <div class="card-header">
                        <div class="icon-container">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <path d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"></path>
                                <polyline points="22,6 12,13 2,6"></polyline>
                            </svg>
                        </div>
                        <h1 class="card-title">Check Your Email</h1>
                        <p class="card-subtitle">We've sent password reset instructions to your email</p>
                    </div>
                    
                    <div class="card-content">
                        <div class="success-message show">
                            <div class="success-icon">
                                <svg width="20" height="20" viewBox="0 0 20 20" fill="currentColor">
                                    <path d="M10 0C4.5 0 0 4.5 0 10s4.5 10 10 10 10-4.5 10-10S15.5 0 10 0zm-1.5 15L4 10.5l1.5-1.5 3 3 7-7L17 6.5 8.5 15z"/>
                                </svg>
                                Email sent successfully!
                            </div>
                            <p class="success-text">
                                We've sent an email to <strong>@_requestModel.Email</strong> with a link to reset your password. 
                                Please check your inbox and follow the instructions.
                            </p>
                        </div>
                        
                        <div class="info-box">
                            Didn't receive the email? Check your spam folder or request a new reset link. 
                            Reset links expire after 1 hour for security.
                        </div>
                        
                        <SfButton CssClass="btn-primary-full" 
                                  OnClick="@(() => _currentState = ResetState.Request)"
                                  IsPrimary="true">
                            Send New Link
                        </SfButton>
                    </div>
                    
                    <div class="card-footer">
                        <a href="/auth/login" class="footer-link">Back to sign in</a>
                    </div>
                </div>
            }
            else if (_currentState == ResetState.Reset)
            {
                <!-- Reset Password State -->
                <div class="state-content">
                    <div class="card-header">
                        <div class="icon-container">
                            <svg viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                <rect x="3" y="11" width="18" height="11" rx="2" ry="2"></rect>
                                <path d="M7 11V7a5 5 0 0110 0v4"></path>
                            </svg>
                        </div>
                        <h1 class="card-title">Create New Password</h1>
                        <p class="card-subtitle">Your new password must be different from previous passwords</p>
                    </div>
                    
                    <div class="card-content">
                        @if (_showError)
                        {
                            <div class="alert alert-error">
                                @_errorMessage
                            </div>
                        }
                        
                        <EditForm Model="@_resetModel" OnValidSubmit="@HandleResetSubmit">
                            <DataAnnotationsValidator />
                            
                            <div class="form-group">
                                <label class="form-label" for="new-password">New Password</label>
                                <SfTextBox @bind-Value="@_resetModel.NewPassword" 
                                           ID="new-password" 
                                           Placeholder="Enter new password" 
                                           Type="InputType.Password"
                                           CssClass="wcr-input"
                                           @oninput="@CheckPasswordStrength" />
                                <ValidationMessage For="@(() => _resetModel.NewPassword)" />
                                <div class="password-strength">
                                    <div class="strength-bar">
                                        <div class="strength-fill @_passwordStrengthClass" style="width: @_passwordStrengthPercent%"></div>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="form-group">
                                <label class="form-label" for="confirm-password">Confirm Password</label>
                                <SfTextBox @bind-Value="@_resetModel.ConfirmPassword" 
                                           ID="confirm-password" 
                                           Placeholder="Confirm new password" 
                                           Type="InputType.Password"
                                           CssClass="wcr-input" />
                                <ValidationMessage For="@(() => _resetModel.ConfirmPassword)" />
                            </div>
                            
                            <div class="password-requirements">
                                <p class="requirements-title">Password must contain:</p>
                                <div class="requirement @(_requirements["length"] ? "met" : "")">
                                    <svg class="requirement-icon" viewBox="0 0 16 16" fill="currentColor">
                                        <circle cx="8" cy="8" r="8" fill="@(_requirements["length"] ? "#228B22" : "#E5E5E5")"/>
                                        <path d="M6.5 10.5L4 8l1-1 1.5 1.5L10 5l1 1-4.5 4.5z" fill="white"/>
                                    </svg>
                                    At least 8 characters
                                </div>
                                <div class="requirement @(_requirements["uppercase"] ? "met" : "")">
                                    <svg class="requirement-icon" viewBox="0 0 16 16" fill="currentColor">
                                        <circle cx="8" cy="8" r="8" fill="@(_requirements["uppercase"] ? "#228B22" : "#E5E5E5")"/>
                                        <path d="M6.5 10.5L4 8l1-1 1.5 1.5L10 5l1 1-4.5 4.5z" fill="white"/>
                                    </svg>
                                    One uppercase letter
                                </div>
                                <div class="requirement @(_requirements["lowercase"] ? "met" : "")">
                                    <svg class="requirement-icon" viewBox="0 0 16 16" fill="currentColor">
                                        <circle cx="8" cy="8" r="8" fill="@(_requirements["lowercase"] ? "#228B22" : "#E5E5E5")"/>
                                        <path d="M6.5 10.5L4 8l1-1 1.5 1.5L10 5l1 1-4.5 4.5z" fill="white"/>
                                    </svg>
                                    One lowercase letter
                                </div>
                                <div class="requirement @(_requirements["number"] ? "met" : "")">
                                    <svg class="requirement-icon" viewBox="0 0 16 16" fill="currentColor">
                                        <circle cx="8" cy="8" r="8" fill="@(_requirements["number"] ? "#228B22" : "#E5E5E5")"/>
                                        <path d="M6.5 10.5L4 8l1-1 1.5 1.5L10 5l1 1-4.5 4.5z" fill="white"/>
                                    </svg>
                                    One number
                                </div>
                            </div>
                            
                            <SfButton Type="submit" 
                                      CssClass="btn-primary-full" 
                                      Disabled="@(!AllRequirementsMet || _isLoading)"
                                      IsPrimary="true">
                                @if (_isLoading)
                                {
                                    <span class="loading-spinner"></span>
                                    <span>Resetting...</span>
                                }
                                else
                                {
                                    <span>Reset Password</span>
                                }
                            </SfButton>
                        </EditForm>
                    </div>
                </div>
            }
        </div>
    </main>
</div>

<style>
    .auth-page {
        min-height: 100vh;
        display: flex;
        flex-direction: column;
        position: relative;
        background: linear-gradient(135deg, var(--wcr-color-cream) 0%, var(--wcr-color-ivory) 100%);
    }
    
    /* Background decorative shapes */
    .bg-shape-1 {
        position: fixed;
        top: -150px;
        right: -150px;
        width: 300px;
        height: 300px;
        background: radial-gradient(circle, var(--wcr-color-plum) 0%, transparent 70%);
        opacity: 0.1;
        border-radius: 50%;
        filter: blur(40px);
        z-index: -1;
    }
    
    .bg-shape-2 {
        position: fixed;
        bottom: -100px;
        left: -100px;
        width: 200px;
        height: 200px;
        background: radial-gradient(circle, var(--wcr-color-burgundy) 0%, transparent 70%);
        opacity: 0.08;
        border-radius: 50%;
        filter: blur(30px);
        z-index: -1;
    }
    
    /* Main Container */
    .main-container {
        flex: 1;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: var(--wcr-space-xl) var(--wcr-space-md);
    }
    
    /* Reset Card */
    .reset-card {
        background: var(--wcr-color-ivory);
        border-radius: 24px;
        box-shadow: var(--wcr-shadow-xl);
        width: 100%;
        max-width: 520px;
        overflow: hidden;
        position: relative;
    }
    
    /* Card Header */
    .card-header {
        background: linear-gradient(135deg, var(--wcr-color-burgundy) 0%, var(--wcr-color-plum) 100%);
        padding: var(--wcr-space-xl);
        text-align: center;
        position: relative;
        overflow: hidden;
    }
    
    .card-header::before {
        content: '';
        position: absolute;
        top: -50%;
        left: -50%;
        width: 200%;
        height: 200%;
        background: radial-gradient(circle, rgba(255,255,255,0.1) 0%, transparent 70%);
        transform: rotate(45deg);
    }
    
    .icon-container {
        width: 80px;
        height: 80px;
        background: rgba(255, 255, 255, 0.2);
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        margin: 0 auto var(--wcr-space-md);
        position: relative;
    }
    
    .icon-container svg {
        width: 40px;
        height: 40px;
        color: var(--wcr-color-ivory);
    }
    
    .card-title {
        font-family: var(--wcr-font-heading);
        font-size: 32px;
        font-weight: 800;
        color: var(--wcr-color-ivory);
        margin-bottom: var(--wcr-space-xs);
        position: relative;
    }
    
    .card-subtitle {
        color: var(--wcr-color-dusty-rose);
        font-size: 16px;
        position: relative;
        max-width: 400px;
        margin: 0 auto;
    }
    
    /* Content Sections */
    .card-content {
        padding: var(--wcr-space-xl);
    }
    
    /* Form Groups */
    .form-group {
        margin-bottom: var(--wcr-space-md);
    }
    
    .form-label {
        display: block;
        font-family: var(--wcr-font-heading);
        font-size: 14px;
        font-weight: 600;
        color: var(--wcr-color-smoke);
        margin-bottom: var(--wcr-space-xs);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }
    
    /* Custom input styling */
    .wcr-input .e-float-input,
    .wcr-input .e-input-group {
        margin-bottom: 0;
    }
    
    .wcr-input input {
        width: 100%;
        padding: var(--wcr-space-sm) var(--wcr-space-md) !important;
        font-family: var(--wcr-font-body);
        font-size: 16px;
        border: 2px solid var(--wcr-color-taupe) !important;
        border-radius: 8px !important;
        background: var(--wcr-color-cream) !important;
        color: var(--wcr-color-charcoal);
        transition: all 0.3s ease;
    }
    
    .wcr-input input:focus {
        outline: none;
        border-color: var(--wcr-color-burgundy) !important;
        background: var(--wcr-color-ivory) !important;
        box-shadow: 0 0 0 3px rgba(136, 1, 36, 0.1) !important;
    }
    
    /* Success Message */
    .success-message {
        background: linear-gradient(135deg, #e8f5e9 0%, #c8e6c9 100%);
        border: 1px solid var(--wcr-color-success);
        border-radius: 12px;
        padding: var(--wcr-space-md);
        margin-bottom: var(--wcr-space-lg);
        display: none;
    }
    
    .success-message.show {
        display: block;
    }
    
    .success-icon {
        display: flex;
        align-items: center;
        gap: var(--wcr-space-sm);
        color: var(--wcr-color-success);
        font-weight: 600;
        margin-bottom: var(--wcr-space-xs);
    }
    
    .success-text {
        color: var(--wcr-color-smoke);
        font-size: 14px;
        line-height: 1.5;
    }
    
    /* Info Box */
    .info-box {
        background: rgba(65, 105, 225, 0.1);
        border: 1px solid var(--wcr-color-info);
        border-radius: 8px;
        padding: var(--wcr-space-sm);
        margin-bottom: var(--wcr-space-lg);
        font-size: 14px;
        color: var(--wcr-color-info);
        line-height: 1.5;
    }
    
    /* Password Requirements */
    .password-requirements {
        background: var(--wcr-color-cream);
        border-radius: 8px;
        padding: var(--wcr-space-md);
        margin-bottom: var(--wcr-space-lg);
    }
    
    .requirements-title {
        font-family: var(--wcr-font-heading);
        font-size: 14px;
        font-weight: 600;
        color: var(--wcr-color-smoke);
        margin-bottom: var(--wcr-space-sm);
    }
    
    .requirement {
        display: flex;
        align-items: center;
        gap: var(--wcr-space-xs);
        font-size: 14px;
        color: var(--wcr-color-stone);
        margin-bottom: var(--wcr-space-xs);
        transition: color 0.3s ease;
    }
    
    .requirement.met {
        color: var(--wcr-color-success);
    }
    
    .requirement-icon {
        width: 16px;
        height: 16px;
        flex-shrink: 0;
    }
    
    /* Password Strength Indicator */
    .password-strength {
        margin-top: var(--wcr-space-xs);
        margin-bottom: var(--wcr-space-sm);
    }
    
    .strength-bar {
        height: 4px;
        background: var(--wcr-color-taupe);
        border-radius: 2px;
        overflow: hidden;
    }
    
    .strength-fill {
        height: 100%;
        width: 0%;
        transition: width 0.3s ease, background-color 0.3s ease;
        background: var(--wcr-color-error);
    }
    
    .strength-fill.weak {
        width: 33%;
        background: var(--wcr-color-error);
    }
    
    .strength-fill.medium {
        width: 66%;
        background: var(--wcr-color-warning);
    }
    
    .strength-fill.strong {
        width: 100%;
        background: var(--wcr-color-success);
    }
    
    /* Button styling */
    .btn-primary-full {
        width: 100%;
        padding: var(--wcr-space-md) !important;
        margin-top: var(--wcr-space-lg);
    }
    
    /* Loading spinner */
    .loading-spinner {
        display: inline-block;
        width: 20px;
        height: 20px;
        border: 3px solid var(--wcr-color-midnight);
        border-top-color: transparent;
        border-radius: 50%;
        animation: spin 0.8s linear infinite;
    }
    
    @@keyframes spin {
        to { transform: rotate(360deg); }
    }
    
    /* Footer Links */
    .card-footer {
        text-align: center;
        padding: var(--wcr-space-md);
        background: var(--wcr-color-cream);
        border-top: 1px solid var(--wcr-color-taupe);
    }
    
    .footer-link {
        color: var(--wcr-color-burgundy);
        text-decoration: none;
        font-size: 14px;
        font-weight: 600;
        transition: color 0.3s ease;
    }
    
    .footer-link:hover {
        color: var(--wcr-color-burgundy-dark);
        text-decoration: underline;
    }
    
    /* Alert messages */
    .alert {
        padding: var(--wcr-space-sm) var(--wcr-space-md);
        border-radius: var(--wcr-radius-md);
        margin-bottom: var(--wcr-space-md);
        font-size: 14px;
    }
    
    .alert-error {
        background: rgba(220, 20, 60, 0.1);
        border: 1px solid var(--wcr-color-error);
        color: var(--wcr-color-error);
    }
    
    /* Responsive */
    @@media (max-width: 640px) {
        .card-title {
            font-size: 28px;
        }
        
        .card-content {
            padding: var(--wcr-space-lg);
        }
    }
</style>

@code {
    [Parameter] public string? Token { get; set; }
    
    private enum ResetState { Request, Sent, Reset }
    private ResetState _currentState = ResetState.Request;
    
    private RequestModel _requestModel = new();
    private ResetModel _resetModel = new();
    private bool _isLoading = false;
    private bool _showError = false;
    private string _errorMessage = "";
    
    // Password requirements tracking
    private Dictionary<string, bool> _requirements = new()
    {
        { "length", false },
        { "uppercase", false },
        { "lowercase", false },
        { "number", false }
    };
    
    private string _passwordStrengthClass = "";
    private int _passwordStrengthPercent = 0;
    
    private bool AllRequirementsMet => _requirements.Values.All(v => v);

    protected override void OnInitialized()
    {
        // If we have a token in the URL, go directly to reset state
        if (!string.IsNullOrEmpty(Token))
        {
            _currentState = ResetState.Reset;
            _resetModel.Token = Token;
        }
    }

    private async Task HandleRequestSubmit()
    {
        _isLoading = true;
        _showError = false;
        
        try
        {
            var result = await AuthService.RequestPasswordResetAsync(_requestModel.Email);
            
            if (result.Success)
            {
                _currentState = ResetState.Sent;
            }
            else
            {
                _showError = true;
                _errorMessage = result.Error ?? "Unable to send reset email. Please try again.";
            }
        }
        catch (Exception ex)
        {
            _showError = true;
            _errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private async Task HandleResetSubmit()
    {
        _isLoading = true;
        _showError = false;
        
        try
        {
            var result = await AuthService.ConfirmPasswordResetAsync(_resetModel.Token, _resetModel.NewPassword);
            
            if (result.Success)
            {
                // Navigate to login with success message
                Navigation.NavigateTo("/auth/login?reset=success");
            }
            else
            {
                _showError = true;
                _errorMessage = result.Error ?? "Unable to reset password. The link may have expired.";
            }
        }
        catch (Exception ex)
        {
            _showError = true;
            _errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            _isLoading = false;
        }
    }

    private void CheckPasswordStrength(ChangeEventArgs e)
    {
        var password = e.Value?.ToString() ?? "";
        _resetModel.NewPassword = password;
        
        // Check requirements
        _requirements["length"] = password.Length >= 8;
        _requirements["uppercase"] = System.Text.RegularExpressions.Regex.IsMatch(password, @"[A-Z]");
        _requirements["lowercase"] = System.Text.RegularExpressions.Regex.IsMatch(password, @"[a-z]");
        _requirements["number"] = System.Text.RegularExpressions.Regex.IsMatch(password, @"[0-9]");
        
        // Calculate strength
        var metCount = _requirements.Values.Count(v => v);
        
        switch (metCount)
        {
            case 0:
                _passwordStrengthClass = "";
                _passwordStrengthPercent = 0;
                break;
            case 1:
            case 2:
                _passwordStrengthClass = "weak";
                _passwordStrengthPercent = 33;
                break;
            case 3:
                _passwordStrengthClass = "medium";
                _passwordStrengthPercent = 66;
                break;
            case 4:
                _passwordStrengthClass = "strong";
                _passwordStrengthPercent = 100;
                break;
        }
    }

    // Request model
    public class RequestModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        public string Email { get; set; } = string.Empty;
    }

    // Reset model
    public class ResetModel
    {
        public string Token { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d).+$", 
            ErrorMessage = "Password must contain at least one uppercase letter, one lowercase letter, and one number")]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please confirm your password")]
        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;
    }
}