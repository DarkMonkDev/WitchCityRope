@page "/confirm-email"
@page "/identity/account/confirmemail"
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using System.Text
@using WitchCityRope.Infrastructure.Identity
@inject UserManager<WitchCityRopeUser> UserManager
@inject NavigationManager Navigation
@inject ILogger<ConfirmEmail> Logger

<PageTitle>Email Confirmation - Witch City Rope</PageTitle>

<div class="auth-container">
    <div class="auth-card">
        <div class="auth-header">
            <h1 class="auth-title">EMAIL CONFIRMATION</h1>
        </div>

        <div class="auth-content">
            @if (isLoading)
            {
                <div class="text-center">
                    <div class="spinner-border text-primary" role="status">
                        <span class="visually-hidden">Confirming email...</span>
                    </div>
                    <p class="mt-3">Confirming your email address...</p>
                </div>
            }
            else if (isSuccess)
            {
                <div class="alert alert-success">
                    <i class="bi bi-check-circle-fill me-2"></i>
                    <strong>Success!</strong> Your email has been confirmed.
                </div>
                <p class="text-center mb-4">
                    Thank you for confirming your email. You can now log in to your account.
                </p>
                <a href="/Identity/Account/Login" class="btn btn-primary w-100">
                    Go to Login
                </a>
            }
            else if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    <strong>Error!</strong> @errorMessage
                </div>
                <p class="text-center mb-4">
                    The confirmation link may be invalid or expired. Please try requesting a new confirmation email.
                </p>
                <a href="/Identity/Account/Login" class="btn btn-secondary w-100">
                    Back to Login
                </a>
            }
            else
            {
                <div class="alert alert-warning">
                    <i class="bi bi-exclamation-triangle-fill me-2"></i>
                    Invalid confirmation link.
                </div>
                <p class="text-center mb-4">
                    The confirmation link appears to be invalid. Please check your email for the correct link.
                </p>
                <a href="/Identity/Account/Login" class="btn btn-secondary w-100">
                    Back to Login
                </a>
            }
        </div>
    </div>
</div>

<style>
    .auth-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 20px;
        background: linear-gradient(135deg, #f5f5f5 0%, #e8e8e8 100%);
    }

    .auth-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
        overflow: hidden;
        width: 100%;
        max-width: 450px;
    }

    .auth-header {
        background: #8B4513;
        color: white;
        padding: 2rem;
        text-align: center;
    }

    .auth-title {
        font-size: 1.75rem;
        font-weight: 700;
        margin: 0;
        letter-spacing: 1px;
    }

    .auth-content {
        padding: 2rem;
    }

    .alert {
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
    }

    .alert-success {
        background-color: #d4edda;
        border-color: #c3e6cb;
        color: #155724;
    }

    .alert-danger {
        background-color: #f8d7da;
        border-color: #f5c6cb;
        color: #721c24;
    }

    .alert-warning {
        background-color: #fff3cd;
        border-color: #ffeaa7;
        color: #856404;
    }

    .btn {
        padding: 0.75rem 1.5rem;
        font-weight: 600;
        border-radius: 8px;
        transition: all 0.3s ease;
        text-decoration: none;
        display: inline-block;
        text-align: center;
        border: none;
        cursor: pointer;
    }

    .btn-primary {
        background: #8B4513;
        color: white;
    }

    .btn-primary:hover {
        background: #6B3410;
        color: white;
        transform: translateY(-2px);
        box-shadow: 0 4px 12px rgba(139, 69, 19, 0.3);
    }

    .btn-secondary {
        background: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background: #5a6268;
        color: white;
    }

    .spinner-border {
        width: 3rem;
        height: 3rem;
        border-width: 0.3rem;
    }

    .w-100 {
        width: 100%;
    }

    .text-center {
        text-align: center;
    }

    .mt-3 {
        margin-top: 1rem;
    }

    .mt-4 {
        margin-top: 1.5rem;
    }

    .mb-4 {
        margin-bottom: 1.5rem;
    }

    .me-2 {
        margin-right: 0.5rem;
    }
</style>

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? UserId { get; set; }

    [Parameter]
    [SupplyParameterFromQuery]
    public string? Code { get; set; }

    private bool isLoading = true;
    private bool isSuccess = false;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (string.IsNullOrEmpty(UserId) || string.IsNullOrEmpty(Code))
        {
            isLoading = false;
            errorMessage = "Invalid confirmation link.";
            return;
        }

        try
        {
            var user = await UserManager.FindByIdAsync(UserId);
            if (user == null)
            {
                errorMessage = "User not found.";
                return;
            }

            var code = Encoding.UTF8.GetString(WebEncoders.Base64UrlDecode(Code));
            var result = await UserManager.ConfirmEmailAsync(user, code);

            if (result.Succeeded)
            {
                isSuccess = true;
                Logger.LogInformation($"User {user.Email} confirmed their email.");
            }
            else
            {
                errorMessage = "Failed to confirm email. The link may have expired.";
                Logger.LogWarning($"Failed to confirm email for user {user.Email}: {string.Join(", ", result.Errors.Select(e => e.Description))}");
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error confirming email");
            errorMessage = "An error occurred while confirming your email.";
        }
        finally
        {
            isLoading = false;
        }
    }
}