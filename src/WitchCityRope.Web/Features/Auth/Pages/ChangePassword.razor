@page "/change-password"
@page "/identity/account/manage/changepassword"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@attribute [Authorize]

@using Microsoft.AspNetCore.Identity
@using System.ComponentModel.DataAnnotations
@using WitchCityRope.Infrastructure.Identity
@using WitchCityRope.Web.Shared.Validation.Components
@using Microsoft.AspNetCore.Authorization

@inject UserManager<WitchCityRopeUser> UserManager
@inject SignInManager<WitchCityRopeUser> SignInManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject ILogger<ChangePassword> Logger

<PageTitle>Change Password - Witch City Rope</PageTitle>

<div class="auth-container">
    <div class="auth-card change-password-card">
        <div class="auth-header">
            <h1 class="auth-title">CHANGE PASSWORD</h1>
            <p class="auth-subtitle">Keep your account secure by updating your password regularly.</p>
        </div>

        @if (showSuccess)
        {
            <div class="alert alert-success">
                <i class="bi bi-check-circle"></i>
                <span>Your password has been changed successfully!</span>
            </div>
        }
        else
        {
            <EditForm Model="changePasswordModel" OnValidSubmit="HandleChangePassword">
                <DataAnnotationsValidator />
                
                <div class="form-group">
                    <WcrInputPassword @bind-Value="changePasswordModel.CurrentPassword" 
                                      Placeholder="Enter current password"
                                      Label="CURRENT PASSWORD*"
                                      ShowRequirements="false" />
                </div>

                <div class="form-group">
                    <WcrInputPassword @bind-Value="changePasswordModel.NewPassword" 
                                      Placeholder="Choose new password"
                                      Label="NEW PASSWORD*"
                                      ShowRequirements="true" />
                </div>

                <div class="form-group">
                    <WcrInputPassword @bind-Value="changePasswordModel.ConfirmPassword" 
                                      Placeholder="Confirm new password"
                                      Label="CONFIRM NEW PASSWORD*"
                                      ShowRequirements="false" />
                </div>

                <WcrValidationSummary />

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        <i class="bi bi-exclamation-triangle"></i>
                        <span>@errorMessage</span>
                    </div>
                }

                <button type="submit" class="btn-primary change-password-btn" disabled="@isSubmitting">
                    @if (isSubmitting)
                    {
                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                        <span>Updating...</span>
                    }
                    else
                    {
                        <span>UPDATE PASSWORD</span>
                    }
                </button>
            </EditForm>
        }

        <div class="auth-footer">
            <p>Need help? <a href="/forgot-password" class="auth-link">Reset Password</a></p>
            <p><a href="/member/account" class="auth-link">‚Üê Back to Account Settings</a></p>
        </div>
    </div>
</div>

<style>
    .change-password-card {
        max-width: 450px;
        margin: 0 auto;
    }

    .auth-subtitle {
        color: #666;
        font-size: 0.95rem;
        margin-bottom: 2rem;
        line-height: 1.5;
    }

    .change-password-btn {
        width: 100%;
        padding: 14px;
        font-size: 1rem;
        font-weight: 600;
        letter-spacing: 0.5px;
        margin-top: 1.5rem;
        transition: all 0.3s ease;
    }

    .change-password-btn:hover:not(:disabled) {
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(139, 69, 19, 0.3);
    }

    .change-password-btn:disabled {
        opacity: 0.7;
        cursor: not-allowed;
    }

    .alert {
        padding: 1rem;
        border-radius: 8px;
        display: flex;
        align-items: flex-start;
        gap: 0.75rem;
        margin-bottom: 1rem;
    }

    .alert i {
        font-size: 1.25rem;
        flex-shrink: 0;
        margin-top: 2px;
    }

    .alert-success {
        background-color: rgba(40, 167, 69, 0.1);
        border: 1px solid rgba(40, 167, 69, 0.2);
        color: #155724;
    }

    .alert-success i {
        color: #28a745;
    }

    .alert-danger {
        background-color: rgba(220, 53, 69, 0.1);
        border: 1px solid rgba(220, 53, 69, 0.2);
        color: #721c24;
    }

    .alert-danger i {
        color: #dc3545;
    }

    .auth-footer {
        margin-top: 2rem;
        text-align: center;
    }

    .auth-footer p {
        margin: 0.5rem 0;
        color: #666;
        font-size: 0.9rem;
    }

    .auth-link {
        color: var(--primary-color);
        text-decoration: none;
        font-weight: 500;
        transition: color 0.2s ease;
    }

    .auth-link:hover {
        color: var(--primary-hover);
        text-decoration: underline;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.2rem;
    }

    /* Security notice */
    .security-notice {
        background-color: rgba(255, 193, 7, 0.1);
        border: 1px solid rgba(255, 193, 7, 0.3);
        border-radius: 8px;
        padding: 1rem;
        margin-bottom: 1.5rem;
        font-size: 0.9rem;
        color: #856404;
    }

    .security-notice i {
        color: #ffc107;
        margin-right: 0.5rem;
    }

    /* Dark mode support */
    @@media (prefers-color-scheme: dark) {
        .change-password-card {
            background-color: #1a1a1a;
            border-color: #333;
        }

        .auth-subtitle {
            color: #999;
        }

        .alert-success {
            background-color: rgba(40, 167, 69, 0.05);
            border-color: rgba(40, 167, 69, 0.3);
            color: #5cb85c;
        }

        .alert-danger {
            background-color: rgba(220, 53, 69, 0.05);
            border-color: rgba(220, 53, 69, 0.3);
            color: #e74c3c;
        }

        .security-notice {
            background-color: rgba(255, 193, 7, 0.05);
            border-color: rgba(255, 193, 7, 0.2);
            color: #ffc107;
        }

        .auth-footer p {
            color: #999;
        }
    }
</style>

@code {
    private ChangePasswordModel changePasswordModel = new();
    private bool isSubmitting = false;
    private bool showSuccess = false;
    private string? errorMessage;
    private WitchCityRopeUser? currentUser;

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        [DataType(DataType.Password)]
        public string CurrentPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "New password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 8)]
        [DataType(DataType.Password)]
        public string NewPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password confirmation is required")]
        [Compare("NewPassword", ErrorMessage = "Passwords do not match")]
        [DataType(DataType.Password)]
        public string ConfirmPassword { get; set; } = string.Empty;
    }

    protected override async Task OnInitializedAsync()
    {
        // Skip auth operations during prerendering
        if (!OperatingSystem.IsBrowser())
        {
            return;
        }
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState?.User?.Identity?.IsAuthenticated != true)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }

        currentUser = await UserManager.GetUserAsync(authState.User);
        if (currentUser == null)
        {
            Navigation.NavigateTo("/login", forceLoad: true);
            return;
        }

        // Check if user has a password set (might be using external login)
        var hasPassword = await UserManager.HasPasswordAsync(currentUser);
        if (!hasPassword)
        {
            Navigation.NavigateTo("/set-password");
            return;
        }
    }

    private async Task HandleChangePassword()
    {
        if (currentUser == null)
        {
            errorMessage = "Session expired. Please refresh the page.";
            return;
        }

        try
        {
            isSubmitting = true;
            errorMessage = null;
            StateHasChanged();

            // Verify current password is correct
            var passwordCheck = await UserManager.CheckPasswordAsync(currentUser, changePasswordModel.CurrentPassword);
            if (!passwordCheck)
            {
                errorMessage = "Current password is incorrect.";
                return;
            }

            // Check if new password is same as current
            if (changePasswordModel.CurrentPassword == changePasswordModel.NewPassword)
            {
                errorMessage = "New password must be different from current password.";
                return;
            }

            // Change the password
            var result = await UserManager.ChangePasswordAsync(
                currentUser, 
                changePasswordModel.CurrentPassword, 
                changePasswordModel.NewPassword);

            if (result.Succeeded)
            {
                await SignInManager.RefreshSignInAsync(currentUser);
                Logger.LogInformation("User {UserId} changed their password successfully", currentUser.Id);
                
                showSuccess = true;
                changePasswordModel = new(); // Clear form
                
                // Reset 2FA if it was enabled (security best practice)
                if (await UserManager.GetTwoFactorEnabledAsync(currentUser))
                {
                    Logger.LogInformation("Resetting 2FA for user {UserId} after password change", currentUser.Id);
                }
            }
            else
            {
                var errors = string.Join(" ", result.Errors.Select(e => e.Description));
                errorMessage = $"Password change failed: {errors}";
                Logger.LogWarning("Password change failed for user {UserId}: {Errors}", currentUser.Id, errors);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error during password change for user {UserId}", currentUser?.Id);
            errorMessage = "An error occurred while changing your password. Please try again.";
        }
        finally
        {
            isSubmitting = false;
            StateHasChanged();
        }
    }
}