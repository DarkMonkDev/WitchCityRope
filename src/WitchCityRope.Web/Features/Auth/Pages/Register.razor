@page "/register"
@page "/Identity/Account/Register"
@rendermode @(new Microsoft.AspNetCore.Components.Web.InteractiveServerRenderMode())
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using WitchCityRope.Infrastructure.Identity
@using WitchCityRope.Web.Shared.Validation.Components
@using WitchCityRope.Web.Shared.Validation.Services
@using System.ComponentModel.DataAnnotations
@using System.Text
@attribute [AllowAnonymous]
@using System.Text.Encodings.Web
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.AspNetCore.Identity.UI.Services
@using WitchCityRope.Core.ValueObjects
@using WitchCityRope.Core.Enums
@inject UserManager<WitchCityRopeUser> UserManager
@inject SignInManager<WitchCityRopeUser> SignInManager
@inject ILogger<Register> Logger
@inject NavigationManager Navigation
@inject IValidationService ValidationService
@inject IEmailSender EmailSender

<PageTitle>Create Account - Witch City Rope</PageTitle>

<div class="register-page">
    <div class="register-container">
        <div class="register-card">
            <!-- Header Section -->
            <div class="register-header">
                <h1 class="welcome-title">Join Our Community</h1>
                <p class="welcome-subtitle">Salem's premier rope education<br>community</p>
                <div class="age-notice">
                    21+ COMMUNITY â€¢ AGE VERIFICATION REQUIRED
                </div>
            </div>

            <!-- Create Account Header -->
            <div class="register-section-header">
                <h2 class="section-title">Create Account</h2>
            </div>

            <!-- Form Content -->
            <div class="register-content">
                @if (externalLogins?.Count > 0)
                {
                    <!-- External Login Section -->
                    <EditForm Model="@externalLoginModel" OnValidSubmit="OnExternalLogin" FormName="external">
                        @foreach (var provider in externalLogins)
                        {
                            <button type="submit" class="google-login-btn" name="provider" value="@provider.Name" title="Sign up using your @provider.DisplayName account">
                                <svg class="google-icon" width="18" height="18" viewBox="0 0 18 18">
                                    <path fill="#4285F4" d="M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z"/>
                                    <path fill="#34A853" d="M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.96l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.66z"/>
                                    <path fill="#FBBC05" d="M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z"/>
                                    <path fill="#EA4335" d="M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z"/>
                                </svg>
                                Continue with @provider.DisplayName
                            </button>
                        }
                    </EditForm>

                    <div class="divider">
                        <span>OR</span>
                    </div>
                }

                <!-- Registration Form -->
                <EditForm Model="@registerModel" OnValidSubmit="HandleRegister" FormName="register">
                    <DataAnnotationsValidator />
                    
                    @if (!string.IsNullOrEmpty(errorMessage))
                    {
                        <div class="validation-errors" role="alert">
                            @errorMessage
                        </div>
                    }

                    <WcrValidationSummary />
                    
                    <WcrInputEmail @bind-Value="registerModel.Email"
                                   Label="EMAIL ADDRESS"
                                   IsRequired="true"
                                   Placeholder="your@email.com"
                                   HelpText="We'll use this to send event confirmations"
                                   AutoFocus="true" />

                    <WcrInputText @bind-Value="registerModel.SceneName"
                                  Label="SCENE NAME"
                                  Name="sceneName"
                                  IsRequired="true"
                                  Placeholder="Your preferred name in the community"
                                  HelpText="This is how you'll be known at events" />

                    <WcrInputPassword @bind-Value="registerModel.Password"
                                      Label="PASSWORD"
                                      Name="password"
                                      IsRequired="true"
                                      Placeholder="Create a strong password"
                                      ShowStrengthIndicator="true"
                                      ShowRequirements="true"
                                      ShowToggle="true" />

                    <WcrInputPassword @bind-Value="registerModel.ConfirmPassword"
                                      Label="CONFIRM PASSWORD"
                                      Name="confirmPassword"
                                      IsRequired="true"
                                      Placeholder="Re-enter your password"
                                      ShowStrengthIndicator="false"
                                      ShowRequirements="false"
                                      ShowToggle="true" />

                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <WcrInputCheckbox @bind-Value="registerModel.AgeConfirmation" Label="I confirm that I am 21 years of age or older" />
                        </label>
                    </div>

                    <div class="checkbox-group">
                        <label class="checkbox-label">
                            <WcrInputCheckbox @bind-Value="registerModel.AcceptTerms" Name="agreeTerms" />
                            <span>
                                I agree to the <a href="/terms" target="_blank">Terms of Service</a> and 
                                <a href="/privacy" target="_blank">Privacy Policy</a>
                            </span>
                        </label>
                    </div>

                    <button type="submit" class="create-account-btn" disabled="@isSubmitting">
                        @if (isSubmitting)
                        {
                            <span>CREATING ACCOUNT...</span>
                        }
                        else
                        {
                            <span>CREATE ACCOUNT</span>
                        }
                    </button>
                </EditForm>

                <!-- Footer Links -->
                <div class="register-footer">
                    <div class="divider-with-text">
                        <span>Already have an account?</span>
                    </div>
                    <a href="/login?returnUrl=@ReturnUrl" class="sign-in-link">
                        SIGN IN
                    </a>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.register-page {
    min-height: 100vh;
    background-color: var(--wcr-color-midnight);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem 1rem;
    font-family: var(--wcr-font-body);
}

.register-container {
    width: 100%;
    max-width: 480px;
}

.register-card {
    background: var(--wcr-color-ivory);
    border-radius: 16px;
    box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    overflow: hidden;
}

.register-header {
    background: var(--wcr-color-burgundy);
    color: var(--wcr-color-ivory);
    text-align: center;
    padding: 3rem 2rem 2rem;
}

.welcome-title {
    font-family: var(--wcr-font-heading);
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 0.5rem;
    border: 2px solid var(--wcr-color-ivory);
    padding: 0.5rem 1.5rem;
    display: inline-block;
    border-radius: 8px;
}

.welcome-subtitle {
    font-size: 1rem;
    opacity: 0.9;
    margin: 1rem 0 1.5rem;
    line-height: 1.4;
}

.age-notice {
    font-size: 0.75rem;
    font-weight: 600;
    letter-spacing: 1px;
    text-transform: uppercase;
    opacity: 0.8;
}

.register-section-header {
    background: var(--wcr-color-cream);
    padding: 1.5rem 2rem;
    border-bottom: 2px solid var(--wcr-color-taupe);
}

.section-title {
    margin: 0;
    font-family: var(--wcr-font-heading);
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--wcr-color-burgundy);
    text-align: center;
    text-transform: uppercase;
    letter-spacing: 1px;
}

.register-content {
    padding: 2rem;
}

.google-login-btn {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid var(--wcr-color-cream);
    border-radius: 8px;
    background: var(--wcr-color-ivory);
    color: var(--wcr-color-charcoal);
    font-family: var(--wcr-font-body);
    font-weight: 500;
    font-size: 0.9rem;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1.5rem;
}

.google-login-btn:hover {
    border-color: var(--wcr-color-stone);
    background: var(--wcr-color-cream);
}

.google-icon {
    flex-shrink: 0;
}

.divider {
    text-align: center;
    margin: 1.5rem 0;
    position: relative;
}

.divider::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: var(--wcr-color-cream);
}

.divider span {
    background: var(--wcr-color-ivory);
    padding: 0 1rem;
    color: var(--wcr-color-stone);
    font-size: 0.85rem;
    font-weight: 500;
    position: relative;
}

/* Override validation component styles for this form */
.register-content .wcr-label {
    font-family: var(--wcr-font-heading);
    font-weight: 600;
    font-size: 0.75rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    color: var(--wcr-color-charcoal);
}

.register-content .wcr-input {
    padding: 0.875rem 1rem;
    border: 2px solid var(--wcr-color-cream);
    border-radius: 8px;
    background: var(--wcr-color-ivory);
    font-size: 0.95rem;
}

.register-content .wcr-input:focus {
    border-color: var(--wcr-color-burgundy);
    box-shadow: 0 0 0 3px rgba(136, 1, 36, 0.1);
}

.checkbox-group {
    margin: 1rem 0;
}

.checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    font-size: 0.9rem;
    color: var(--wcr-color-charcoal);
    line-height: 1.4;
}

.checkbox-input {
    width: 18px;
    height: 18px;
    border: 2px solid var(--wcr-color-stone);
    border-radius: 3px;
    cursor: pointer;
    flex-shrink: 0;
    margin-top: 2px;
}

.checkbox-input:checked {
    background-color: var(--wcr-color-burgundy);
    border-color: var(--wcr-color-burgundy);
}

.checkbox-text a {
    color: var(--wcr-color-burgundy);
    text-decoration: none;
    font-weight: 600;
}

.checkbox-text a:hover {
    text-decoration: underline;
}

.create-account-btn {
    width: 100%;
    padding: 1rem;
    background: var(--wcr-color-amber);
    color: var(--wcr-color-midnight);
    border: none;
    border-radius: 8px;
    font-family: var(--wcr-font-heading);
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    cursor: pointer;
    transition: all 0.3s ease;
    margin: 1.5rem 0 1rem;
}

.create-account-btn:hover:not(:disabled) {
    background: var(--wcr-color-amber-dark);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(255, 191, 0, 0.4);
}

.create-account-btn:active:not(:disabled) {
    transform: translateY(0);
}

.create-account-btn:disabled {
    opacity: 0.7;
    cursor: not-allowed;
}

.register-footer {
    text-align: center;
    margin-top: 2rem;
}

.divider-with-text {
    position: relative;
    margin: 1.5rem 0;
}

.divider-with-text::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: var(--wcr-color-taupe);
}

.divider-with-text span {
    background: var(--wcr-color-ivory);
    padding: 0 1rem;
    color: var(--wcr-color-stone);
    font-size: 0.85rem;
    font-weight: 500;
    position: relative;
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.sign-in-link {
    display: inline-block;
    width: 100%;
    padding: 1rem;
    background: transparent;
    color: var(--wcr-color-burgundy);
    border: 2px solid var(--wcr-color-burgundy);
    border-radius: 8px;
    font-family: var(--wcr-font-heading);
    font-weight: 700;
    font-size: 0.9rem;
    text-transform: uppercase;
    letter-spacing: 1px;
    text-decoration: none;
    transition: all 0.3s ease;
}

.sign-in-link:hover {
    background: var(--wcr-color-burgundy);
    color: var(--wcr-color-ivory);
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(136, 1, 36, 0.3);
    text-decoration: none;
}

.validation-errors {
    background: rgba(220, 20, 60, 0.1);
    border: 2px solid var(--wcr-color-error);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 1.5rem;
    color: var(--wcr-color-error-dark);
    font-size: 0.9rem;
}

@@media (max-width: 640px) {
    .register-page {
        padding: 1rem 0.5rem;
    }
    
    .register-header {
        padding: 2rem 1.5rem 1.5rem;
    }
    
    .welcome-title {
        font-size: 1.75rem;
    }
    
    .register-content {
        padding: 1.5rem;
    }
}
</style>

@code {
    [SupplyParameterFromQuery(Name = "returnUrl")] 
    private string? ReturnUrl { get; set; }
    
    private RegisterInputModel registerModel = new();
    private ExternalLoginModel externalLoginModel = new();
    private IList<AuthenticationScheme>? externalLogins;
    private string? errorMessage;
    private bool isSubmitting;

    protected override async Task OnInitializedAsync()
    {
        // Default to home page if no return URL
        ReturnUrl ??= "/";
        
        // Get external authentication providers
        externalLogins = (await SignInManager.GetExternalAuthenticationSchemesAsync()).ToList();
    }

    private async Task HandleRegister()
    {
        if (isSubmitting) return;
        
        // Validate age confirmation
        if (!registerModel.AgeConfirmation)
        {
            errorMessage = "You must confirm that you are 21 years of age or older.";
            return;
        }

        // Validate terms acceptance
        if (!registerModel.AcceptTerms)
        {
            errorMessage = "You must accept the Terms of Service and Privacy Policy.";
            return;
        }
        
        isSubmitting = true;
        errorMessage = null;

        try
        {
            // Check if email is already taken
            var existingUser = await UserManager.FindByEmailAsync(registerModel.Email);
            if (existingUser != null)
            {
                errorMessage = "Email is already registered.";
                return;
            }

            // Check if scene name is unique
            var isSceneNameUnique = await ValidationService.IsSceneNameUniqueAsync(registerModel.SceneName);
            if (!isSceneNameUnique)
            {
                errorMessage = "This scene name is already taken. Please choose another.";
                return;
            }

            // For registration, we'll create a minimal user with required fields
            // The full constructor requires encrypted legal name and other complex setup
            // We'll use the simpler approach and update scene name after creation
            var user = new WitchCityRopeUser(
                encryptedLegalName: "", // Empty for now, user can add later in profile
                sceneName: SceneName.Create(registerModel.SceneName),
                email: EmailAddress.Create(registerModel.Email),
                dateOfBirth: DateTime.UtcNow.AddYears(-25), // Default age, user can update in profile
                role: UserRole.Attendee // Default role for new registrations
            );
            
            // Set username to email for now
            user.UserName = registerModel.Email;

            // Create the user
            var result = await UserManager.CreateAsync(user, registerModel.Password);

            if (result.Succeeded)
            {
                Logger.LogInformation("User created a new account with password.");

                // Generate email confirmation token
                var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
                code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
                
                var callbackUrl = Navigation.GetUriWithQueryParameters(
                    Navigation.ToAbsoluteUri("/Identity/Account/ConfirmEmail").AbsoluteUri,
                    new Dictionary<string, object?> { ["userId"] = user.Id, ["code"] = code, ["returnUrl"] = ReturnUrl });

                // Send confirmation email
                await EmailSender.SendEmailAsync(registerModel.Email, "Confirm your email",
                    $"Please confirm your account by <a href='{HtmlEncoder.Default.Encode(callbackUrl)}'>clicking here</a>.");

                // Check if email confirmation is required
                if (UserManager.Options.SignIn.RequireConfirmedAccount)
                {
                    Navigation.NavigateTo($"/Identity/Account/RegisterConfirmation?email={registerModel.Email}&returnUrl={ReturnUrl}", forceLoad: true);
                }
                else
                {
                    // Sign in the user
                    await SignInManager.SignInAsync(user, isPersistent: false);
                    Navigation.NavigateTo(ReturnUrl, forceLoad: true);
                }
            }
            else
            {
                // Combine all error messages
                errorMessage = string.Join(" ", result.Errors.Select(e => e.Description));
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Registration failed with exception");
            errorMessage = "An error occurred. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private Task OnExternalLogin()
    {
        // External login is handled by the form post to ExternalLogin page
        Navigation.NavigateTo($"/Identity/Account/ExternalLogin?returnUrl={Uri.EscapeDataString(ReturnUrl)}", forceLoad: true);
        return Task.CompletedTask;
    }

    public class RegisterInputModel
    {
        [Required(ErrorMessage = "Email is required")]
        [EmailAddress(ErrorMessage = "Invalid email address")]
        [Display(Name = "Email")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Scene name is required")]
        [StringLength(50, ErrorMessage = "Scene name must be between {2} and {1} characters", MinimumLength = 2)]
        [Display(Name = "Scene Name")]
        public string SceneName { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, ErrorMessage = "Password must be at least {2} characters long", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = string.Empty;

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match")]
        public string ConfirmPassword { get; set; } = string.Empty;

        [Required(ErrorMessage = "You must confirm that you are 21 or older")]
        [Display(Name = "Age Confirmation")]
        public bool AgeConfirmation { get; set; }

        [Required(ErrorMessage = "You must accept the terms")]
        [Display(Name = "Accept Terms")]
        public bool AcceptTerms { get; set; }
    }

    public class ExternalLoginModel
    {
        public string Provider { get; set; } = string.Empty;
    }
}