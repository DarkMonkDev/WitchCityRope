@using WitchCityRope.Core.DTOs
@inject HttpClient HttpClient
@inject ILogger<UserEventsTab> Logger

<div class="user-events-tab">
    @if (_isLoading)
    {
        <div class="text-center py-4">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading events...</span>
            </div>
            <p class="mt-2">Loading event history...</p>
        </div>
    }
    else if (_events.Any())
    {
        <div class="events-summary mb-4">
            <div class="row">
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-value">@_events.Count(e => e.IsAttending)</div>
                        <div class="stat-label">Events Attended</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-value">@_events.Count(e => e.IsOrganizer)</div>
                        <div class="stat-label">Events Organized</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-value">@_events.Count(e => e.RsvpStatus == "Cancelled")</div>
                        <div class="stat-label">Cancellations</div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="stat-card">
                        <div class="stat-value">@_events.Count(e => e.RsvpStatus == "NoShow")</div>
                        <div class="stat-label">No Shows</div>
                    </div>
                </div>
            </div>
        </div>

        <div class="events-list">
            <h6 class="mb-3">Event History</h6>
            
            @foreach (var eventGroup in _events.GroupBy(e => e.EventDate.Year).OrderByDescending(g => g.Key))
            {
                <div class="year-group mb-4">
                    <h6 class="year-header">@eventGroup.Key</h6>
                    
                    @foreach (var evt in eventGroup.OrderByDescending(e => e.EventDate))
                    {
                        <div class="event-item card mb-2">
                            <div class="card-body py-2">
                                <div class="d-flex justify-content-between align-items-start">
                                    <div class="event-info">
                                        <h6 class="event-name mb-1">@evt.EventName</h6>
                                        <div class="event-meta">
                                            <span class="event-date">
                                                <i class="fas fa-calendar me-1"></i>
                                                @evt.EventDate.ToString("MMM d, yyyy")
                                            </span>
                                            <span class="event-type badge bg-secondary ms-2">@evt.EventType</span>
                                            @if (evt.IsOrganizer)
                                            {
                                                <span class="badge bg-info ms-1">Organizer</span>
                                            }
                                        </div>
                                        @if (!string.IsNullOrEmpty(evt.Notes))
                                        {
                                            <small class="event-notes text-muted">@evt.Notes</small>
                                        }
                                    </div>
                                    <div class="event-status">
                                        <span class="badge @GetStatusBadgeClass(evt.RsvpStatus)">
                                            @GetStatusDisplayText(evt.RsvpStatus)
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    }
    else
    {
        <div class="text-center py-5">
            <i class="fas fa-calendar-times fa-3x text-muted mb-3"></i>
            <h5 class="text-muted">No Event History</h5>
            <p class="text-muted">This user has not participated in any events yet.</p>
        </div>
    }
</div>

@code {
    [Parameter, EditorRequired] public Guid UserId { get; set; }

    private List<UserEventDto> _events = new();
    private bool _isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadEvents();
    }

    private async Task LoadEvents()
    {
        try
        {
            _isLoading = true;
            
            // Load user events from API
            var response = await HttpClient.GetFromJsonAsync<List<UserEventDto>>($"api/admin/users/{UserId}/events");
            _events = response ?? new List<UserEventDto>();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading events for user {UserId}", UserId);
            _events = new List<UserEventDto>();
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
        }
    }

    private string GetStatusBadgeClass(string status)
    {
        return status switch
        {
            "Attending" => "bg-success",
            "Cancelled" => "bg-warning text-dark",
            "NoShow" => "bg-danger",
            "Maybe" => "bg-info",
            _ => "bg-secondary"
        };
    }

    private string GetStatusDisplayText(string status)
    {
        return status switch
        {
            "Attending" => "Attended",
            "Cancelled" => "Cancelled",
            "NoShow" => "No Show",
            "Maybe" => "Maybe",
            _ => status
        };
    }
}

<style>
    .stat-card {
        text-align: center;
        padding: 1rem;
        background-color: #f8f9fa;
        border-radius: 0.5rem;
        border: 1px solid #e9ecef;
    }

    .stat-value {
        font-size: 1.5rem;
        font-weight: 600;
        color: #495057;
    }

    .stat-label {
        font-size: 0.8rem;
        color: #6c757d;
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .year-header {
        color: #495057;
        font-weight: 600;
        border-bottom: 2px solid #e9ecef;
        padding-bottom: 0.5rem;
        margin-bottom: 1rem;
    }

    .event-item {
        border-left: 4px solid #0d6efd;
        transition: all 0.2s ease;
    }

    .event-item:hover {
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }

    .event-name {
        color: #495057;
        font-weight: 600;
    }

    .event-meta {
        display: flex;
        align-items: center;
        flex-wrap: wrap;
        gap: 0.5rem;
    }

    .event-date {
        color: #6c757d;
        font-size: 0.9rem;
    }

    .event-notes {
        display: block;
        margin-top: 0.5rem;
        font-style: italic;
    }

    .event-status {
        text-align: right;
    }

    @@media (max-width: 767.98px) {
        .events-summary .row {
            text-align: center;
        }
        
        .stat-card {
            margin-bottom: 1rem;
        }
        
        .event-item .d-flex {
            flex-direction: column;
            align-items: flex-start !important;
        }
        
        .event-status {
            text-align: left;
            margin-top: 0.5rem;
        }
    }
</style>