@using WitchCityRope.Core.DTOs

@if (IsVisible)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        <i class="bi bi-key me-2"></i>
                        Reset Password - @(User?.SceneName ?? "Unknown")
                    </h5>
                    <button type="button" class="btn-close" @onclick="OnCancel"></button>
                </div>
                
                <EditForm Model="@ResetModel" OnValidSubmit="@HandleSubmit">
                    <DataAnnotationsValidator />
                    
                    <div class="modal-body">
                        @if (User != null)
                        {
                            <div class="alert alert-warning">
                                <i class="bi bi-exclamation-triangle me-2"></i>
                                <strong>Warning:</strong> This will immediately reset the user's password. 
                                The user will be notified and may be required to change their password on next login.
                            </div>
                            
                            <div class="mb-3">
                                <label for="newPassword" class="form-label">New Password</label>
                                <div class="input-group">
                                    <input type="@(ShowPassword ? "text" : "password")" 
                                           id="newPassword" 
                                           class="form-control" 
                                           @bind="ResetModel.NewPassword" 
                                           placeholder="Enter new password (min 8 characters)" />
                                    <button class="btn btn-outline-secondary" type="button" @onclick="TogglePasswordVisibility">
                                        <i class="bi bi-@(ShowPassword ? "eye-slash" : "eye")"></i>
                                    </button>
                                    <button class="btn btn-outline-primary" type="button" @onclick="GeneratePassword">
                                        <i class="bi bi-arrow-clockwise"></i> Generate
                                    </button>
                                </div>
                                <ValidationMessage For="@(() => ResetModel.NewPassword)" />
                                <div class="form-text">
                                    Password must be at least 8 characters long and contain a mix of letters, numbers, and symbols.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <div class="form-check">
                                    <InputCheckbox id="requirePasswordChange" class="form-check-input" @bind-Value="ResetModel.RequirePasswordChangeOnLogin" />
                                    <label class="form-check-label" for="requirePasswordChange">
                                        Require user to change password on next login
                                    </label>
                                </div>
                                <div class="form-text">
                                    If checked, the user will be forced to set a new password when they next log in.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label for="adminNote" class="form-label">Reason/Note</label>
                                <InputTextArea id="adminNote" class="form-control" rows="3" @bind-Value="ResetModel.AdminNote" 
                                              placeholder="Optional reason for password reset (will be logged)" />
                                <ValidationMessage For="@(() => ResetModel.AdminNote)" />
                            </div>
                        }
                    </div>
                    
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="OnCancel">
                            Cancel
                        </button>
                        <button type="submit" class="btn btn-danger" disabled="@IsSubmitting">
                            @if (IsSubmitting)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                            }
                            <i class="bi bi-key me-1"></i>Reset Password
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public AdminUserDto? User { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<ResetUserPasswordDto> OnSave { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private ResetUserPasswordDto ResetModel = new();
    private bool IsSubmitting = false;
    private bool ShowPassword = false;

    protected override void OnParametersSet()
    {
        if (User != null && IsVisible)
        {
            ResetModel = new ResetUserPasswordDto
            {
                NewPassword = "",
                RequirePasswordChangeOnLogin = true,
                AdminNote = ""
            };
            ShowPassword = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (IsSubmitting) return;
        
        IsSubmitting = true;
        try
        {
            await OnSave.InvokeAsync(ResetModel);
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private void TogglePasswordVisibility()
    {
        ShowPassword = !ShowPassword;
    }

    private void GeneratePassword()
    {
        // Generate a secure random password
        const string chars = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*";
        var random = new Random();
        var password = new string(Enumerable.Repeat(chars, 12)
            .Select(s => s[random.Next(s.Length)]).ToArray());
        
        // Ensure we have at least one of each type
        password = password.Substring(0, 8) + 
                   chars.Substring(0, 26)[random.Next(26)] + // lowercase
                   chars.Substring(26, 26)[random.Next(26)] + // uppercase
                   chars.Substring(52, 10)[random.Next(10)] + // digit
                   chars.Substring(62)[random.Next(8)]; // special char
        
        ResetModel.NewPassword = password;
        ShowPassword = true; // Show the generated password
    }
}