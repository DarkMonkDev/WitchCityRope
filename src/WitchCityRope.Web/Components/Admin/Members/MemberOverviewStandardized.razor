@using WitchCityRope.Core.DTOs
@using WitchCityRope.Web.Shared.Validation.Components
@using System.ComponentModel.DataAnnotations

<div class="row">
    <div class="col-lg-6">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">Profile Information</h5>
            </div>
            <div class="card-body">
                @if (IsEditing)
                {
                    <EditForm Model="@EditModel" OnValidSubmit="@SaveChanges">
                        <DataAnnotationsValidator />
                        
                        <WcrInputText @bind-Value="EditModel.SceneName" 
                                      Label="Scene Name"
                                      Placeholder="Enter scene name"
                                      IsRequired="true" />
                        
                        <WcrInputText @bind-Value="EditModel.Pronouns" 
                                      Label="Pronouns"
                                      Placeholder="e.g., she/her, they/them" />
                        
                        <WcrInputText @bind-Value="EditModel.PronouncedName" 
                                      Label="Pronounced Name"
                                      Placeholder="How to pronounce the scene name" />
                        
                        <WcrValidationSummary />
                        
                        <div class="d-flex gap-2 mt-3">
                            <button type="submit" class="wcr-button wcr-button-primary">
                                <i class="bi bi-check-lg me-1"></i> Save
                            </button>
                            <button type="button" class="wcr-button wcr-button-secondary" @onclick="CancelEdit">
                                Cancel
                            </button>
                        </div>
                    </EditForm>
                }
                else
                {
                    <dl class="row mb-0">
                        <dt class="col-sm-4">Scene Name:</dt>
                        <dd class="col-sm-8">@Member.SceneName</dd>
                        
                        <dt class="col-sm-4">Real Name:</dt>
                        <dd class="col-sm-8">@Member.RealName</dd>
                        
                        <dt class="col-sm-4">Email:</dt>
                        <dd class="col-sm-8">
                            <a href="mailto:@Member.Email">@Member.Email</a>
                        </dd>
                        
                        <dt class="col-sm-4">Date of Birth:</dt>
                        <dd class="col-sm-8">@Member.DateOfBirth.ToString("d") (Age: @Member.Age)</dd>
                        
                        <dt class="col-sm-4">Pronouns:</dt>
                        <dd class="col-sm-8">@(Member.Pronouns ?? "-")</dd>
                        
                        <dt class="col-sm-4">Pronounced Name:</dt>
                        <dd class="col-sm-8">@(Member.PronouncedName ?? "-")</dd>
                        
                        <dt class="col-sm-4">Member Since:</dt>
                        <dd class="col-sm-8">@Member.CreatedAt.ToString("d")</dd>
                    </dl>
                    
                    <button class="wcr-button wcr-button-outline-primary btn-sm mt-3" @onclick="StartEdit">
                        <i class="bi bi-pencil me-1"></i> Edit Profile
                    </button>
                }
            </div>
        </div>
    </div>
    
    <div class="col-lg-6">
        <div class="card shadow-sm">
            <div class="card-header">
                <h5 class="mb-0">Account Status</h5>
            </div>
            <div class="card-body">
                <dl class="row mb-0">
                    <dt class="col-sm-4">Role:</dt>
                    <dd class="col-sm-8">
                        <span class="badge bg-primary">@Member.Role</span>
                    </dd>
                    
                    <dt class="col-sm-4">Vetted:</dt>
                    <dd class="col-sm-8">
                        @if (Member.IsVetted)
                        {
                            <span class="badge bg-success">
                                <i class="bi bi-check-circle me-1"></i> Yes
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-warning">
                                <i class="bi bi-x-circle me-1"></i> No
                            </span>
                        }
                    </dd>
                    
                    <dt class="col-sm-4">Active:</dt>
                    <dd class="col-sm-8">
                        @if (Member.IsActive)
                        {
                            <span class="badge bg-success">
                                <i class="bi bi-check-circle me-1"></i> Yes
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-danger">
                                <i class="bi bi-x-circle me-1"></i> No
                            </span>
                        }
                    </dd>
                    
                    <dt class="col-sm-4">Last Login:</dt>
                    <dd class="col-sm-8">
                        @if (Member.LastLoginAt.HasValue)
                        {
                            @Member.LastLoginAt.Value.ToString("g")
                        }
                        else
                        {
                            <span class="text-muted">Never</span>
                        }
                    </dd>
                    
                    <dt class="col-sm-4">Events Attended:</dt>
                    <dd class="col-sm-8">@Member.TotalEventsAttended</dd>
                    
                    <dt class="col-sm-4">Total Spent:</dt>
                    <dd class="col-sm-8">$@Member.TotalSpent.ToString("N2")</dd>
                </dl>
                
                <div class="mt-3">
                    <button class="wcr-button wcr-button-outline-secondary btn-sm me-2" @onclick="ShowStatusModal">
                        <i class="bi bi-gear me-1"></i> Change Status
                    </button>
                    <button class="wcr-button wcr-button-outline-danger btn-sm" @onclick="ShowPasswordReset">
                        <i class="bi bi-key me-1"></i> Reset Password
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
    /* WCR Button Styles for Bootstrap Compatibility */
    .wcr-button {
        display: inline-flex;
        align-items: center;
        gap: var(--wcr-space-sm);
        padding: var(--wcr-space-sm) var(--wcr-space-md);
        border: none;
        border-radius: var(--wcr-radius-sm);
        font-family: var(--wcr-font-body);
        font-weight: 500;
        font-size: 14px;
        text-decoration: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .wcr-button.btn-sm {
        padding: var(--wcr-space-xs) var(--wcr-space-sm);
        font-size: 13px;
    }

    .wcr-button-primary {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .wcr-button-primary:hover:not(:disabled) {
        background: var(--wcr-color-burgundy-dark);
        transform: translateY(-1px);
        box-shadow: 0 2px 8px rgba(139, 0, 0, 0.2);
    }

    .wcr-button-secondary {
        background: var(--wcr-color-stone);
        color: white;
    }

    .wcr-button-secondary:hover:not(:disabled) {
        background: var(--wcr-color-charcoal);
    }

    .wcr-button-outline-primary {
        background: transparent;
        color: var(--wcr-color-burgundy);
        border: 1px solid var(--wcr-color-burgundy);
    }

    .wcr-button-outline-primary:hover {
        background: var(--wcr-color-burgundy);
        color: white;
    }

    .wcr-button-outline-secondary {
        background: transparent;
        color: var(--wcr-color-stone);
        border: 1px solid var(--wcr-color-stone);
    }

    .wcr-button-outline-secondary:hover {
        background: var(--wcr-color-stone);
        color: white;
    }

    .wcr-button-outline-danger {
        background: transparent;
        color: var(--wcr-color-error);
        border: 1px solid var(--wcr-color-error);
    }

    .wcr-button-outline-danger:hover {
        background: var(--wcr-color-error);
        color: white;
    }

    /* Form spacing adjustments */
    .wcr-form-group {
        margin-bottom: 1rem;
    }

    /* Card styling to match WCR theme */
    .card {
        border: 1px solid var(--wcr-color-taupe);
        border-radius: var(--wcr-radius-md);
    }

    .card-header {
        background-color: var(--wcr-color-cream);
        border-bottom: 1px solid var(--wcr-color-taupe);
        padding: var(--wcr-space-md);
    }

    .card-header h5 {
        color: var(--wcr-color-burgundy);
        font-family: var(--wcr-font-heading);
    }

    .card-body {
        background-color: white;
        padding: var(--wcr-space-lg);
    }

    /* Badge styling */
    .badge {
        padding: var(--wcr-space-xs) var(--wcr-space-sm);
        border-radius: var(--wcr-radius-sm);
        font-weight: 500;
    }
</style>

@code {
    [Parameter] public MemberDetailDto Member { get; set; } = null!;
    [Parameter] public EventCallback<UpdateMemberDto> OnUpdate { get; set; }
    
    private bool IsEditing = false;
    private ProfileEditModel EditModel = new();
    
    private void StartEdit()
    {
        EditModel = new ProfileEditModel
        {
            SceneName = Member.SceneName,
            Pronouns = Member.Pronouns,
            PronouncedName = Member.PronouncedName
        };
        IsEditing = true;
    }
    
    private void CancelEdit()
    {
        IsEditing = false;
        EditModel = new();
    }
    
    private async Task SaveChanges()
    {
        var dto = new UpdateMemberDto
        {
            SceneName = EditModel.SceneName,
            Pronouns = EditModel.Pronouns,
            PronouncedName = EditModel.PronouncedName
        };
        
        await OnUpdate.InvokeAsync(dto);
        IsEditing = false;
    }
    
    private void ShowStatusModal()
    {
        // TODO: Implement status change modal
    }
    
    private void ShowPasswordReset()
    {
        // TODO: Implement password reset functionality
    }
    
    private class ProfileEditModel
    {
        [Required(ErrorMessage = "Scene name is required")]
        [StringLength(50, MinimumLength = 2, ErrorMessage = "Scene name must be between 2 and 50 characters")]
        public string SceneName { get; set; } = "";
        
        [StringLength(50, ErrorMessage = "Pronouns must not exceed 50 characters")]
        public string? Pronouns { get; set; }
        
        [StringLength(100, ErrorMessage = "Pronunciation guide must not exceed 100 characters")]
        public string? PronouncedName { get; set; }
    }
}