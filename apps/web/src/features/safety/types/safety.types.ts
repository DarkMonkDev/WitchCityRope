// Safety System TypeScript Types
// Based on backend API design and UI specifications

export interface SafetyIncidentDto {
  id: string;
  referenceNumber: string;
  title?: string;
  reporterId?: string;
  reporterName?: string;
  incidentDate: string; // ISO date string
  reportedAt: string; // ISO date string
  location: string;
  description: string;
  involvedParties?: string;
  witnesses?: string;
  contactEmail?: string;
  contactName?: string;
  isAnonymous: boolean;
  requestFollowUp: boolean;
  status: IncidentStatus;
  assignedTo?: string;
  assignedUserName?: string; // Legacy field - use coordinatorName instead
  coordinatorId?: string;
  coordinatorName?: string;
  auditTrail: AuditLogDto[];
  createdAt: string;
  updatedAt: string;
}

export interface IncidentSummaryDto {
  id: string;
  referenceNumber: string;
  title?: string;
  incidentDate: string;
  reportedAt: string;
  location: string;
  isAnonymous: boolean;
  status: IncidentStatus;
  coordinatorId?: string;
  coordinatorName?: string;
}

export interface SubmitIncidentRequest {
  reporterId?: string;
  title?: string; // Optional - auto-generated by backend if not provided
  incidentDate: string; // ISO date string
  location: string;
  description: string;
  involvedParties?: string;
  witnesses?: string;
  isAnonymous: boolean;
  requestFollowUp: boolean;
  contactEmail?: string;
  contactName?: string;
  // New wireframe fields
  type: IncidentType;
  whereOccurred: WhereOccurred;
  eventName?: string;
  hasSpokenToPerson?: SpokenToPersonStatus;
  desiredOutcomes?: string;
  futureInteractionPreference?: string;
  anonymousDuringInvestigation?: boolean;
  anonymousInFinalReport?: boolean;
}

export interface SubmissionResponse {
  referenceNumber: string;
  trackingUrl: string;
  submittedAt: string;
}

export interface IncidentStatusResponse {
  referenceNumber: string;
  status: string;
  lastUpdated: string;
  canProvideMoreInfo: boolean;
}

export interface UpdateIncidentRequest {
  title?: string;
  status?: IncidentStatus;
  assignedTo?: string;
  notes?: string;
}

export interface SafetyDashboardResponse {
  statistics: SafetyStatistics;
  recentIncidents: IncidentSummaryDto[];
  pendingActions: ActionItem[];
}

export interface SafetyStatistics {
  totalCount: number;
  newCount: number;
  inProgressCount: number;
  reviewingFinalReportCount: number;
  resolvedCount: number;
  thisMonth: number;
}

export interface ActionItem {
  incidentId: string;
  referenceNumber: string;
  actionNeeded: string;
  dueDate: string;
}

export interface AuditLogDto {
  id: string;
  actionType: string;
  actionDescription: string;
  userId?: string;
  userName?: string;
  createdAt: string;
}

export interface SearchIncidentsRequest {
  status?: string; // Status filter (comma-separated for multiple values)
  assignedTo?: string;
  dateFrom?: string;
  dateTo?: string;
  searchText?: string;
  page?: number;
  pageSize?: number;
  sortBy?: string; // Sort field (default: 'reportedAt')
  sortDirection?: 'asc' | 'desc'; // Sort direction (default: 'desc')
}

// Enums - Updated to 5-stage workflow (matches backend SafetyIncident.cs)
export enum IncidentStatus {
  ReportSubmitted = 'ReportSubmitted',
  InformationGathering = 'InformationGathering',
  ReviewingFinalReport = 'ReviewingFinalReport',
  OnHold = 'OnHold',
  Closed = 'Closed'
}

// New wireframe enums (matches backend enums)
export enum IncidentType {
  SafetyConcern = 'SafetyConcern',
  BoundaryViolation = 'BoundaryViolation',
  Harassment = 'Harassment',
  OtherConcern = 'OtherConcern'
}

export enum WhereOccurred {
  AtEvent = 'AtEvent',
  Online = 'Online',
  PrivatePlay = 'PrivatePlay',
  OtherSpace = 'OtherSpace'
}

export enum SpokenToPersonStatus {
  Yes = 'Yes',
  No = 'No',
  NotApplicable = 'NotApplicable'
}

// Anonymity preference is now handled by two independent boolean fields

// Frontend-specific types
export interface IncidentFormData {
  // Wireframe fields (title removed - auto-generated by backend)
  incidentType: IncidentType;
  incidentDate: string; // Date in YYYY-MM-DD format
  incidentTime: string; // Time in HH:MM format
  whereOccurred: WhereOccurred;
  eventName: string;
  location: string;
  description: string;
  witnesses: string;
  involvedParties: string;
  hasSpokenToPerson: SpokenToPersonStatus | '';
  desiredOutcomes: string; // Free-text field
  futureInteractionPreference: string; // What interaction with person going forward
  anonymousDuringInvestigation: boolean; // Anonymous during investigation
  anonymousInFinalReport: boolean; // Anonymous in final report
  // Privacy fields
  isAnonymous: boolean;
  requestFollowUp: boolean;
  contactEmail: string;
  contactName: string;
}

// Status configurations for UI - Updated to 5-stage workflow
export const STATUS_CONFIGS: Record<IncidentStatus, { label: string; color: string }> = {
  [IncidentStatus.ReportSubmitted]: { label: 'Report Submitted', color: 'blue' },
  [IncidentStatus.InformationGathering]: { label: 'Information Gathering', color: 'yellow' },
  [IncidentStatus.ReviewingFinalReport]: { label: 'Reviewing Final Report', color: 'orange' },
  [IncidentStatus.OnHold]: { label: 'On Hold', color: 'gray' },
  [IncidentStatus.Closed]: { label: 'Closed', color: 'green' }
};

// Incident type display labels
export const INCIDENT_TYPE_LABELS: Record<IncidentType, string> = {
  [IncidentType.SafetyConcern]: 'Safety Concern',
  [IncidentType.BoundaryViolation]: 'Boundary Violation',
  [IncidentType.Harassment]: 'Harassment',
  [IncidentType.OtherConcern]: 'Other Concern'
};

// Where occurred display labels
export const WHERE_OCCURRED_LABELS: Record<WhereOccurred, string> = {
  [WhereOccurred.AtEvent]: 'At a Witch City Rope event',
  [WhereOccurred.Online]: 'Online (Discord, social media, etc.)',
  [WhereOccurred.PrivatePlay]: 'Private play/interaction',
  [WhereOccurred.OtherSpace]: 'Other community space'
};

// Spoken to person display labels
export const SPOKEN_TO_PERSON_LABELS: Record<SpokenToPersonStatus, string> = {
  [SpokenToPersonStatus.Yes]: 'Yes',
  [SpokenToPersonStatus.No]: 'No',
  [SpokenToPersonStatus.NotApplicable]: 'Not Applicable'
};

// Anonymity preference is now handled by two independent checkboxes
// No labels needed - each checkbox has its own label