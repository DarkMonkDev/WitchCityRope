{
  "openapi": "3.0.1",
  "info": {
    "title": "WitchCityRope.Api",
    "version": "1.0"
  },
  "paths": {
    "/api/admin/users": {
      "get": {
        "tags": [
          "Admin",
          "Users"
        ],
        "summary": "Get paginated list of users (admin only)",
        "description": "Returns a paginated list of users with optional filtering and sorting",
        "operationId": "GetUsers",
        "parameters": [
          {
            "name": "SearchTerm",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Role",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "IsActive",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "IsVetted",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "Page",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "SortBy",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "SortDescending",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/admin/users/{id}": {
      "get": {
        "tags": [
          "Admin",
          "Users"
        ],
        "summary": "Get user by ID (admin only)",
        "description": "Returns detailed user information by user ID",
        "operationId": "GetUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      },
      "put": {
        "tags": [
          "Admin",
          "Users"
        ],
        "summary": "Update user by ID (admin only)",
        "description": "Updates user information including role, status, and profile data",
        "operationId": "UpdateUser",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/api/admin/events/{eventId}/participations": {
      "get": {
        "tags": [
          "Admin",
          "Participation"
        ],
        "summary": "Get all participations for an event (admin only)",
        "description": "Returns all RSVPs and ticket purchases for the specified event. Admin role required.",
        "operationId": "GetEventParticipations",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventParticipationDtoListApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/current-user": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current authenticated user information",
        "description": "Returns the current user's profile information based on JWT token",
        "operationId": "GetCurrentUser",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Authenticate user with email and password",
        "description": "Validates user credentials and returns JWT token with user information",
        "operationId": "Login",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Register new user account",
        "description": "Creates a new user account with email, password, and scene name",
        "operationId": "Register",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegisterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          }
        }
      }
    },
    "/api/auth/service-token": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Generate JWT token for service-to-service authentication",
        "description": "Used by Web Service to get JWT tokens for API calls using service secret authentication",
        "operationId": "GetServiceToken",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Logout current user",
        "description": "Logs out the current user, clears cookies, and blacklists tokens. Works even with expired tokens.",
        "operationId": "Logout",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/auth/user": {
      "get": {
        "tags": [
          "Authentication"
        ],
        "summary": "Get current user information from httpOnly cookie",
        "description": "BFF pattern - validates httpOnly cookie and returns user info",
        "operationId": "GetUserFromCookie",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Authentication"
        ],
        "summary": "Refresh authentication token silently",
        "description": "BFF pattern - refreshes httpOnly cookie with new JWT token",
        "operationId": "RefreshToken",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/auth/debug-status": {
      "get": {
        "tags": [
          "Authentication",
          "Debug"
        ],
        "summary": "Debug authentication status (DEV ONLY)",
        "description": "Check current authentication status for debugging logout issues",
        "operationId": "DebugAuthStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/checkin/events/{eventId}/attendees": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get attendees for event check-in",
        "description": "Returns attendees list with search and filtering for check-in interface",
        "operationId": "GetEventAttendees",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "search",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 1
            }
          },
          {
            "name": "pageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 50
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/checkin/events/{eventId}/checkin": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Process attendee check-in",
        "description": "Check in an attendee for the event with capacity validation",
        "operationId": "ProcessCheckIn",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CheckInRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/checkin/events/{eventId}/dashboard": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get event check-in dashboard",
        "description": "Returns real-time check-in statistics and recent activity",
        "operationId": "GetEventDashboard",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/checkin/events/{eventId}/sync": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Sync offline check-in data",
        "description": "Process pending check-ins from offline operation with conflict detection",
        "operationId": "SyncOfflineCheckIns",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/checkin/events/{eventId}/manual-entry": {
      "post": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Create manual entry for walk-in attendee",
        "description": "Register and check in a walk-in attendee who isn't pre-registered",
        "operationId": "CreateManualEntry",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ManualEntryData"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/checkin/sync/pending-count": {
      "get": {
        "tags": [
          "CheckIn"
        ],
        "summary": "Get pending sync operations count",
        "description": "Returns the number of pending offline operations for the current user",
        "operationId": "GetPendingSyncCount",
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    },
    "/api/users/{userId}/events": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get user's registered events",
        "description": "Returns list of events the user has registered for or purchased tickets for. Excludes past events by default.",
        "operationId": "GetUserRegisteredEvents",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "includePast",
            "in": "query",
            "schema": {
              "type": "boolean",
              "default": false
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEventDtoListApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEventDtoListApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserEventDtoListApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/vetting-status": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get user's vetting status",
        "description": "Returns the user's current vetting status with display message for alert box",
        "operationId": "GetUserDashboardVettingStatus",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VettingStatusDtoApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VettingStatusDtoApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VettingStatusDtoApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/VettingStatusDtoApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/profile": {
      "get": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Get user profile",
        "description": "Returns the user's profile information for settings page",
        "operationId": "GetUserDashboardProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Update user profile",
        "description": "Updates the user's profile information",
        "operationId": "UpdateUserDashboardProfile",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserProfileDtoApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/{userId}/change-password": {
      "post": {
        "tags": [
          "Dashboard"
        ],
        "summary": "Change user password",
        "description": "Changes the user's password after verifying current password",
        "operationId": "ChangeUserDashboardPassword",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BooleanApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get all events",
        "description": "Returns events from the database. Use ?includeUnpublished=true for admin access to draft events. Requires Administrator role for unpublished events.",
        "operationId": "GetEvents",
        "parameters": [
          {
            "name": "includeUnpublished",
            "in": "query",
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDtoListApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{id}": {
      "get": {
        "tags": [
          "Events"
        ],
        "summary": "Get single event by ID",
        "description": "Returns a specific event by its unique identifier",
        "operationId": "GetEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDtoApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Events"
        ],
        "summary": "Update an existing event",
        "description": "Updates an event with the provided data. Supports partial updates (only non-null fields will be updated). Business rules: Cannot update past events, cannot reduce capacity below current attendance.",
        "operationId": "UpdateEvent",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateEventRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EventDtoApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get basic API health status",
        "description": "Returns basic health information including database connectivity and user count",
        "operationId": "GetHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/api/health/detailed": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Get detailed API health information",
        "description": "Returns comprehensive health metrics including database version and active user counts",
        "operationId": "GetDetailedHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DetailedHealthResponse"
                }
              }
            }
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "Health"
        ],
        "summary": "Legacy health check endpoint",
        "description": "Simple health check for compatibility with existing monitoring",
        "operationId": "GetLegacyHealth",
        "responses": {
          "200": {
            "description": "OK"
          },
          "503": {
            "description": "Service Unavailable"
          }
        }
      }
    },
    "/api/events/{eventId}/participation": {
      "get": {
        "tags": [
          "Participation"
        ],
        "summary": "Get user's participation status for an event",
        "description": "Returns the user's current participation status (RSVP or ticket) for the specified event",
        "operationId": "GetParticipationStatus",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationStatusDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Participation"
        ],
        "summary": "Cancel participation in event",
        "description": "Cancels the user's participation (RSVP or ticket) in the specified event",
        "operationId": "CancelParticipation",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/rsvp": {
      "post": {
        "tags": [
          "Participation"
        ],
        "summary": "Create RSVP for social event",
        "description": "Creates an RSVP for a social event. Blocked for users with OnHold, Denied, or Withdrawn vetting status.",
        "operationId": "CreateRSVP",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateRSVPRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "delete": {
        "tags": [
          "Participation"
        ],
        "summary": "Cancel RSVP (backward compatibility)",
        "description": "Cancels the user's RSVP. Alias for cancelling participation.",
        "operationId": "CancelRSVP",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "reason",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "No Content"
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/events/{eventId}/tickets": {
      "post": {
        "tags": [
          "Participation"
        ],
        "summary": "Purchase ticket for class event",
        "description": "Purchases a ticket for a class event. Blocked for users with OnHold, Denied, or Withdrawn vetting status.",
        "operationId": "PurchaseTicket",
        "parameters": [
          {
            "name": "eventId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTicketPurchaseRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ParticipationStatusDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          },
          "409": {
            "description": "Conflict"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/user/participations": {
      "get": {
        "tags": [
          "Participation"
        ],
        "summary": "Get user's event participations",
        "description": "Returns all current participations (RSVPs and tickets) for the authenticated user",
        "operationId": "GetUserParticipations",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserParticipationDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/payments/process": {
      "post": {
        "tags": [
          "PaymentEndpoints"
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessPaymentApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/payments/{paymentId}": {
      "get": {
        "tags": [
          "PaymentEndpoints"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/registration/{eventRegistrationId}/status": {
      "get": {
        "tags": [
          "PaymentEndpoints"
        ],
        "parameters": [
          {
            "name": "eventRegistrationId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentStatusResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentStatusResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/PaymentStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/payments/{paymentId}/refund": {
      "post": {
        "tags": [
          "PaymentEndpoints"
        ],
        "parameters": [
          {
            "name": "paymentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRefundApiRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRefundApiRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/ProcessRefundApiRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ValidationProblemDetails"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          }
        }
      }
    },
    "/api/Protected/welcome": {
      "get": {
        "tags": [
          "Protected"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ProtectedWelcomeResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtectedWelcomeResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProtectedWelcomeResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/Protected/profile": {
      "get": {
        "tags": [
          "Protected"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponseApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponseApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/AuthUserResponseApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "text/plain": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              },
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              },
              "text/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/safety/incidents": {
      "post": {
        "tags": [
          "Safety"
        ],
        "summary": "Submit safety incident report",
        "description": "Submit a new safety incident report (anonymous or identified)",
        "operationId": "SubmitIncident",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateIncidentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SubmissionResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "422": {
            "description": "Unprocessable Content"
          }
        }
      }
    },
    "/api/safety/incidents/{referenceNumber}/status": {
      "get": {
        "tags": [
          "Safety"
        ],
        "summary": "Get incident status for tracking",
        "description": "Get current status of incident by reference number (public access)",
        "operationId": "GetIncidentStatus",
        "parameters": [
          {
            "name": "referenceNumber",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentStatusResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/safety/admin/dashboard": {
      "get": {
        "tags": [
          "Safety"
        ],
        "summary": "Get safety team dashboard data",
        "description": "Get dashboard statistics and recent incidents for safety team",
        "operationId": "GetSafetyDashboard",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AdminDashboardResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/safety/admin/incidents/{incidentId}": {
      "get": {
        "tags": [
          "Safety"
        ],
        "summary": "Get detailed incident information",
        "description": "Get full incident details with decrypted data for safety team",
        "operationId": "GetIncidentDetail",
        "parameters": [
          {
            "name": "incidentId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/IncidentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden"
          },
          "404": {
            "description": "Not Found"
          }
        }
      }
    },
    "/api/safety/my-reports": {
      "get": {
        "tags": [
          "Safety"
        ],
        "summary": "Get user's incident reports",
        "description": "Get list of incident reports submitted by current user",
        "operationId": "GetUserReports",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/IncidentSummaryResponse"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/test-helpers/users": {
      "post": {
        "tags": [
          "Testing",
          "TestHelpers"
        ],
        "summary": "Create test user for E2E testing",
        "description": "Programmatically create a user with specific properties for testing. ONLY available in Development/Test.",
        "operationId": "CreateTestUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateTestUserRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/test-helpers/users/{userId}": {
      "delete": {
        "tags": [
          "Testing",
          "TestHelpers"
        ],
        "summary": "Delete test user for cleanup",
        "description": "Delete a test user by ID. Used in afterEach/afterAll hooks. ONLY available in Development/Test.",
        "operationId": "DeleteTestUser",
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/test-helpers/health": {
      "get": {
        "tags": [
          "Testing",
          "TestHelpers"
        ],
        "summary": "Check if test helpers are available",
        "description": "Returns 200 if test helper endpoints are enabled (Development/Test only)",
        "operationId": "TestHelpersHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": { }
              }
            }
          }
        }
      }
    },
    "/api/users/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user profile",
        "description": "Returns the current user's profile information based on JWT token",
        "operationId": "GetUserProfile",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "summary": "Update current user profile",
        "description": "Updates the current user's profile information (scene name, pronouns)",
        "operationId": "UpdateUserProfile",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateProfileRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request"
          },
          "401": {
            "description": "Unauthorized"
          },
          "409": {
            "description": "Conflict"
          }
        }
      }
    },
    "/api/user/profile": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get current user profile (singular endpoint)",
        "description": "Returns the current user's profile information based on JWT token",
        "operationId": "GetUserProfileSingular",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "404": {
            "description": "Not Found"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/users/by-role/{role}": {
      "get": {
        "tags": [
          "Users"
        ],
        "summary": "Get users by role",
        "description": "Get list of users filtered by role (e.g., 'Teacher', 'Admin') for dropdown options",
        "operationId": "GetUsersByRole",
        "parameters": [
          {
            "name": "role",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/UserOptionDto"
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/vetting/reviewer/applications": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Get paginated list of vetting applications",
        "operationId": "GetApplicationsForReview",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ApplicationFilterRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSummaryDtoPagedResultApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/reviewer/applications/{id}": {
      "get": {
        "tags": [
          "Vetting"
        ],
        "summary": "Get detailed application information",
        "operationId": "GetApplicationDetail",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDetailResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/reviewer/applications/{id}/decisions": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Submit a review decision for an application",
        "operationId": "SubmitReviewDecision",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReviewDecisionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewDecisionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/reviewer/applications/{id}/notes": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Add a note to an application",
        "operationId": "AddApplicationNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateNoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/applications/{id}/approve": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Approve an application",
        "operationId": "ApproveApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleReasoningRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewDecisionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/applications/{id}/status": {
      "put": {
        "tags": [
          "Vetting"
        ],
        "summary": "Change application status (for OnHold, etc.)",
        "operationId": "ChangeApplicationStatus",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StatusChangeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewDecisionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/applications/{id}/notes": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Add a simple note to an application",
        "operationId": "AddSimpleApplicationNote",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleNoteRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NoteResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/applications/{id}/deny": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Deny an application",
        "operationId": "DenyApplication",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimpleReasoningRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ReviewDecisionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/status": {
      "get": {
        "tags": [
          "Vetting"
        ],
        "summary": "Get current user's vetting status",
        "operationId": "GetVettingStatus",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/MyApplicationStatusResponseApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/application": {
      "get": {
        "tags": [
          "Vetting"
        ],
        "summary": "Get current user's vetting application details",
        "operationId": "GetMyVettingApplication",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationDetailResponseApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/applications/simplified": {
      "post": {
        "tags": [
          "Vetting"
        ],
        "summary": "Submit a simplified vetting application from authenticated user",
        "operationId": "SubmitSimplifiedApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SimplifiedApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSubmissionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/my-application": {
      "get": {
        "tags": [
          "Vetting"
        ],
        "summary": "Check if current user has an existing application",
        "operationId": "GetMyApplication",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SimplifiedApplicationResponseApiResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/public/applications": {
      "post": {
        "tags": [
          "Vetting - Public"
        ],
        "summary": "Submit a simplified vetting application (public endpoint)",
        "operationId": "SubmitPublicVettingApplication",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PublicApplicationSubmissionRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSubmissionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/public/applications/full": {
      "post": {
        "tags": [
          "Vetting - Public"
        ],
        "summary": "Submit a complete vetting application with all fields",
        "operationId": "SubmitVettingApplicationFull",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateApplicationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationSubmissionResponseApiResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/vetting/public/applications/status/{token}": {
      "get": {
        "tags": [
          "Vetting - Public"
        ],
        "summary": "Check application status using status token",
        "operationId": "GetApplicationStatusByToken",
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApplicationStatusResponseApiResponse"
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ObjectApiResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/webhooks/paypal": {
      "post": {
        "tags": [
          "WebhookEndpoints"
        ],
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProblemDetails"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    },
    "/api/webhooks/paypal/health": {
      "get": {
        "tags": [
          "WebhookEndpoints"
        ],
        "responses": {
          "200": {
            "description": "OK"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "ActionItem": {
        "type": "object",
        "properties": {
          "incidentId": {
            "type": "string",
            "format": "uuid"
          },
          "referenceNumber": {
            "type": "string",
            "nullable": true
          },
          "actionNeeded": {
            "type": "string",
            "nullable": true
          },
          "priority": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "dueDate": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AdminDashboardResponse": {
        "type": "object",
        "properties": {
          "statistics": {
            "$ref": "#/components/schemas/SafetyStatistics"
          },
          "recentIncidents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IncidentSummaryResponse"
            },
            "nullable": true
          },
          "pendingActions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ActionItem"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationDetailResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastActivityAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "phone": {
            "type": "string",
            "nullable": true
          },
          "experienceLevel": {
            "type": "string",
            "nullable": true
          },
          "yearsExperience": {
            "type": "integer",
            "format": "int32"
          },
          "experienceDescription": {
            "type": "string",
            "nullable": true
          },
          "safetyKnowledge": {
            "type": "string",
            "nullable": true
          },
          "consentUnderstanding": {
            "type": "string",
            "nullable": true
          },
          "whyJoinCommunity": {
            "type": "string",
            "nullable": true
          },
          "skillsInterests": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "expectationsGoals": {
            "type": "string",
            "nullable": true
          },
          "agreesToGuidelines": {
            "type": "boolean"
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "agreesToTerms": {
            "type": "boolean"
          },
          "consentToContact": {
            "type": "boolean"
          },
          "assignedReviewerName": {
            "type": "string",
            "nullable": true
          },
          "reviewStartedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "interviewScheduledFor": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceDetailDto"
            },
            "nullable": true
          },
          "notes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationNoteDto"
            },
            "nullable": true
          },
          "decisions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReviewDecisionDto"
            },
            "nullable": true
          },
          "workflowHistory": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/WorkflowHistoryDto"
            },
            "nullable": true
          },
          "adminNotes": {
            "type": "string",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "attachments": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "applicationId": {
            "type": "string",
            "format": "uuid"
          }
        },
        "additionalProperties": false
      },
      "ApplicationDetailResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationDetailResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApplicationFilterRequest": {
        "type": "object",
        "properties": {
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "statusFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "onlyMyAssignments": {
            "type": "boolean",
            "nullable": true
          },
          "onlyUnassigned": {
            "type": "boolean",
            "nullable": true
          },
          "assignedReviewerId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "priorityFilters": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "experienceLevelFilters": {
            "type": "array",
            "items": {
              "type": "integer",
              "format": "int32"
            },
            "nullable": true
          },
          "minYearsExperience": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "maxYearsExperience": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "skillsFilters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "submittedAfter": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedBefore": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastActivityAfter": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "lastActivityBefore": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "searchQuery": {
            "type": "string",
            "nullable": true
          },
          "onlyCompleteReferences": {
            "type": "boolean",
            "nullable": true
          },
          "onlyPendingReferences": {
            "type": "boolean",
            "nullable": true
          },
          "sortBy": {
            "type": "string",
            "nullable": true
          },
          "sortDirection": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationNoteDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "content": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "isPrivate": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "reviewerName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApplicationProgressSummary": {
        "type": "object",
        "properties": {
          "applicationSubmitted": {
            "type": "boolean"
          },
          "referencesContacted": {
            "type": "boolean"
          },
          "referencesReceived": {
            "type": "boolean"
          },
          "underReview": {
            "type": "boolean"
          },
          "interviewScheduled": {
            "type": "boolean"
          },
          "decisionMade": {
            "type": "boolean"
          },
          "progressPercentage": {
            "type": "integer",
            "format": "int32"
          },
          "currentPhase": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationReferenceStatus": {
        "type": "object",
        "properties": {
          "totalReferences": {
            "type": "integer",
            "format": "int32"
          },
          "contactedReferences": {
            "type": "integer",
            "format": "int32"
          },
          "respondedReferences": {
            "type": "integer",
            "format": "int32"
          },
          "allReferencesComplete": {
            "type": "boolean"
          },
          "oldestPendingReferenceDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationStatusInfo": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "format": "uuid"
          },
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "nextSteps": {
            "type": "string",
            "nullable": true
          },
          "estimatedDaysRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationStatusResponse": {
        "type": "object",
        "properties": {
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "lastUpdateAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "estimatedDaysRemaining": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "progress": {
            "$ref": "#/components/schemas/ApplicationProgressSummary"
          },
          "recentUpdates": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatusUpdateSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationStatusResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationStatusResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApplicationSubmissionResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "applicationId": {
            "type": "string",
            "format": "uuid"
          },
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "statusToken": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "confirmationMessage": {
            "type": "string",
            "nullable": true
          },
          "estimatedReviewDays": {
            "type": "integer",
            "format": "int32"
          },
          "nextSteps": {
            "type": "string",
            "nullable": true
          },
          "referenceStatuses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceStatusSummary"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationSubmissionResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationSubmissionResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ApplicationSummaryDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastActivityAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "experienceLevel": {
            "type": "string",
            "nullable": true
          },
          "yearsExperience": {
            "type": "integer",
            "format": "int32"
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "assignedReviewerName": {
            "type": "string",
            "nullable": true
          },
          "reviewStartedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "priority": {
            "type": "integer",
            "format": "int32"
          },
          "daysInCurrentStatus": {
            "type": "integer",
            "format": "int32"
          },
          "referenceStatus": {
            "$ref": "#/components/schemas/ApplicationReferenceStatus"
          },
          "hasRecentNotes": {
            "type": "boolean"
          },
          "hasPendingActions": {
            "type": "boolean"
          },
          "interviewScheduledFor": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "skillsTags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ApplicationSummaryDtoPagedResult": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ApplicationSummaryDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32"
          },
          "hasPreviousPage": {
            "type": "boolean"
          },
          "hasNextPage": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "ApplicationSummaryDtoPagedResultApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ApplicationSummaryDtoPagedResult"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuditLogDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "actionType": {
            "type": "string",
            "nullable": true
          },
          "actionDescription": {
            "type": "string",
            "nullable": true
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "userName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "AuthUserResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "roles": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "isVetted": {
            "type": "boolean"
          },
          "isActive": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "AuthUserResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/AuthUserResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "BooleanApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "boolean"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ChangePasswordDto": {
        "required": [
          "confirmPassword",
          "currentPassword",
          "newPassword"
        ],
        "type": "object",
        "properties": {
          "currentPassword": {
            "minLength": 1,
            "type": "string"
          },
          "newPassword": {
            "maxLength": 100,
            "minLength": 8,
            "pattern": "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).+$",
            "type": "string"
          },
          "confirmPassword": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CheckInRequest": {
        "required": [
          "attendeeId",
          "checkInTime",
          "staffMemberId"
        ],
        "type": "object",
        "properties": {
          "attendeeId": {
            "minLength": 1,
            "type": "string"
          },
          "checkInTime": {
            "minLength": 1,
            "type": "string"
          },
          "staffMemberId": {
            "minLength": 1,
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "overrideCapacity": {
            "type": "boolean"
          },
          "isManualEntry": {
            "type": "boolean"
          },
          "manualEntryData": {
            "$ref": "#/components/schemas/ManualEntryData"
          }
        },
        "additionalProperties": false
      },
      "CreateApplicationRequest": {
        "required": [
          "agreesToGuidelines",
          "agreesToTerms",
          "consentToContact",
          "consentUnderstanding",
          "email",
          "expectationsGoals",
          "experienceDescription",
          "experienceLevel",
          "fullName",
          "isAnonymous",
          "references",
          "safetyKnowledge",
          "sceneName",
          "skillsInterests",
          "whyJoinCommunity",
          "yearsExperience"
        ],
        "type": "object",
        "properties": {
          "fullName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "sceneName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "pronouns": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "phone": {
            "type": "string",
            "format": "tel",
            "nullable": true
          },
          "experienceLevel": {
            "type": "integer",
            "format": "int32"
          },
          "yearsExperience": {
            "maximum": 50,
            "minimum": 0,
            "type": "integer",
            "format": "int32"
          },
          "experienceDescription": {
            "maxLength": 500,
            "minLength": 50,
            "type": "string"
          },
          "safetyKnowledge": {
            "maxLength": 300,
            "minLength": 30,
            "type": "string"
          },
          "consentUnderstanding": {
            "maxLength": 300,
            "minLength": 30,
            "type": "string"
          },
          "whyJoinCommunity": {
            "maxLength": 400,
            "minLength": 50,
            "type": "string"
          },
          "skillsInterests": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "expectationsGoals": {
            "maxLength": 300,
            "minLength": 30,
            "type": "string"
          },
          "agreesToGuidelines": {
            "type": "boolean"
          },
          "references": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReferenceRequest"
            }
          },
          "agreesToTerms": {
            "type": "boolean"
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "consentToContact": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "CreateIncidentRequest": {
        "type": "object",
        "properties": {
          "reporterId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "involvedParties": {
            "type": "string",
            "nullable": true
          },
          "witnesses": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "requestFollowUp": {
            "type": "boolean"
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateNoteRequest": {
        "required": [
          "content",
          "type"
        ],
        "type": "object",
        "properties": {
          "content": {
            "maxLength": 2000,
            "minLength": 5,
            "type": "string"
          },
          "type": {
            "type": "integer",
            "format": "int32"
          },
          "isPrivate": {
            "type": "boolean"
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateRSVPRequest": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "notes": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTestUserRequest": {
        "required": [
          "email",
          "password",
          "sceneName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "nullable": true
          },
          "password": {
            "type": "string",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "dateOfBirth": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "isVetted": {
            "type": "boolean"
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "CreateTicketPurchaseRequest": {
        "required": [
          "eventId"
        ],
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "notes": {
            "maxLength": 2000,
            "type": "string",
            "nullable": true
          },
          "paymentMethodId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DetailedHealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "databaseConnected": {
            "type": "boolean"
          },
          "userCount": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "string",
            "nullable": true
          },
          "databaseVersion": {
            "type": "string",
            "nullable": true
          },
          "activeUserCount": {
            "type": "integer",
            "format": "int32"
          },
          "environment": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "policies": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "eventType": {
            "type": "string",
            "nullable": true
          },
          "capacity": {
            "type": "integer",
            "format": "int32"
          },
          "isPublished": {
            "type": "boolean"
          },
          "registrationCount": {
            "type": "integer",
            "format": "int32"
          },
          "currentRSVPs": {
            "type": "integer",
            "format": "int32"
          },
          "currentTickets": {
            "type": "integer",
            "format": "int32"
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionDto"
            },
            "nullable": true
          },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTypeDto"
            },
            "nullable": true
          },
          "volunteerPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolunteerPositionDto"
            },
            "nullable": true
          },
          "teacherIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventDtoApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/EventDto"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EventDtoListApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventDto"
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "EventParticipationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "userSceneName": {
            "type": "string",
            "nullable": true
          },
          "userEmail": {
            "type": "string",
            "nullable": true
          },
          "participationType": {
            "$ref": "#/components/schemas/ParticipationType"
          },
          "status": {
            "$ref": "#/components/schemas/ParticipationStatus"
          },
          "participationDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "canCancel": {
            "type": "boolean"
          },
          "metadata": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "EventParticipationDtoListApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EventParticipationDto"
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "HealthResponse": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          },
          "databaseConnected": {
            "type": "boolean"
          },
          "userCount": {
            "type": "integer",
            "format": "int32"
          },
          "version": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "IncidentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "referenceNumber": {
            "type": "string",
            "nullable": true
          },
          "reporterId": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "reporterName": {
            "type": "string",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "reportedAt": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "involvedParties": {
            "type": "string",
            "nullable": true
          },
          "witnesses": {
            "type": "string",
            "nullable": true
          },
          "contactEmail": {
            "type": "string",
            "nullable": true
          },
          "contactPhone": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "requestFollowUp": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "assignedTo": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "assignedUserName": {
            "type": "string",
            "nullable": true
          },
          "auditTrail": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AuditLogDto"
            },
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "IncidentSeverity": {
        "enum": [
          "Low",
          "Medium",
          "High",
          "Critical"
        ],
        "type": "string"
      },
      "IncidentStatus": {
        "enum": [
          "New",
          "InProgress",
          "Resolved",
          "Archived"
        ],
        "type": "string"
      },
      "IncidentStatusResponse": {
        "type": "object",
        "properties": {
          "referenceNumber": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "lastUpdated": {
            "type": "string",
            "format": "date-time"
          },
          "canProvideMoreInfo": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "IncidentSummaryResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "referenceNumber": {
            "type": "string",
            "nullable": true
          },
          "severity": {
            "$ref": "#/components/schemas/IncidentSeverity"
          },
          "incidentDate": {
            "type": "string",
            "format": "date-time"
          },
          "reportedAt": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "isAnonymous": {
            "type": "boolean"
          },
          "status": {
            "$ref": "#/components/schemas/IncidentStatus"
          },
          "assignedTo": {
            "type": "string",
            "format": "uuid",
            "nullable": true
          },
          "assignedUserName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "LoginRequest": {
        "required": [
          "email",
          "password"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "password": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "nullable": true
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "user": {
            "$ref": "#/components/schemas/AuthUserResponse"
          }
        },
        "additionalProperties": false
      },
      "ManualEntryData": {
        "required": [
          "email",
          "name",
          "phone"
        ],
        "type": "object",
        "properties": {
          "name": {
            "minLength": 1,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "phone": {
            "minLength": 1,
            "type": "string",
            "format": "tel"
          },
          "dietaryRestrictions": {
            "type": "string",
            "nullable": true
          },
          "accessibilityNeeds": {
            "type": "string",
            "nullable": true
          },
          "hasCompletedWaiver": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "MyApplicationStatusResponse": {
        "type": "object",
        "properties": {
          "hasApplication": {
            "type": "boolean"
          },
          "application": {
            "$ref": "#/components/schemas/ApplicationStatusInfo"
          }
        },
        "additionalProperties": false
      },
      "MyApplicationStatusResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/MyApplicationStatusResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "NoteResponse": {
        "type": "object",
        "properties": {
          "noteId": {
            "type": "string",
            "format": "uuid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "confirmationMessage": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "NoteResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/NoteResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ObjectApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ParticipationStatus": {
        "enum": [
          "Active",
          "Cancelled",
          "Refunded",
          "Waitlisted"
        ],
        "type": "string"
      },
      "ParticipationStatusDto": {
        "type": "object",
        "properties": {
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "participationType": {
            "$ref": "#/components/schemas/ParticipationType"
          },
          "status": {
            "$ref": "#/components/schemas/ParticipationStatus"
          },
          "participationDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "canCancel": {
            "type": "boolean"
          },
          "metadata": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ParticipationType": {
        "enum": [
          "RSVP",
          "Ticket"
        ],
        "type": "string"
      },
      "PaymentMethodType": {
        "enum": [
          "SavedCard",
          "NewCard",
          "BankTransfer",
          "PayPal",
          "Venmo"
        ],
        "type": "string"
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "eventRegistrationId": {
            "type": "string",
            "format": "uuid"
          },
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "displayAmount": {
            "type": "string",
            "nullable": true
          },
          "originalAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "slidingScalePercentage": {
            "type": "number",
            "format": "double"
          },
          "discountAmount": {
            "type": "number",
            "format": "double",
            "nullable": true
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "refundInfo": {
            "$ref": "#/components/schemas/RefundInfoResponse"
          },
          "clientSecret": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PaymentStatus": {
        "enum": [
          "Pending",
          "Completed",
          "Failed",
          "Refunded",
          "PartiallyRefunded"
        ],
        "type": "string"
      },
      "PaymentStatusResponse": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "eventRegistrationId": {
            "type": "string",
            "format": "uuid"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "isCompleted": {
            "type": "boolean"
          },
          "isRefunded": {
            "type": "boolean"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "PendingCheckIn": {
        "required": [
          "attendeeId",
          "checkInTime",
          "localId",
          "staffMemberId"
        ],
        "type": "object",
        "properties": {
          "localId": {
            "minLength": 1,
            "type": "string"
          },
          "attendeeId": {
            "minLength": 1,
            "type": "string"
          },
          "checkInTime": {
            "minLength": 1,
            "type": "string"
          },
          "staffMemberId": {
            "minLength": 1,
            "type": "string"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "isManualEntry": {
            "type": "boolean"
          },
          "manualEntryData": {
            "$ref": "#/components/schemas/ManualEntryData"
          }
        },
        "additionalProperties": false
      },
      "ProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "ProcessPaymentApiRequest": {
        "type": "object",
        "properties": {
          "eventRegistrationId": {
            "type": "string",
            "format": "uuid"
          },
          "originalAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "slidingScalePercentage": {
            "type": "number",
            "format": "double"
          },
          "paymentMethodType": {
            "$ref": "#/components/schemas/PaymentMethodType"
          },
          "returnUrl": {
            "type": "string",
            "nullable": true
          },
          "cancelUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProcessRefundApiRequest": {
        "type": "object",
        "properties": {
          "paymentId": {
            "type": "string",
            "format": "uuid"
          },
          "refundAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "nullable": true
          },
          "metadata": {
            "type": "object",
            "additionalProperties": { },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ProtectedWelcomeResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "nullable": true
          },
          "user": {
            "$ref": "#/components/schemas/AuthUserResponse"
          },
          "serverTime": {
            "type": "string",
            "format": "date-time"
          },
          "tokenClaims": {
            "$ref": "#/components/schemas/TokenClaims"
          }
        },
        "additionalProperties": false
      },
      "PublicApplicationSubmissionRequest": {
        "required": [
          "agreeToRules",
          "consentToBackground",
          "email",
          "experience",
          "interests",
          "phoneNumber",
          "realName",
          "references",
          "sceneName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "sceneName": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "realName": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "phoneNumber": {
            "minLength": 1,
            "type": "string",
            "format": "tel"
          },
          "experience": {
            "minLength": 1,
            "type": "string"
          },
          "interests": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "references": {
            "minLength": 1,
            "type": "string"
          },
          "agreeToRules": {
            "type": "boolean"
          },
          "consentToBackground": {
            "type": "boolean"
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "additionalInfo": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReferenceDetailDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "relationship": {
            "type": "string",
            "nullable": true
          },
          "order": {
            "type": "integer",
            "format": "int32"
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "contactedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "respondedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "formExpiresAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "response": {
            "$ref": "#/components/schemas/ReferenceResponseDto"
          }
        },
        "additionalProperties": false
      },
      "ReferenceRequest": {
        "required": [
          "email",
          "name",
          "relationship"
        ],
        "type": "object",
        "properties": {
          "name": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "relationship": {
            "maxLength": 200,
            "minLength": 5,
            "type": "string"
          },
          "order": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ReferenceResponseDto": {
        "type": "object",
        "properties": {
          "relationshipDuration": {
            "type": "string",
            "nullable": true
          },
          "experienceAssessment": {
            "type": "string",
            "nullable": true
          },
          "safetyConcerns": {
            "type": "string",
            "nullable": true
          },
          "communityReadiness": {
            "type": "string",
            "nullable": true
          },
          "recommendation": {
            "type": "string",
            "nullable": true
          },
          "additionalComments": {
            "type": "string",
            "nullable": true
          },
          "respondedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReferenceStatusSummary": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "string",
            "nullable": true
          },
          "contactedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "respondedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RefundInfoResponse": {
        "type": "object",
        "properties": {
          "refundedAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "displayAmount": {
            "type": "string",
            "nullable": true
          },
          "refundedAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "nullable": true
          },
          "refundCount": {
            "type": "integer",
            "format": "int32"
          },
          "isPartialRefund": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RefundResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "originalPaymentId": {
            "type": "string",
            "format": "uuid"
          },
          "refundAmount": {
            "type": "number",
            "format": "double"
          },
          "currency": {
            "type": "string",
            "nullable": true
          },
          "displayAmount": {
            "type": "string",
            "nullable": true
          },
          "refundReason": {
            "type": "string",
            "nullable": true
          },
          "refundStatus": {
            "$ref": "#/components/schemas/RefundStatus"
          },
          "statusDescription": {
            "type": "string",
            "nullable": true
          },
          "processedByUserId": {
            "type": "string",
            "format": "uuid"
          },
          "processedByUserName": {
            "type": "string",
            "nullable": true
          },
          "processedAt": {
            "type": "string",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "RefundStatus": {
        "enum": [
          "Processing",
          "Completed",
          "Failed",
          "Cancelled"
        ],
        "type": "string"
      },
      "RegisterRequest": {
        "required": [
          "email",
          "password",
          "sceneName"
        ],
        "type": "object",
        "properties": {
          "email": {
            "maxLength": 254,
            "minLength": 0,
            "type": "string",
            "format": "email"
          },
          "password": {
            "maxLength": 100,
            "minLength": 8,
            "type": "string"
          },
          "sceneName": {
            "maxLength": 50,
            "minLength": 2,
            "pattern": "^[a-zA-Z0-9_-]+$",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ReviewDecisionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "decisionType": {
            "type": "string",
            "nullable": true
          },
          "reasoning": {
            "type": "string",
            "nullable": true
          },
          "score": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isFinalDecision": {
            "type": "boolean"
          },
          "additionalInfoRequested": {
            "type": "string",
            "nullable": true
          },
          "additionalInfoDeadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "proposedInterviewTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "interviewNotes": {
            "type": "string",
            "nullable": true
          },
          "reviewerName": {
            "type": "string",
            "nullable": true
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ReviewDecisionRequest": {
        "required": [
          "decisionType",
          "reasoning"
        ],
        "type": "object",
        "properties": {
          "decisionType": { },
          "reasoning": {
            "maxLength": 1000,
            "minLength": 10,
            "type": "string"
          },
          "score": {
            "maximum": 10,
            "minimum": 1,
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "isFinalDecision": {
            "type": "boolean"
          },
          "additionalInfoRequested": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "additionalInfoDeadline": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "proposedInterviewTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "interviewNotes": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReviewDecisionResponse": {
        "type": "object",
        "properties": {
          "decisionId": {
            "type": "string",
            "format": "uuid"
          },
          "decisionType": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "newApplicationStatus": {
            "type": "string",
            "nullable": true
          },
          "confirmationMessage": {
            "type": "string",
            "nullable": true
          },
          "actionsTriggered": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "ReviewDecisionResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/ReviewDecisionResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SafetyStatistics": {
        "type": "object",
        "properties": {
          "criticalCount": {
            "type": "integer",
            "format": "int32"
          },
          "highCount": {
            "type": "integer",
            "format": "int32"
          },
          "mediumCount": {
            "type": "integer",
            "format": "int32"
          },
          "lowCount": {
            "type": "integer",
            "format": "int32"
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "newCount": {
            "type": "integer",
            "format": "int32"
          },
          "inProgressCount": {
            "type": "integer",
            "format": "int32"
          },
          "resolvedCount": {
            "type": "integer",
            "format": "int32"
          },
          "thisMonth": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "ServiceTokenRequest": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SessionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "sessionIdentifier": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "endTime": {
            "type": "string",
            "format": "date-time"
          },
          "capacity": {
            "type": "integer",
            "format": "int32"
          },
          "registrationCount": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "SimpleNoteRequest": {
        "required": [
          "note"
        ],
        "type": "object",
        "properties": {
          "note": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "isPrivate": {
            "type": "boolean",
            "nullable": true
          },
          "tags": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimpleReasoningRequest": {
        "required": [
          "reasoning"
        ],
        "type": "object",
        "properties": {
          "reasoning": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "SimplifiedApplicationRequest": {
        "required": [
          "agreeToCommunityStandards",
          "email",
          "experienceWithRope",
          "preferredSceneName",
          "realName",
          "whyJoin"
        ],
        "type": "object",
        "properties": {
          "realName": {
            "maxLength": 100,
            "minLength": 2,
            "type": "string"
          },
          "preferredSceneName": {
            "maxLength": 50,
            "minLength": 2,
            "type": "string"
          },
          "fetLifeHandle": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "whyJoin": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "experienceWithRope": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string"
          },
          "agreeToCommunityStandards": {
            "type": "boolean"
          },
          "pronouns": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "maxLength": 500,
            "minLength": 0,
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimplifiedApplicationResponse": {
        "type": "object",
        "properties": {
          "applicationId": {
            "type": "string",
            "format": "uuid"
          },
          "applicationNumber": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          },
          "confirmationMessage": {
            "type": "string",
            "nullable": true
          },
          "emailSent": {
            "type": "boolean"
          },
          "nextSteps": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "otherNames": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SimplifiedApplicationResponseApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/SimplifiedApplicationResponse"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "StatusChangeRequest": {
        "required": [
          "reasoning",
          "status"
        ],
        "type": "object",
        "properties": {
          "status": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string"
          },
          "reasoning": {
            "maxLength": 1000,
            "minLength": 0,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "StatusUpdateSummary": {
        "type": "object",
        "properties": {
          "updatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SubmissionResponse": {
        "type": "object",
        "properties": {
          "referenceNumber": {
            "type": "string",
            "nullable": true
          },
          "trackingUrl": {
            "type": "string",
            "nullable": true
          },
          "submittedAt": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SyncRequest": {
        "required": [
          "deviceId",
          "lastSyncTimestamp",
          "pendingCheckIns"
        ],
        "type": "object",
        "properties": {
          "deviceId": {
            "minLength": 1,
            "type": "string"
          },
          "pendingCheckIns": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PendingCheckIn"
            }
          },
          "lastSyncTimestamp": {
            "minLength": 1,
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "TicketTypeDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "type": {
            "type": "string",
            "nullable": true
          },
          "sessionIdentifiers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "minPrice": {
            "type": "number",
            "format": "double"
          },
          "maxPrice": {
            "type": "number",
            "format": "double"
          },
          "quantityAvailable": {
            "type": "integer",
            "format": "int32"
          },
          "salesEndDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "TokenClaims": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateEventRequest": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "nullable": true
          },
          "shortDescription": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "policies": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "endDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "capacity": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "pricingTiers": {
            "type": "string",
            "nullable": true
          },
          "isPublished": {
            "type": "boolean",
            "nullable": true
          },
          "sessions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SessionDto"
            },
            "nullable": true
          },
          "ticketTypes": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TicketTypeDto"
            },
            "nullable": true
          },
          "teacherIds": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "volunteerPositions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/VolunteerPositionDto"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProfileDto": {
        "required": [
          "email",
          "sceneName"
        ],
        "type": "object",
        "properties": {
          "sceneName": {
            "maxLength": 50,
            "minLength": 3,
            "type": "string"
          },
          "firstName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "email": {
            "minLength": 1,
            "type": "string",
            "format": "email"
          },
          "pronouns": {
            "maxLength": 50,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "bio": {
            "maxLength": 2000,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "discordName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "fetLifeName": {
            "maxLength": 100,
            "minLength": 0,
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "maxLength": 20,
            "minLength": 0,
            "type": "string",
            "format": "tel",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateProfileRequest": {
        "type": "object",
        "properties": {
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UpdateUserRequest": {
        "type": "object",
        "properties": {
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean",
            "nullable": true
          },
          "isVetted": {
            "type": "boolean",
            "nullable": true
          },
          "emailConfirmed": {
            "type": "boolean",
            "nullable": true
          },
          "vettingStatus": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "role": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "isActive": {
            "type": "boolean"
          },
          "isVetted": {
            "type": "boolean"
          },
          "emailConfirmed": {
            "type": "boolean"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "lastLoginAt": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "vettingStatus": {
            "type": "integer",
            "format": "int32"
          }
        },
        "additionalProperties": false
      },
      "UserEventDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "startDate": {
            "type": "string",
            "format": "date-time"
          },
          "endDate": {
            "type": "string",
            "format": "date-time"
          },
          "location": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "registrationStatus": {
            "type": "string",
            "nullable": true
          },
          "isSocialEvent": {
            "type": "boolean"
          },
          "hasTicket": {
            "type": "boolean"
          },
          "isPastEvent": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserEventDtoListApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserEventDto"
            },
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "UserListResponse": {
        "type": "object",
        "properties": {
          "users": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/UserDto"
            },
            "nullable": true
          },
          "totalCount": {
            "type": "integer",
            "format": "int32"
          },
          "page": {
            "type": "integer",
            "format": "int32"
          },
          "pageSize": {
            "type": "integer",
            "format": "int32"
          },
          "totalPages": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "hasPreviousPage": {
            "type": "boolean",
            "readOnly": true
          },
          "hasNextPage": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "UserOptionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "name": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserParticipationDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "eventId": {
            "type": "string",
            "format": "uuid"
          },
          "eventTitle": {
            "type": "string",
            "nullable": true
          },
          "eventStartDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventEndDate": {
            "type": "string",
            "format": "date-time"
          },
          "eventLocation": {
            "type": "string",
            "nullable": true
          },
          "participationType": {
            "$ref": "#/components/schemas/ParticipationType"
          },
          "status": {
            "$ref": "#/components/schemas/ParticipationStatus"
          },
          "participationDate": {
            "type": "string",
            "format": "date-time"
          },
          "notes": {
            "type": "string",
            "nullable": true
          },
          "canCancel": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "UserProfileDto": {
        "type": "object",
        "properties": {
          "userId": {
            "type": "string",
            "format": "uuid"
          },
          "sceneName": {
            "type": "string",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "email": {
            "type": "string",
            "nullable": true
          },
          "pronouns": {
            "type": "string",
            "nullable": true
          },
          "bio": {
            "type": "string",
            "nullable": true
          },
          "discordName": {
            "type": "string",
            "nullable": true
          },
          "fetLifeName": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "vettingStatus": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "UserProfileDtoApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/UserProfileDto"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "ValidationProblemDetails": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "status": {
            "type": "integer",
            "format": "int32",
            "nullable": true
          },
          "detail": {
            "type": "string",
            "nullable": true
          },
          "instance": {
            "type": "string",
            "nullable": true
          },
          "errors": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            "nullable": true
          }
        },
        "additionalProperties": { }
      },
      "VettingStatusDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "nullable": true
          },
          "lastUpdatedAt": {
            "type": "string",
            "format": "date-time"
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "interviewScheduleUrl": {
            "type": "string",
            "nullable": true
          },
          "reapplyInfoUrl": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "VettingStatusDtoApiResponse": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          },
          "data": {
            "$ref": "#/components/schemas/VettingStatusDto"
          },
          "error": {
            "type": "string",
            "nullable": true
          },
          "details": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "VolunteerPositionDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "nullable": true
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "slotsNeeded": {
            "type": "integer",
            "format": "int32"
          },
          "slotsFilled": {
            "type": "integer",
            "format": "int32"
          },
          "requiresExperience": {
            "type": "boolean"
          },
          "requirements": {
            "type": "string",
            "nullable": true
          },
          "sessionId": {
            "type": "string",
            "nullable": true
          },
          "slotsRemaining": {
            "type": "integer",
            "format": "int32",
            "readOnly": true
          },
          "isFullyStaffed": {
            "type": "boolean",
            "readOnly": true
          }
        },
        "additionalProperties": false
      },
      "WorkflowHistoryDto": {
        "type": "object",
        "properties": {
          "action": {
            "type": "string",
            "nullable": true
          },
          "performedAt": {
            "type": "string",
            "format": "date-time"
          },
          "performedBy": {
            "type": "string",
            "nullable": true
          },
          "notes": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      }
    }
  }
}