// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WitchCityRope.Api.Data;

#nullable disable

namespace WitchCityRope.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250913230609_CreatePaymentSystem")]
    partial class CreatePaymentSystem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventOrganizers", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventOrganizers", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventAttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsManualEntry")
                        .HasColumnType("boolean");

                    b.Property<string>("ManualEntryData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("OverrideCapacity")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckInTime")
                        .HasDatabaseName("IX_CheckIns_CheckInTime");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EventAttendeeId")
                        .IsUnique()
                        .HasDatabaseName("UQ_CheckIns_EventAttendee");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_CheckIns_EventId");

                    b.HasIndex("IsManualEntry")
                        .HasDatabaseName("IX_CheckIns_ManualEntry")
                        .HasFilter("\"IsManualEntry\" = true");

                    b.HasIndex("ManualEntryData")
                        .HasDatabaseName("IX_CheckIns_ManualEntryData")
                        .HasFilter("\"ManualEntryData\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ManualEntryData"), "gin");

                    b.HasIndex("OverrideCapacity")
                        .HasDatabaseName("IX_CheckIns_CapacityOverride")
                        .HasFilter("\"OverrideCapacity\" = true");

                    b.HasIndex("StaffMemberId")
                        .HasDatabaseName("IX_CheckIns_StaffMemberId");

                    b.HasIndex("EventId", "CheckInTime")
                        .HasDatabaseName("IX_CheckIns_Event_Time");

                    b.ToTable("CheckIns", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_CheckIns_ManualEntryData", "(\"IsManualEntry\" = true AND \"ManualEntryData\" IS NOT NULL) OR (\"IsManualEntry\" = false AND \"ManualEntryData\" IS NULL)");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckInAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventAttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_CheckInAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_CreatedAt");

                    b.HasIndex("EventAttendeeId")
                        .HasDatabaseName("IX_CheckInAuditLog_EventAttendeeId");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_CheckInAuditLog_EventId");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_CheckInAuditLog_NewValues")
                        .HasFilter("\"NewValues\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_CheckInAuditLog_OldValues")
                        .HasFilter("\"OldValues\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("CreatedBy", "CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_User_Time");

                    b.HasIndex("EventId", "CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_Event_Time");

                    b.ToTable("CheckInAuditLog", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_CheckInAuditLog_ActionType", "\"ActionType\" IN ('check-in', 'manual-entry', 'capacity-override', 'status-change', 'data-update')");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessibilityNeeds")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DietaryRestrictions")
                        .HasColumnType("text");

                    b.Property<string>("EmergencyContactName")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EmergencyContactPhone")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasCompletedWaiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("WaitlistPosition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventAttendees_EventId");

                    b.HasIndex("HasCompletedWaiver")
                        .HasDatabaseName("IX_EventAttendees_Waiver")
                        .HasFilter("\"HasCompletedWaiver\" = false");

                    b.HasIndex("IsFirstTime")
                        .HasDatabaseName("IX_EventAttendees_FirstTime")
                        .HasFilter("\"IsFirstTime\" = true");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_EventAttendees_Metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("RegistrationStatus")
                        .HasDatabaseName("IX_EventAttendees_RegistrationStatus");

                    b.HasIndex("TicketNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_EventAttendees_TicketNumber_Unique")
                        .HasFilter("\"TicketNumber\" IS NOT NULL");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_EventAttendees_UserId");

                    b.HasIndex("EventId", "RegistrationStatus")
                        .HasDatabaseName("IX_EventAttendees_Event_Status");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UQ_EventAttendees_EventUser");

                    b.HasIndex("EventId", "WaitlistPosition")
                        .HasDatabaseName("IX_EventAttendees_Event_Waitlist")
                        .HasFilter("\"RegistrationStatus\" = 'waitlist'");

                    b.ToTable("EventAttendees", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_EventAttendees_RegistrationStatus", "\"RegistrationStatus\" IN ('confirmed', 'waitlist', 'checked-in', 'no-show', 'cancelled')");

                            t.HasCheckConstraint("CHK_EventAttendees_WaitlistPosition", "\"WaitlistPosition\" > 0 OR \"WaitlistPosition\" IS NULL");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.OfflineSyncQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LocalTimestamp")
                        .HasColumnType("timestamptz");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionData")
                        .HasDatabaseName("IX_OfflineSyncQueue_ActionData");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ActionData"), "gin");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_OfflineSyncQueue_Pending")
                        .HasFilter("\"SyncStatus\" = 'pending'");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_OfflineSyncQueue_EventId");

                    b.HasIndex("LocalTimestamp")
                        .HasDatabaseName("IX_OfflineSyncQueue_LocalTimestamp");

                    b.HasIndex("SyncStatus")
                        .HasDatabaseName("IX_OfflineSyncQueue_SyncStatus");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_OfflineSyncQueue_UserId");

                    b.HasIndex("RetryCount", "CreatedAt")
                        .HasDatabaseName("IX_OfflineSyncQueue_Failed")
                        .HasFilter("\"SyncStatus\" = 'failed' AND \"RetryCount\" < 5");

                    b.ToTable("OfflineSyncQueue", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_OfflineSyncQueue_ActionType", "\"ActionType\" IN ('check-in', 'manual-entry', 'status-update', 'capacity-override')");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_RetryCount", "\"RetryCount\" >= 0 AND \"RetryCount\" <= 10");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_SyncStatus", "\"SyncStatus\" IN ('pending', 'syncing', 'completed', 'failed', 'conflict')");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_SyncedAt", "(\"SyncStatus\" = 'completed' AND \"SyncedAt\" IS NOT NULL) OR (\"SyncStatus\" != 'completed' AND \"SyncedAt\" IS NULL)");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("AmountValue");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("Currency");

                    b.Property<string>("EncryptedStripeCustomerId")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedStripePaymentIntentId")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedStripeRefundId")
                        .HasColumnType("text");

                    b.Property<Guid>("EventRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamptz");

                    b.Property<decimal?>("RefundAmountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RefundCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("RefundedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SlidingScalePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Payments_PendingStatus")
                        .HasFilter("\"Status\" = 0");

                    b.HasIndex("EventRegistrationId")
                        .IsUnique()
                        .HasDatabaseName("UX_Payments_EventRegistration_Completed")
                        .HasFilter("\"Status\" = 1");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_Payments_Metadata_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Payments_FailedStatus")
                        .HasFilter("\"Status\" = 2");

                    b.HasIndex("RefundedAt")
                        .HasDatabaseName("IX_Payments_RefundedStatus")
                        .HasFilter("\"RefundedAt\" IS NOT NULL");

                    b.HasIndex("RefundedByUserId");

                    b.HasIndex("SlidingScalePercentage")
                        .HasDatabaseName("IX_Payments_SlidingScalePercentage");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Payments_UserId");

                    b.ToTable("Payments", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_Payments_AmountValue_NonNegative", "\"AmountValue\" >= 0");

                            t.HasCheckConstraint("CHK_Payments_CurrencyConsistency", "(\"RefundCurrency\" IS NULL) OR (\"RefundCurrency\" = \"Currency\")");

                            t.HasCheckConstraint("CHK_Payments_Currency_Valid", "\"Currency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_Payments_RefundAmount_NotExceedOriginal", "\"RefundAmountValue\" IS NULL OR \"RefundAmountValue\" <= \"AmountValue\"");

                            t.HasCheckConstraint("CHK_Payments_RefundCurrency_Valid", "\"RefundCurrency\" IS NULL OR \"RefundCurrency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_Payments_RefundRequiresOriginalPayment", "(\"RefundAmountValue\" IS NULL AND \"RefundedAt\" IS NULL) OR (\"RefundAmountValue\" IS NOT NULL AND \"RefundedAt\" IS NOT NULL)");

                            t.HasCheckConstraint("CHK_Payments_SlidingScalePercentage_Range", "\"SlidingScalePercentage\" >= 0 AND \"SlidingScalePercentage\" <= 75.00");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<Dictionary<string, object>>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<Dictionary<string, object>>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_PaymentAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_FailedActions")
                        .HasFilter("\"ActionType\" IN ('PaymentFailed', 'RefundFailed')");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_PaymentAuditLog_NewValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_PaymentAuditLog_OldValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("PaymentId", "CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_PaymentId_CreatedAt");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_UserId_CreatedAt");

                    b.ToTable("PaymentAuditLog", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentAuditLog_ActionType", "\"ActionType\" IN ('PaymentInitiated', 'PaymentProcessed', 'PaymentCompleted', 'PaymentFailed', 'PaymentRetried', 'RefundInitiated', 'RefundCompleted', 'RefundFailed', 'StatusChanged', 'MetadataUpdated', 'SystemAction')");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentFailure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedStripeErrorDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FailureCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FailureMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FailedAt")
                        .HasDatabaseName("IX_PaymentFailures_FailedAt");

                    b.HasIndex("FailureCode")
                        .HasDatabaseName("IX_PaymentFailures_FailureCode");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("IX_PaymentFailures_PaymentId");

                    b.HasIndex("RetryCount")
                        .HasDatabaseName("IX_PaymentFailures_RetryCount")
                        .HasFilter("\"RetryCount\" > 0");

                    b.ToTable("PaymentFailures", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentFailures_RetryCount_NonNegative", "\"RetryCount\" >= 0");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardBrand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedStripePaymentMethodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastFourDigits")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_PaymentMethods_UserDefault")
                        .HasFilter("\"IsDefault\" = true AND \"IsActive\" = true");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_PaymentMethods_IsActive")
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("UserId", "IsDefault")
                        .HasDatabaseName("IX_PaymentMethods_IsDefault")
                        .HasFilter("\"IsDefault\" = true");

                    b.ToTable("PaymentMethods", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentMethods_CardBrand", "\"CardBrand\" IN ('Visa', 'MasterCard', 'American Express', 'Discover', 'JCB', 'Diners Club')");

                            t.HasCheckConstraint("CHK_PaymentMethods_ExpiryMonth_Range", "\"ExpiryMonth\" >= 1 AND \"ExpiryMonth\" <= 12");

                            t.HasCheckConstraint("CHK_PaymentMethods_ExpiryYear_Future", "\"ExpiryYear\" >= EXTRACT(YEAR FROM NOW())");

                            t.HasCheckConstraint("CHK_PaymentMethods_LastFourDigits", "\"LastFourDigits\" ~ '^\\d{4}$'");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentRefund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedStripeRefundId")
                        .HasColumnType("text");

                    b.Property<Dictionary<string, object>>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'");

                    b.Property<Guid>("OriginalPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProcessedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RefundAmountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RefundCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_PaymentRefunds_Metadata_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("OriginalPaymentId")
                        .HasDatabaseName("IX_PaymentRefunds_OriginalPaymentId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_PaymentRefunds_ProcessedAt");

                    b.HasIndex("ProcessedByUserId")
                        .HasDatabaseName("IX_PaymentRefunds_ProcessedByUserId");

                    b.HasIndex("RefundStatus")
                        .HasDatabaseName("IX_PaymentRefunds_RefundStatus");

                    b.ToTable("PaymentRefunds", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentRefunds_Currency", "\"RefundCurrency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_PaymentRefunds_ReasonRequired", "LENGTH(TRIM(\"RefundReason\")) >= 10");

                            t.HasCheckConstraint("CHK_PaymentRefunds_RefundAmountValue_Positive", "\"RefundAmountValue\" > 0");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_IncidentAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_IncidentAuditLog_CreatedAt");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_IncidentAuditLog_NewValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_IncidentAuditLog_OldValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("UserId");

                    b.HasIndex("IncidentId", "CreatedAt")
                        .HasDatabaseName("IX_IncidentAuditLog_IncidentId_CreatedAt");

                    b.ToTable("IncidentAuditLog", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .HasDatabaseName("IX_IncidentNotifications_IncidentId");

                    b.HasIndex("RecipientType")
                        .HasDatabaseName("IX_IncidentNotifications_RecipientType");

                    b.HasIndex("CreatedAt", "RetryCount")
                        .HasDatabaseName("IX_IncidentNotifications_Failed_RetryCount")
                        .HasFilter("\"Status\" = 'Failed' AND \"RetryCount\" < 5");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_IncidentNotifications_Status_CreatedAt");

                    b.ToTable("IncidentNotifications", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("EncryptedContactEmail")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedContactPhone")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EncryptedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedInvolvedParties")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedWitnesses")
                        .HasColumnType("text");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("ReporterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequestFollowUp")
                        .HasColumnType("boolean");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SafetyIncidents_ReferenceNumber");

                    b.HasIndex("ReportedAt")
                        .HasDatabaseName("IX_SafetyIncidents_ReportedAt");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("IX_SafetyIncidents_ReporterId")
                        .HasFilter("\"ReporterId\" IS NOT NULL");

                    b.HasIndex("Severity")
                        .HasDatabaseName("IX_SafetyIncidents_Severity");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SafetyIncidents_Status");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Status", "Severity", "ReportedAt")
                        .HasDatabaseName("IX_SafetyIncidents_Status_Severity_ReportedAt");

                    b.ToTable("SafetyIncidents", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<bool>("AgreesToGuidelines")
                        .HasColumnType("boolean");

                    b.Property<bool>("AgreesToTerms")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("ApplicantId")
                        .HasColumnType("uuid");

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<Guid?>("AssignedReviewerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("ConsentToContact")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("DecisionMadeAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EncryptedConsentUnderstanding")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedExpectationsGoals")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedExperienceDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedFullName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedPhone")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EncryptedPronouns")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EncryptedSafetyKnowledge")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedSceneName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedWhyJoinCommunity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("InterviewScheduledFor")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ReviewStartedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("SkillsInterests")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("StatusToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicantId");

                    b.HasIndex("ApplicationNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingApplications_ApplicationNumber");

                    b.HasIndex("AssignedReviewerId")
                        .HasDatabaseName("IX_VettingApplications_AssignedReviewerId")
                        .HasFilter("\"AssignedReviewerId\" IS NOT NULL");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("IX_VettingApplications_DeletedAt")
                        .HasFilter("\"DeletedAt\" IS NOT NULL");

                    b.HasIndex("SkillsInterests")
                        .HasDatabaseName("IX_VettingApplications_SkillsInterests");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SkillsInterests"), "gin");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VettingApplications_Status");

                    b.HasIndex("StatusToken")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingApplications_StatusToken");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_VettingApplications_Active_Status_CreatedAt")
                        .HasFilter("\"DeletedAt\" IS NULL");

                    b.HasIndex("Status", "Priority", "CreatedAt")
                        .HasDatabaseName("IX_VettingApplications_Status_Priority_CreatedAt");

                    b.ToTable("VettingApplications", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_VettingApplicationAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_VettingApplicationAuditLog_CreatedAt");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_VettingApplicationAuditLog_NewValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_VettingApplicationAuditLog_OldValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("UserId");

                    b.HasIndex("ApplicationId", "CreatedAt")
                        .HasDatabaseName("IX_VettingApplicationAuditLog_ApplicationId_CreatedAt");

                    b.ToTable("VettingApplicationAuditLog", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationNote", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsPrivate")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingApplicationNotes_ApplicationId");

                    b.HasIndex("IsPrivate")
                        .HasDatabaseName("IX_VettingApplicationNotes_IsPrivate");

                    b.HasIndex("ReviewerId")
                        .HasDatabaseName("IX_VettingApplicationNotes_ReviewerId");

                    b.HasIndex("TagsJson")
                        .HasDatabaseName("IX_VettingApplicationNotes_Tags");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TagsJson"), "gin");

                    b.HasIndex("ApplicationId", "Type", "CreatedAt")
                        .HasDatabaseName("IX_VettingApplicationNotes_ApplicationId_Type_CreatedAt");

                    b.ToTable("VettingApplicationNotes", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingDecision", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("AdditionalInfoDeadline")
                        .HasColumnType("timestamptz");

                    b.Property<string>("AdditionalInfoRequested")
                        .HasColumnType("text");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DecisionIpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<int>("DecisionType")
                        .HasColumnType("integer");

                    b.Property<string>("DecisionUserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("InterviewNotes")
                        .HasColumnType("text");

                    b.Property<bool>("IsFinalDecision")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ProposedInterviewTime")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Reasoning")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ReviewerId")
                        .HasColumnType("uuid");

                    b.Property<int?>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingDecisions_ApplicationId");

                    b.HasIndex("DecisionType")
                        .HasDatabaseName("IX_VettingDecisions_DecisionType");

                    b.HasIndex("IsFinalDecision")
                        .HasDatabaseName("IX_VettingDecisions_IsFinalDecision")
                        .HasFilter("\"IsFinalDecision\" = true");

                    b.HasIndex("ReviewerId")
                        .HasDatabaseName("IX_VettingDecisions_ReviewerId");

                    b.HasIndex("ApplicationId", "CreatedAt")
                        .HasDatabaseName("IX_VettingDecisions_ApplicationId_CreatedAt");

                    b.ToTable("VettingDecisions", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingDecisionAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("DecisionId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewDecision")
                        .HasColumnType("text");

                    b.Property<string>("PreviousDecision")
                        .HasColumnType("text");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_VettingDecisionAuditLog_ActionType");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingDecisionAuditLog_ApplicationId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_VettingDecisionAuditLog_UserId")
                        .HasFilter("\"UserId\" IS NOT NULL");

                    b.HasIndex("DecisionId", "CreatedAt")
                        .HasDatabaseName("IX_VettingDecisionAuditLog_DecisionId_CreatedAt");

                    b.ToTable("VettingDecisionAuditLog", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNoteAttachment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.Property<string>("FileHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<long>("FileSizeBytes")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsConfidential")
                        .HasColumnType("boolean");

                    b.Property<string>("MimeType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("NoteId")
                        .HasColumnType("uuid");

                    b.Property<string>("StoragePath")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("FileHash")
                        .HasDatabaseName("IX_VettingNoteAttachments_FileHash");

                    b.HasIndex("IsConfidential")
                        .HasDatabaseName("IX_VettingNoteAttachments_IsConfidential");

                    b.HasIndex("NoteId")
                        .HasDatabaseName("IX_VettingNoteAttachments_NoteId");

                    b.HasIndex("NoteId", "FileName")
                        .HasDatabaseName("IX_VettingNoteAttachments_NoteId_FileName");

                    b.ToTable("VettingNoteAttachments", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MessageId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime?>("NextRetryAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("NotificationType")
                        .HasColumnType("integer");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("TemplateData")
                        .HasColumnType("jsonb");

                    b.Property<string>("TemplateName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingNotifications_ApplicationId");

                    b.HasIndex("NotificationType")
                        .HasDatabaseName("IX_VettingNotifications_NotificationType");

                    b.HasIndex("TemplateData")
                        .HasDatabaseName("IX_VettingNotifications_TemplateData");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("TemplateData"), "gin");

                    b.HasIndex("CreatedAt", "RetryCount")
                        .HasDatabaseName("IX_VettingNotifications_Failed_RetryCount")
                        .HasFilter("\"Status\" = 4 AND \"RetryCount\" < 5");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_VettingNotifications_Status_CreatedAt");

                    b.HasIndex("Status", "NextRetryAt", "CreatedAt")
                        .HasDatabaseName("IX_VettingNotifications_DeliveryQueue")
                        .HasFilter("\"Status\" IN (1, 4)");

                    b.ToTable("VettingNotifications", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReference", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ContactedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EncryptedEmail")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedRelationship")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("FinalReminderSentAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("FirstReminderSentAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("FormExpiresAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("ManualContactAttemptAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ManualContactNotes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<int>("ReferenceOrder")
                        .HasColumnType("integer");

                    b.Property<bool>("RequiresManualContact")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("RespondedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ResponseToken")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("SecondReminderSentAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingReferences_ApplicationId");

                    b.HasIndex("ResponseToken")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingReferences_ResponseToken");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VettingReferences_Status");

                    b.HasIndex("ApplicationId", "ReferenceOrder")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingReferences_ApplicationId_ReferenceOrder");

                    b.HasIndex("Status", "ContactedAt", "FormExpiresAt")
                        .HasDatabaseName("IX_VettingReferences_StatusProcessing")
                        .HasFilter("\"Status\" IN (1, 2, 3)");

                    b.ToTable("VettingReferences", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReferenceAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DeliveryStatus")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("EmailMessageId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_VettingReferenceAuditLog_ActionType");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingReferenceAuditLog_ApplicationId");

                    b.HasIndex("EmailMessageId")
                        .HasDatabaseName("IX_VettingReferenceAuditLog_EmailMessageId")
                        .HasFilter("\"EmailMessageId\" IS NOT NULL");

                    b.HasIndex("ReferenceId", "CreatedAt")
                        .HasDatabaseName("IX_VettingReferenceAuditLog_ReferenceId_CreatedAt");

                    b.ToTable("VettingReferenceAuditLog", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReferenceResponse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EncryptedAdditionalComments")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedCommunityReadiness")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedExperienceAssessment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedRelationshipDuration")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedSafetyConcerns")
                        .HasColumnType("text");

                    b.Property<bool>("IsCompleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Recommendation")
                        .HasColumnType("integer");

                    b.Property<Guid>("ReferenceId")
                        .HasColumnType("uuid");

                    b.Property<string>("ResponseIpAddress")
                        .IsRequired()
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("ResponseUserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("IsCompleted")
                        .HasDatabaseName("IX_VettingReferenceResponses_IsCompleted");

                    b.HasIndex("Recommendation")
                        .HasDatabaseName("IX_VettingReferenceResponses_Recommendation");

                    b.HasIndex("ReferenceId")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingReferenceResponses_ReferenceId");

                    b.ToTable("VettingReferenceResponses", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("ApprovalRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<decimal>("AverageReviewTimeHours")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("CurrentWorkload")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastActivityAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("MaxWorkload")
                        .HasColumnType("integer");

                    b.Property<string>("SpecializationsJson")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("[]");

                    b.Property<string>("TimeZone")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasDefaultValue("UTC");

                    b.Property<int>("TotalReviewsCompleted")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UnavailableUntil")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WorkingHoursJson")
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_VettingReviewers_IsActive");

                    b.HasIndex("SpecializationsJson")
                        .HasDatabaseName("IX_VettingReviewers_Specializations");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("SpecializationsJson"), "gin");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingReviewers_UserId");

                    b.HasIndex("IsActive", "IsAvailable", "CurrentWorkload", "MaxWorkload")
                        .HasDatabaseName("IX_VettingReviewers_Workload")
                        .HasFilter("\"IsActive\" = true");

                    b.ToTable("VettingReviewers", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerificationTokenCreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EncryptedLegalName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVetted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("LockedOutUntil")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PronouncedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pronouns")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("IsVetted")
                        .HasDatabaseName("IX_Users_IsVetted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("SceneName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_SceneName");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PricingTiers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Events", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SessionCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Sessions_EventId");

                    b.HasIndex("EventId", "SessionCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Sessions_EventId_SessionCode");

                    b.ToTable("Sessions", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IX_TicketPurchases_PaymentStatus");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_TicketPurchases_TicketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TicketPurchases_UserId");

                    b.ToTable("TicketPurchases", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Available")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRsvpMode")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_TicketTypes_EventId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_TicketTypes_SessionId");

                    b.ToTable("TicketTypes", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.VolunteerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("RequiresExperience")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("SlotsFilled")
                        .HasColumnType("integer");

                    b.Property<int>("SlotsNeeded")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_VolunteerPositions_EventId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_VolunteerPositions_SessionId");

                    b.ToTable("VolunteerPositions", "public");
                });

            modelBuilder.Entity("EventOrganizers", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckIn", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", "EventAttendee")
                        .WithMany("CheckIns")
                        .HasForeignKey("EventAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "StaffMember")
                        .WithMany()
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("EventAttendee");

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckInAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", "EventAttendee")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EventAttendeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("EventAttendee");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.OfflineSyncQueue", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "RefundedByUser")
                        .WithMany()
                        .HasForeignKey("RefundedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefundedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "Payment")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentFailure", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "Payment")
                        .WithMany("Failures")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentMethod", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentRefund", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "OriginalPayment")
                        .WithMany("Refunds")
                        .HasForeignKey("OriginalPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalPayment");

                    b.Navigation("ProcessedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", "Incident")
                        .WithMany("AuditLogs")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentNotification", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", "Incident")
                        .WithMany("Notifications")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Reporter");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "Applicant")
                        .WithMany()
                        .HasForeignKey("ApplicantId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", "AssignedReviewer")
                        .WithMany("AssignedApplications")
                        .HasForeignKey("AssignedReviewerId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Applicant");

                    b.Navigation("AssignedReviewer");

                    b.Navigation("CreatedByUser");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationNote", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("Notes")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", "Reviewer")
                        .WithMany("Notes")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingDecision", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("Decisions")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", "Reviewer")
                        .WithMany("Decisions")
                        .HasForeignKey("ReviewerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Reviewer");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingDecisionAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingDecision", "Decision")
                        .WithMany("AuditLogs")
                        .HasForeignKey("DecisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Decision");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNoteAttachment", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationNote", "Note")
                        .WithMany("Attachments")
                        .HasForeignKey("NoteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Note");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNotification", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("Notifications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReference", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("References")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReferenceAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingReference", "Reference")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReferenceResponse", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingReference", "Reference")
                        .WithOne("Response")
                        .HasForeignKey("WitchCityRope.Api.Features.Vetting.Entities.VettingReferenceResponse", "ReferenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Reference");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketPurchase", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.TicketType", "TicketType")
                        .WithMany("Purchases")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Session", "Session")
                        .WithMany("TicketTypes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.VolunteerPosition", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CheckIns");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Failures");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Decisions");

                    b.Navigation("Notes");

                    b.Navigation("Notifications");

                    b.Navigation("References");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplicationNote", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingDecision", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReference", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Response");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingReviewer", b =>
                {
                    b.Navigation("AssignedApplications");

                    b.Navigation("Decisions");

                    b.Navigation("Notes");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Event", b =>
                {
                    b.Navigation("Sessions");

                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
