// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WitchCityRope.Api.Data;

#nullable disable

namespace WitchCityRope.Api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20251017212204_CreateCmsSchemaAndTables")]
    partial class CreateCmsSchemaAndTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("EventOrganizers", b =>
                {
                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("EventId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("EventOrganizers", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "public");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CheckInTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventAttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsManualEntry")
                        .HasColumnType("boolean");

                    b.Property<string>("ManualEntryData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<bool>("OverrideCapacity")
                        .HasColumnType("boolean");

                    b.Property<Guid>("StaffMemberId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CheckInTime")
                        .HasDatabaseName("IX_CheckIns_CheckInTime");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EventAttendeeId")
                        .IsUnique()
                        .HasDatabaseName("UQ_CheckIns_EventAttendee");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_CheckIns_EventId");

                    b.HasIndex("IsManualEntry")
                        .HasDatabaseName("IX_CheckIns_ManualEntry")
                        .HasFilter("\"IsManualEntry\" = true");

                    b.HasIndex("ManualEntryData")
                        .HasDatabaseName("IX_CheckIns_ManualEntryData")
                        .HasFilter("\"ManualEntryData\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ManualEntryData"), "gin");

                    b.HasIndex("OverrideCapacity")
                        .HasDatabaseName("IX_CheckIns_CapacityOverride")
                        .HasFilter("\"OverrideCapacity\" = true");

                    b.HasIndex("StaffMemberId")
                        .HasDatabaseName("IX_CheckIns_StaffMemberId");

                    b.HasIndex("EventId", "CheckInTime")
                        .HasDatabaseName("IX_CheckIns_Event_Time");

                    b.ToTable("CheckIns", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_CheckIns_ManualEntryData", "(\"IsManualEntry\" = true AND \"ManualEntryData\" IS NOT NULL) OR (\"IsManualEntry\" = false AND \"ManualEntryData\" IS NULL)");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckInAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("EventAttendeeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_CheckInAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_CreatedAt");

                    b.HasIndex("EventAttendeeId")
                        .HasDatabaseName("IX_CheckInAuditLog_EventAttendeeId");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_CheckInAuditLog_EventId");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_CheckInAuditLog_NewValues")
                        .HasFilter("\"NewValues\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_CheckInAuditLog_OldValues")
                        .HasFilter("\"OldValues\" IS NOT NULL");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("CreatedBy", "CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_User_Time");

                    b.HasIndex("EventId", "CreatedAt")
                        .HasDatabaseName("IX_CheckInAuditLog_Event_Time");

                    b.ToTable("CheckInAuditLog", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_CheckInAuditLog_ActionType", "\"ActionType\" IN ('check-in', 'manual-entry', 'capacity-override', 'status-change', 'data-update')");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AccessibilityNeeds")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("DietaryRestrictions")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("HasCompletedWaiver")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsFirstTime")
                        .HasColumnType("boolean");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("RegistrationStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TicketNumber")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int?>("WaitlistPosition")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_EventAttendees_EventId");

                    b.HasIndex("HasCompletedWaiver")
                        .HasDatabaseName("IX_EventAttendees_Waiver")
                        .HasFilter("\"HasCompletedWaiver\" = false");

                    b.HasIndex("IsFirstTime")
                        .HasDatabaseName("IX_EventAttendees_FirstTime")
                        .HasFilter("\"IsFirstTime\" = true");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_EventAttendees_Metadata");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("RegistrationStatus")
                        .HasDatabaseName("IX_EventAttendees_RegistrationStatus");

                    b.HasIndex("TicketNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_EventAttendees_TicketNumber_Unique")
                        .HasFilter("\"TicketNumber\" IS NOT NULL");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_EventAttendees_UserId");

                    b.HasIndex("EventId", "RegistrationStatus")
                        .HasDatabaseName("IX_EventAttendees_Event_Status");

                    b.HasIndex("EventId", "UserId")
                        .IsUnique()
                        .HasDatabaseName("UQ_EventAttendees_EventUser");

                    b.HasIndex("EventId", "WaitlistPosition")
                        .HasDatabaseName("IX_EventAttendees_Event_Waitlist")
                        .HasFilter("\"RegistrationStatus\" = 'waitlist'");

                    b.ToTable("EventAttendees", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_EventAttendees_RegistrationStatus", "\"RegistrationStatus\" IN ('confirmed', 'waitlist', 'checked-in', 'no-show', 'cancelled')");

                            t.HasCheckConstraint("CHK_EventAttendees_WaitlistPosition", "\"WaitlistPosition\" > 0 OR \"WaitlistPosition\" IS NULL");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.OfflineSyncQueue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionData")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("LocalTimestamp")
                        .HasColumnType("timestamptz");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<string>("SyncStatus")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("pending");

                    b.Property<DateTime?>("SyncedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionData")
                        .HasDatabaseName("IX_OfflineSyncQueue_ActionData");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("ActionData"), "gin");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_OfflineSyncQueue_Pending")
                        .HasFilter("\"SyncStatus\" = 'pending'");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_OfflineSyncQueue_EventId");

                    b.HasIndex("LocalTimestamp")
                        .HasDatabaseName("IX_OfflineSyncQueue_LocalTimestamp");

                    b.HasIndex("SyncStatus")
                        .HasDatabaseName("IX_OfflineSyncQueue_SyncStatus");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_OfflineSyncQueue_UserId");

                    b.HasIndex("RetryCount", "CreatedAt")
                        .HasDatabaseName("IX_OfflineSyncQueue_Failed")
                        .HasFilter("\"SyncStatus\" = 'failed' AND \"RetryCount\" < 5");

                    b.ToTable("OfflineSyncQueue", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_OfflineSyncQueue_ActionType", "\"ActionType\" IN ('check-in', 'manual-entry', 'status-update', 'capacity-override')");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_RetryCount", "\"RetryCount\" >= 0 AND \"RetryCount\" <= 10");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_SyncStatus", "\"SyncStatus\" IN ('pending', 'syncing', 'completed', 'failed', 'conflict')");

                            t.HasCheckConstraint("CHK_OfflineSyncQueue_SyncedAt", "(\"SyncStatus\" = 'completed' AND \"SyncedAt\" IS NOT NULL) OR (\"SyncStatus\" != 'completed' AND \"SyncedAt\" IS NULL)");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Cms.Entities.ContentPage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Content");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<bool>("IsPublished")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true)
                        .HasColumnName("IsPublished");

                    b.Property<Guid>("LastModifiedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("LastModifiedBy");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("Slug");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("UpdatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ContentPages_CreatedBy");

                    b.HasIndex("IsPublished")
                        .HasDatabaseName("IX_ContentPages_IsPublished")
                        .HasFilter("\"IsPublished\" = true");

                    b.HasIndex("LastModifiedBy")
                        .HasDatabaseName("IX_ContentPages_LastModifiedBy");

                    b.HasIndex("Slug")
                        .IsUnique()
                        .HasDatabaseName("UX_ContentPages_Slug");

                    b.HasIndex("UpdatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_ContentPages_UpdatedAt");

                    b.ToTable("ContentPages", "cms", t =>
                        {
                            t.HasCheckConstraint("CHK_ContentPages_Content_NotEmpty", "LENGTH(TRIM(\"Content\")) > 0");

                            t.HasCheckConstraint("CHK_ContentPages_Slug_Format", "\"Slug\" ~ '^[a-z0-9]+(-[a-z0-9]+)*$'");

                            t.HasCheckConstraint("CHK_ContentPages_Title_Length", "LENGTH(TRIM(\"Title\")) >= 3");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Cms.Entities.ContentRevision", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChangeDescription")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)")
                        .HasColumnName("ChangeDescription");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasColumnName("Content");

                    b.Property<int>("ContentPageId")
                        .HasColumnType("integer")
                        .HasColumnName("ContentPageId");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("CreatedAt")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid")
                        .HasColumnName("CreatedBy");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("Title");

                    b.HasKey("Id");

                    b.HasIndex("ContentPageId")
                        .HasDatabaseName("IX_ContentRevisions_ContentPageId");

                    b.HasIndex("CreatedAt")
                        .IsDescending()
                        .HasDatabaseName("IX_ContentRevisions_CreatedAt");

                    b.HasIndex("CreatedBy")
                        .HasDatabaseName("IX_ContentRevisions_CreatedBy");

                    b.HasIndex("ContentPageId", "CreatedAt")
                        .IsDescending(false, true)
                        .HasDatabaseName("IX_ContentRevisions_ContentPageId_CreatedAt");

                    b.ToTable("ContentRevisions", "cms", t =>
                        {
                            t.HasCheckConstraint("CHK_ContentRevisions_Content_NotEmpty", "LENGTH(TRIM(\"Content\")) > 0");

                            t.HasCheckConstraint("CHK_ContentRevisions_Title_Length", "LENGTH(TRIM(\"Title\")) >= 3");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Participation.Entities.EventParticipation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CancellationReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<DateTime?>("CancelledAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("ParticipationType")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_EventParticipations_CreatedAt");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_EventParticipations_Metadata_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("EventId", "Status")
                        .HasDatabaseName("IX_EventParticipations_EventId_Status");

                    b.HasIndex("UserId", "EventId")
                        .IsUnique()
                        .HasDatabaseName("UQ_EventParticipations_User_Event_Active")
                        .HasFilter("\"Status\" = 1");

                    b.HasIndex("UserId", "Status")
                        .HasDatabaseName("IX_EventParticipations_UserId_Status");

                    b.ToTable("EventParticipations", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_EventParticipations_CancelledAt_Logic", "(\"Status\" IN (2, 3) AND \"CancelledAt\" IS NOT NULL) OR (\"Status\" NOT IN (2, 3) AND \"CancelledAt\" IS NULL)");

                            t.HasCheckConstraint("CHK_EventParticipations_ParticipationType", "\"ParticipationType\" IN (1, 2)");

                            t.HasCheckConstraint("CHK_EventParticipations_Status", "\"Status\" IN (1, 2, 3, 4)");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Participation.Entities.ParticipationHistory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("ChangeReason")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("ChangedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("ParticipationId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_ParticipationHistory_ActionType");

                    b.HasIndex("ChangedBy");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_ParticipationHistory_NewValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_ParticipationHistory_OldValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("ParticipationId", "CreatedAt")
                        .HasDatabaseName("IX_ParticipationHistory_ParticipationId_CreatedAt");

                    b.ToTable("ParticipationHistory", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_ParticipationHistory_ActionType", "\"ActionType\" IN ('Created', 'Updated', 'Cancelled', 'Refunded', 'StatusChanged', 'PaymentUpdated')");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AmountValue")
                        .HasColumnType("decimal(10,2)")
                        .HasColumnName("AmountValue");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Currency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD")
                        .HasColumnName("Currency");

                    b.Property<string>("EncryptedPayPalOrderId")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedPayPalPayerId")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedPayPalRefundId")
                        .HasColumnType("text");

                    b.Property<Guid>("EventRegistrationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'");

                    b.Property<int>("PaymentMethodType")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamptz");

                    b.Property<decimal?>("RefundAmountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RefundCurrency")
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)");

                    b.Property<string>("RefundReason")
                        .HasColumnType("text");

                    b.Property<DateTime?>("RefundedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("RefundedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("SlidingScalePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(5,2)")
                        .HasDefaultValue(0.00m);

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("VenmoUsername")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Payments_PendingStatus")
                        .HasFilter("\"Status\" = 0");

                    b.HasIndex("EventRegistrationId")
                        .IsUnique()
                        .HasDatabaseName("UX_Payments_EventRegistration_Completed")
                        .HasFilter("\"Status\" = 1");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_Payments_Metadata_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_Payments_FailedStatus")
                        .HasFilter("\"Status\" = 2");

                    b.HasIndex("RefundedAt")
                        .HasDatabaseName("IX_Payments_RefundedStatus")
                        .HasFilter("\"RefundedAt\" IS NOT NULL");

                    b.HasIndex("RefundedByUserId");

                    b.HasIndex("SlidingScalePercentage")
                        .HasDatabaseName("IX_Payments_SlidingScalePercentage");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_Payments_Status");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_Payments_UserId");

                    b.ToTable("Payments", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_Payments_AmountValue_NonNegative", "\"AmountValue\" >= 0");

                            t.HasCheckConstraint("CHK_Payments_CurrencyConsistency", "(\"RefundCurrency\" IS NULL) OR (\"RefundCurrency\" = \"Currency\")");

                            t.HasCheckConstraint("CHK_Payments_Currency_Valid", "\"Currency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_Payments_RefundAmount_NotExceedOriginal", "\"RefundAmountValue\" IS NULL OR \"RefundAmountValue\" <= \"AmountValue\"");

                            t.HasCheckConstraint("CHK_Payments_RefundCurrency_Valid", "\"RefundCurrency\" IS NULL OR \"RefundCurrency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_Payments_RefundRequiresOriginalPayment", "(\"RefundAmountValue\" IS NULL AND \"RefundedAt\" IS NULL) OR (\"RefundAmountValue\" IS NOT NULL AND \"RefundedAt\" IS NOT NULL)");

                            t.HasCheckConstraint("CHK_Payments_SlidingScalePercentage_Range", "\"SlidingScalePercentage\" >= 0 AND \"SlidingScalePercentage\" <= 75.00");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_PaymentAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_FailedActions")
                        .HasFilter("\"ActionType\" IN ('PaymentFailed', 'RefundFailed')");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_PaymentAuditLog_NewValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_PaymentAuditLog_OldValues_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("PaymentId", "CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_PaymentId_CreatedAt");

                    b.HasIndex("UserId", "CreatedAt")
                        .HasDatabaseName("IX_PaymentAuditLog_UserId_CreatedAt");

                    b.ToTable("PaymentAuditLog", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentAuditLog_ActionType", "\"ActionType\" IN ('PaymentInitiated', 'PaymentProcessed', 'PaymentCompleted', 'PaymentFailed', 'PaymentRetried', 'RefundInitiated', 'RefundCompleted', 'RefundFailed', 'StatusChanged', 'MetadataUpdated', 'SystemAction')");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentFailure", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedStripeErrorDetails")
                        .HasColumnType("text");

                    b.Property<DateTime>("FailedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("FailureCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("FailureMessage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PaymentId")
                        .HasColumnType("uuid");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.HasKey("Id");

                    b.HasIndex("FailedAt")
                        .HasDatabaseName("IX_PaymentFailures_FailedAt");

                    b.HasIndex("FailureCode")
                        .HasDatabaseName("IX_PaymentFailures_FailureCode");

                    b.HasIndex("PaymentId")
                        .HasDatabaseName("IX_PaymentFailures_PaymentId");

                    b.HasIndex("RetryCount")
                        .HasDatabaseName("IX_PaymentFailures_RetryCount")
                        .HasFilter("\"RetryCount\" > 0");

                    b.ToTable("PaymentFailures", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentFailures_RetryCount_NonNegative", "\"RetryCount\" >= 0");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentMethod", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CardBrand")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedStripePaymentMethodId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ExpiryMonth")
                        .HasColumnType("integer");

                    b.Property<int>("ExpiryYear")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<bool>("IsDefault")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.Property<string>("LastFourDigits")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("character varying(4)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("UX_PaymentMethods_UserDefault")
                        .HasFilter("\"IsDefault\" = true AND \"IsActive\" = true");

                    b.HasIndex("UserId", "IsActive")
                        .HasDatabaseName("IX_PaymentMethods_IsActive")
                        .HasFilter("\"IsActive\" = true");

                    b.HasIndex("UserId", "IsDefault")
                        .HasDatabaseName("IX_PaymentMethods_IsDefault")
                        .HasFilter("\"IsDefault\" = true");

                    b.ToTable("PaymentMethods", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentMethods_CardBrand", "\"CardBrand\" IN ('Visa', 'MasterCard', 'American Express', 'Discover', 'JCB', 'Diners Club')");

                            t.HasCheckConstraint("CHK_PaymentMethods_ExpiryMonth_Range", "\"ExpiryMonth\" >= 1 AND \"ExpiryMonth\" <= 12");

                            t.HasCheckConstraint("CHK_PaymentMethods_ExpiryYear_Future", "\"ExpiryYear\" >= EXTRACT(YEAR FROM NOW())");

                            t.HasCheckConstraint("CHK_PaymentMethods_LastFourDigits", "\"LastFourDigits\" ~ '^\\d{4}$'");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentRefund", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("EncryptedPayPalRefundId")
                        .HasColumnType("text");

                    b.Property<string>("Metadata")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValueSql("'{}'");

                    b.Property<Guid>("OriginalPaymentId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamptz")
                        .HasDefaultValueSql("NOW()");

                    b.Property<Guid>("ProcessedByUserId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("RefundAmountValue")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("RefundCurrency")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(3)
                        .HasColumnType("character varying(3)")
                        .HasDefaultValue("USD");

                    b.Property<string>("RefundReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("RefundStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Metadata")
                        .HasDatabaseName("IX_PaymentRefunds_Metadata_Gin");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Metadata"), "gin");

                    b.HasIndex("OriginalPaymentId")
                        .HasDatabaseName("IX_PaymentRefunds_OriginalPaymentId");

                    b.HasIndex("ProcessedAt")
                        .HasDatabaseName("IX_PaymentRefunds_ProcessedAt");

                    b.HasIndex("ProcessedByUserId")
                        .HasDatabaseName("IX_PaymentRefunds_ProcessedByUserId");

                    b.HasIndex("RefundStatus")
                        .HasDatabaseName("IX_PaymentRefunds_RefundStatus");

                    b.ToTable("PaymentRefunds", "public", t =>
                        {
                            t.HasCheckConstraint("CHK_PaymentRefunds_Currency", "\"RefundCurrency\" IN ('USD', 'EUR', 'GBP', 'CAD')");

                            t.HasCheckConstraint("CHK_PaymentRefunds_ReasonRequired", "LENGTH(TRIM(\"RefundReason\")) >= 10");

                            t.HasCheckConstraint("CHK_PaymentRefunds_RefundAmountValue_Positive", "\"RefundAmountValue\" > 0");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ActionType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uuid");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<string>("NewValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("OldValues")
                        .HasColumnType("jsonb");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ActionType")
                        .HasDatabaseName("IX_IncidentAuditLog_ActionType");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_IncidentAuditLog_CreatedAt");

                    b.HasIndex("NewValues")
                        .HasDatabaseName("IX_IncidentAuditLog_NewValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("NewValues"), "gin");

                    b.HasIndex("OldValues")
                        .HasDatabaseName("IX_IncidentAuditLog_OldValues");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("OldValues"), "gin");

                    b.HasIndex("UserId");

                    b.HasIndex("IncidentId", "CreatedAt")
                        .HasDatabaseName("IX_IncidentAuditLog_IncidentId_CreatedAt");

                    b.ToTable("IncidentAuditLog", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<Guid>("IncidentId")
                        .HasColumnType("uuid");

                    b.Property<string>("MessageBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NotificationType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("RecipientType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("IncidentId")
                        .HasDatabaseName("IX_IncidentNotifications_IncidentId");

                    b.HasIndex("RecipientType")
                        .HasDatabaseName("IX_IncidentNotifications_RecipientType");

                    b.HasIndex("CreatedAt", "RetryCount")
                        .HasDatabaseName("IX_IncidentNotifications_Failed_RetryCount")
                        .HasFilter("\"Status\" = 'Failed' AND \"RetryCount\" < 5");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_IncidentNotifications_Status_CreatedAt");

                    b.ToTable("IncidentNotifications", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("AssignedTo")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("EncryptedContactEmail")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("EncryptedContactPhone")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("EncryptedDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("EncryptedInvolvedParties")
                        .HasColumnType("text");

                    b.Property<string>("EncryptedWitnesses")
                        .HasColumnType("text");

                    b.Property<DateTime>("IncidentDate")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ReferenceNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<DateTime>("ReportedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("ReporterId")
                        .HasColumnType("uuid");

                    b.Property<bool>("RequestFollowUp")
                        .HasColumnType("boolean");

                    b.Property<int>("Severity")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid?>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AssignedTo");

                    b.HasIndex("CreatedBy");

                    b.HasIndex("ReferenceNumber")
                        .IsUnique()
                        .HasDatabaseName("IX_SafetyIncidents_ReferenceNumber");

                    b.HasIndex("ReportedAt")
                        .HasDatabaseName("IX_SafetyIncidents_ReportedAt");

                    b.HasIndex("ReporterId")
                        .HasDatabaseName("IX_SafetyIncidents_ReporterId")
                        .HasFilter("\"ReporterId\" IS NOT NULL");

                    b.HasIndex("Severity")
                        .HasDatabaseName("IX_SafetyIncidents_Severity");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_SafetyIncidents_Status");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Status", "Severity", "ReportedAt")
                        .HasDatabaseName("IX_SafetyIncidents_Status_Severity_ReportedAt");

                    b.ToTable("SafetyIncidents", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AboutYourself")
                        .IsRequired()
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("AdminNotes")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<bool>("AgreesToGuidelines")
                        .HasColumnType("boolean");

                    b.Property<bool>("AgreesToTerms")
                        .HasColumnType("boolean");

                    b.Property<string>("ApplicationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("ConsentToContact")
                        .HasColumnType("boolean");

                    b.Property<string>("ConsentUnderstanding")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DecisionMadeAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ExpectationsGoals")
                        .HasColumnType("text");

                    b.Property<string>("ExperienceDescription")
                        .HasColumnType("text");

                    b.Property<int>("ExperienceLevel")
                        .HasColumnType("integer");

                    b.Property<string>("FetLifeHandle")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FullName")
                        .HasColumnType("text");

                    b.Property<DateTime?>("InterviewScheduledFor")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsAnonymous")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OtherNames")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<string>("Pronouns")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("RealName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("References")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewStartedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SafetyKnowledge")
                        .HasColumnType("text");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SkillsInterests")
                        .HasColumnType("text");

                    b.Property<string>("StatusToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("SubmittedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("WhyJoinCommunity")
                        .HasColumnType("text");

                    b.Property<int>("WorkflowStatus")
                        .HasColumnType("integer");

                    b.Property<int>("YearsExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .HasDatabaseName("IX_VettingApplications_Email");

                    b.HasIndex("SubmittedAt")
                        .HasDatabaseName("IX_VettingApplications_SubmittedAt");

                    b.HasIndex("UserId")
                        .IsUnique()
                        .HasDatabaseName("IX_VettingApplications_UserId");

                    b.HasIndex("WorkflowStatus")
                        .HasDatabaseName("IX_VettingApplications_WorkflowStatus");

                    b.ToTable("VettingApplications", (string)null);
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingAuditLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("NewValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<string>("Notes")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<string>("OldValue")
                        .HasMaxLength(4000)
                        .HasColumnType("character varying(4000)");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("PerformedBy")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("Action");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("PerformedAt");

                    b.HasIndex("PerformedBy");

                    b.ToTable("VettingAuditLogs", (string)null);
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorSummary")
                        .HasColumnType("text");

                    b.Property<int>("FailureCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("OperationType")
                        .HasColumnType("integer");

                    b.Property<string>("Parameters")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<DateTime>("PerformedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("PerformedBy")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Status")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<int>("SuccessCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<int>("TotalItems")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Parameters")
                        .HasDatabaseName("IX_VettingBulkOperations_Parameters");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Parameters"), "gin");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VettingBulkOperations_Status")
                        .HasFilter("\"Status\" = 1");

                    b.HasIndex("OperationType", "PerformedAt")
                        .HasDatabaseName("IX_VettingBulkOperations_OperationType_PerformedAt");

                    b.HasIndex("PerformedBy", "PerformedAt")
                        .HasDatabaseName("IX_VettingBulkOperations_PerformedBy_PerformedAt");

                    b.ToTable("VettingBulkOperations", null, t =>
                        {
                            t.HasCheckConstraint("CHK_VettingBulkOperations_Counts", "\"SuccessCount\" + \"FailureCount\" <= \"TotalItems\"");

                            t.HasCheckConstraint("CHK_VettingBulkOperations_TotalItems", "\"TotalItems\" > 0");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperationItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("AttemptCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.Property<Guid>("BulkOperationId")
                        .HasColumnType("uuid");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("ProcessedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("RetryAt")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("Success")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(false);

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingBulkOperationItems_ApplicationId");

                    b.HasIndex("BulkOperationId")
                        .HasDatabaseName("IX_VettingBulkOperationItems_BulkOperationId");

                    b.HasIndex("RetryAt")
                        .HasDatabaseName("IX_VettingBulkOperationItems_RetryAt")
                        .HasFilter("\"RetryAt\" IS NOT NULL");

                    b.HasIndex("BulkOperationId", "ApplicationId")
                        .IsUnique()
                        .HasDatabaseName("UQ_VettingBulkOperationItems_Operation_Application");

                    b.HasIndex("Success", "ProcessedAt")
                        .HasDatabaseName("IX_VettingBulkOperationItems_Success_ProcessedAt");

                    b.ToTable("VettingBulkOperationItems", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperationLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("BulkOperationId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Details")
                        .HasColumnType("text");

                    b.Property<string>("ErrorCode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("LogLevel")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("OperationStep")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("StackTrace")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("BulkOperationId")
                        .HasDatabaseName("IX_VettingBulkOperationLogs_BulkOperationId");

                    b.HasIndex("LogLevel")
                        .HasDatabaseName("IX_VettingBulkOperationLogs_LogLevel");

                    b.HasIndex("BulkOperationId", "CreatedAt")
                        .HasDatabaseName("IX_VettingBulkOperationLogs_BulkOperationId_CreatedAt");

                    b.ToTable("VettingBulkOperationLogs", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailLog", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<int>("DeliveryStatus")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastRetryAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("RetryCount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(0);

                    b.Property<string>("SendGridMessageId")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingEmailLogs_ApplicationId");

                    b.HasIndex("DeliveryStatus")
                        .HasDatabaseName("IX_VettingEmailLogs_DeliveryStatus");

                    b.HasIndex("SendGridMessageId")
                        .HasDatabaseName("IX_VettingEmailLogs_SendGridMessageId")
                        .HasFilter("\"SendGridMessageId\" IS NOT NULL");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_VettingEmailLogs_SentAt");

                    b.HasIndex("DeliveryStatus", "RetryCount", "SentAt")
                        .HasDatabaseName("IX_VettingEmailLogs_DeliveryStatus_RetryCount_SentAt")
                        .HasFilter("\"DeliveryStatus\" IN (3, 4) AND \"RetryCount\" < 5");

                    b.ToTable("VettingEmailLogs", null, t =>
                        {
                            t.HasCheckConstraint("CHK_VettingEmailLogs_RetryCount", "\"RetryCount\" >= 0 AND \"RetryCount\" <= 10");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("HtmlBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasDefaultValue(true);

                    b.Property<DateTime>("LastModified")
                        .HasColumnType("timestamptz");

                    b.Property<string>("PlainTextBody")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TemplateType")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UpdatedBy")
                        .HasColumnType("uuid");

                    b.Property<string>("Variables")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("jsonb")
                        .HasDefaultValue("{}");

                    b.Property<int>("Version")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValue(1);

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_VettingEmailTemplates_IsActive")
                        .HasFilter("\"IsActive\" = TRUE");

                    b.HasIndex("TemplateType")
                        .IsUnique()
                        .HasDatabaseName("UQ_VettingEmailTemplates_TemplateType");

                    b.HasIndex("UpdatedAt")
                        .HasDatabaseName("IX_VettingEmailTemplates_UpdatedAt");

                    b.HasIndex("UpdatedBy");

                    b.HasIndex("Variables")
                        .HasDatabaseName("IX_VettingEmailTemplates_Variables");

                    NpgsqlIndexBuilderExtensions.HasMethod(b.HasIndex("Variables"), "gin");

                    b.ToTable("VettingEmailTemplates", null, t =>
                        {
                            t.HasCheckConstraint("CHK_VettingEmailTemplates_HtmlBody_Length", "LENGTH(\"HtmlBody\") >= 10");

                            t.HasCheckConstraint("CHK_VettingEmailTemplates_PlainTextBody_Length", "LENGTH(\"PlainTextBody\") >= 10");

                            t.HasCheckConstraint("CHK_VettingEmailTemplates_Subject_Length", "LENGTH(\"Subject\") BETWEEN 5 AND 200");
                        });
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNotification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("ErrorMessage")
                        .HasColumnType("text");

                    b.Property<string>("RecipientEmail")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("RetryCount")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<Guid?>("TemplateId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId")
                        .HasDatabaseName("IX_VettingNotifications_ApplicationId");

                    b.HasIndex("RecipientEmail")
                        .HasDatabaseName("IX_VettingNotifications_RecipientEmail");

                    b.HasIndex("Status")
                        .HasDatabaseName("IX_VettingNotifications_Status");

                    b.HasIndex("TemplateId");

                    b.HasIndex("Status", "CreatedAt")
                        .HasDatabaseName("IX_VettingNotifications_Status_CreatedAt");

                    b.ToTable("VettingNotifications", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("Bio")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamptz");

                    b.Property<string>("DiscordName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("EmailVerificationToken")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("EmailVerificationTokenCreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EncryptedLegalName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("FailedLoginAttempts")
                        .HasColumnType("integer");

                    b.Property<string>("FetLifeName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsVetted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LastLoginAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("LastName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime?>("LastPasswordChangeAt")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime?>("LockedOutUntil")
                        .HasColumnType("timestamptz");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("PronouncedName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Pronouns")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SceneName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<int>("VettingStatus")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IsActive")
                        .HasDatabaseName("IX_Users_IsActive");

                    b.HasIndex("IsVetted")
                        .HasDatabaseName("IX_Users_IsVetted");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("Role")
                        .HasDatabaseName("IX_Users_Role");

                    b.HasIndex("SceneName")
                        .IsUnique()
                        .HasDatabaseName("IX_Users_SceneName");

                    b.ToTable("Users", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Event", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsPublished")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Policies")
                        .HasColumnType("text");

                    b.Property<string>("PricingTiers")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.ToTable("Events", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Capacity")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<int>("CurrentAttendees")
                        .HasColumnType("integer");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("SessionCode")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamptz");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_Sessions_EventId");

                    b.HasIndex("EventId", "SessionCode")
                        .IsUnique()
                        .HasDatabaseName("IX_Sessions_EventId_SessionCode");

                    b.ToTable("Sessions", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketPurchase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("PaymentReference")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("timestamptz");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<Guid>("TicketTypeId")
                        .HasColumnType("uuid");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PaymentStatus")
                        .HasDatabaseName("IX_TicketPurchases_PaymentStatus");

                    b.HasIndex("TicketTypeId")
                        .HasDatabaseName("IX_TicketPurchases_TicketTypeId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_TicketPurchases_UserId");

                    b.ToTable("TicketPurchases", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Available")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsRsvpMode")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Sold")
                        .HasColumnType("integer");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_TicketTypes_EventId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_TicketTypes_SessionId");

                    b.ToTable("TicketTypes", "public");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.VolunteerPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("EventId")
                        .HasColumnType("uuid");

                    b.Property<string>("Requirements")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<bool>("RequiresExperience")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<int>("SlotsFilled")
                        .HasColumnType("integer");

                    b.Property<int>("SlotsNeeded")
                        .HasColumnType("integer");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamptz");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .HasDatabaseName("IX_VolunteerPositions_EventId");

                    b.HasIndex("SessionId")
                        .HasDatabaseName("IX_VolunteerPositions_SessionId");

                    b.ToTable("VolunteerPositions", "public");
                });

            modelBuilder.Entity("EventOrganizers", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", null)
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckIn", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", "EventAttendee")
                        .WithMany("CheckIns")
                        .HasForeignKey("EventAttendeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "StaffMember")
                        .WithMany()
                        .HasForeignKey("StaffMemberId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("EventAttendee");

                    b.Navigation("StaffMember");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.CheckInAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", "EventAttendee")
                        .WithMany("AuditLogs")
                        .HasForeignKey("EventAttendeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("EventAttendee");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.OfflineSyncQueue", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Cms.Entities.ContentPage", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContentPages_CreatedBy");

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "LastModifiedByUser")
                        .WithMany()
                        .HasForeignKey("LastModifiedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContentPages_LastModifiedBy");

                    b.Navigation("CreatedByUser");

                    b.Navigation("LastModifiedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Cms.Entities.ContentRevision", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Cms.Entities.ContentPage", "ContentPage")
                        .WithMany("Revisions")
                        .HasForeignKey("ContentPageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ContentRevisions_ContentPage");

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_ContentRevisions_CreatedBy");

                    b.Navigation("ContentPage");

                    b.Navigation("CreatedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Participation.Entities.EventParticipation", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("EventParticipations")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CreatedByUser");

                    b.Navigation("Event");

                    b.Navigation("UpdatedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Participation.Entities.ParticipationHistory", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "ChangedByUser")
                        .WithMany()
                        .HasForeignKey("ChangedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Features.Participation.Entities.EventParticipation", "Participation")
                        .WithMany("History")
                        .HasForeignKey("ParticipationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedByUser");

                    b.Navigation("Participation");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "RefundedByUser")
                        .WithMany()
                        .HasForeignKey("RefundedByUserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("RefundedByUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "Payment")
                        .WithMany("AuditLogs")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Payment");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentFailure", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "Payment")
                        .WithMany("Failures")
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentMethod", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.PaymentRefund", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Payments.Entities.Payment", "OriginalPayment")
                        .WithMany("Refunds")
                        .HasForeignKey("OriginalPaymentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "ProcessedByUser")
                        .WithMany()
                        .HasForeignKey("ProcessedByUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OriginalPayment");

                    b.Navigation("ProcessedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", "Incident")
                        .WithMany("AuditLogs")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Incident");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.IncidentNotification", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", "Incident")
                        .WithMany("Notifications")
                        .HasForeignKey("IncidentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Incident");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedTo")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "CreatedByUser")
                        .WithMany()
                        .HasForeignKey("CreatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "Reporter")
                        .WithMany()
                        .HasForeignKey("ReporterId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("AssignedUser");

                    b.Navigation("CreatedByUser");

                    b.Navigation("Reporter");

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingAuditLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany("AuditLogs")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperation", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "PerformedByUser")
                        .WithMany()
                        .HasForeignKey("PerformedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PerformedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperationItem", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperation", "BulkOperation")
                        .WithMany("Items")
                        .HasForeignKey("BulkOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("BulkOperation");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperationLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperation", "BulkOperation")
                        .WithMany("Logs")
                        .HasForeignKey("BulkOperationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("BulkOperation");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailLog", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailTemplate", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "UpdatedByUser")
                        .WithMany()
                        .HasForeignKey("UpdatedBy")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("UpdatedByUser");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingNotification", b =>
                {
                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", "Application")
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailTemplate", "Template")
                        .WithMany("Notifications")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Application");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("Sessions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketPurchase", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.TicketType", "TicketType")
                        .WithMany("Purchases")
                        .HasForeignKey("TicketTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TicketType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("TicketTypes")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Session", "Session")
                        .WithMany("TicketTypes")
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.VolunteerPosition", b =>
                {
                    b.HasOne("WitchCityRope.Api.Models.Event", "Event")
                        .WithMany("VolunteerPositions")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WitchCityRope.Api.Models.Session", "Session")
                        .WithMany()
                        .HasForeignKey("SessionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Event");

                    b.Navigation("Session");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.CheckIn.Entities.EventAttendee", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("CheckIns");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Cms.Entities.ContentPage", b =>
                {
                    b.Navigation("Revisions");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Participation.Entities.EventParticipation", b =>
                {
                    b.Navigation("History");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Payments.Entities.Payment", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Failures");

                    b.Navigation("Refunds");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Safety.Entities.SafetyIncident", b =>
                {
                    b.Navigation("AuditLogs");

                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingApplication", b =>
                {
                    b.Navigation("AuditLogs");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingBulkOperation", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("Logs");
                });

            modelBuilder.Entity("WitchCityRope.Api.Features.Vetting.Entities.VettingEmailTemplate", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Event", b =>
                {
                    b.Navigation("EventParticipations");

                    b.Navigation("Sessions");

                    b.Navigation("TicketTypes");

                    b.Navigation("VolunteerPositions");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.Session", b =>
                {
                    b.Navigation("TicketTypes");
                });

            modelBuilder.Entity("WitchCityRope.Api.Models.TicketType", b =>
                {
                    b.Navigation("Purchases");
                });
#pragma warning restore 612, 618
        }
    }
}
