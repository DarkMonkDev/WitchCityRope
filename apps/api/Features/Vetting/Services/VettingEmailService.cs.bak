using Microsoft.EntityFrameworkCore;
using System.Text.Json;
using WitchCityRope.Api.Data;
using WitchCityRope.Api.Features.Shared.Models;
using WitchCityRope.Api.Features.Vetting.Entities;
using WitchCityRope.Api.Features.Vetting.Models;

namespace WitchCityRope.Api.Features.Vetting.Services;

/// <summary>
/// Simplified email service implementation for vetting system
/// Uses email templates and logs emails for development
/// </summary>
public class VettingEmailService : IVettingEmailService
{
    private readonly ApplicationDbContext _context;
    private readonly ILogger<VettingEmailService> _logger;

    public VettingEmailService(
        ApplicationDbContext context,
        ILogger<VettingEmailService> logger)
    {
        _context = context;
        _logger = logger;
    }

    /// <summary>
    /// Send application confirmation email after successful submission
    /// </summary>
    public async Task<Result<bool>> SendApplicationConfirmationAsync(
        VettingApplication application,
        string applicantEmail,
        string applicantName,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogInformation("Sending application confirmation email for application {ApplicationNumber} to {Email}",
                application.ApplicationNumber, applicantEmail);

            // Get email template from database
            var template = await _context.VettingEmailTemplates
                .Where(t => t.TemplateType == EmailTemplateType.ApplicationReceived && t.IsActive)
                .OrderByDescending(t => t.Version)
                .FirstOrDefaultAsync(cancellationToken);

            string subject, body;
            if (template != null)
            {
                // Render template with variables
                subject = RenderTemplate(template.Subject, application, applicantName);
                body = RenderTemplate(template.Body, application, applicantName);
            }
            else
            {
                // Use default template
                subject = "WitchCityRope Vetting Application Received";
                body = $@"
Dear {applicantName},

Thank you for submitting your vetting application to WitchCityRope.

Application Details:
- Application Number: {application.ApplicationNumber}
- Submitted: {application.SubmittedAt:MMMM dd, yyyy}
- Status: {application.Status}

Our vetting team will review your application and contact you within the next few business days.

If you have any questions, please contact us at support@witchcityrope.com.

Best regards,
The WitchCityRope Team
";
            }

            // For development: Log email content instead of sending
            var emailLog = new
            {
                To = applicantEmail,
                Subject = subject,
                Body = body,
                ApplicationId = application.Id,
                ApplicationNumber = application.ApplicationNumber,
                TemplateType = "ApplicationReceived",
                SentAt = DateTime.UtcNow
            };

            _logger.LogInformation("Email Content: {EmailLog}", JsonSerializer.Serialize(emailLog, new JsonSerializerOptions { WriteIndented = true }));

            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to send application confirmation email for application {ApplicationNumber}",
                application.ApplicationNumber);
            return Result<bool>.Failure("Email send failed", "Failed to send confirmation email");
        }
    }

    /// <summary>
    /// Send status update notification email
    /// </summary>
    public async Task<Result<bool>> SendStatusUpdateAsync(
        VettingApplication application,
        string applicantEmail,
        string applicantName,
        VettingStatus newStatus,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogInformation("Sending status update notification for application {ApplicationNumber} to {Email}, new status: {Status}",
                application.ApplicationNumber, applicantEmail, newStatus);

            // Map status to template type
            var templateType = GetTemplateTypeForStatus(newStatus);
            if (templateType == null)
            {
                _logger.LogInformation("No email template needed for status {Status}", newStatus);
                return Result<bool>.Success(true);
            }

            // Get email template from database
            var template = await _context.VettingEmailTemplates
                .Where(t => t.TemplateType == templateType && t.IsActive)
                .OrderByDescending(t => t.Version)
                .FirstOrDefaultAsync(cancellationToken);

            string subject, body;
            if (template != null)
            {
                // Render template with variables
                subject = RenderTemplate(template.Subject, application, applicantName);
                body = RenderTemplate(template.Body, application, applicantName);
            }
            else
            {
                // Use default template
                subject = $"WitchCityRope Application Update - {application.ApplicationNumber}";
                body = $@"
Dear {applicantName},

Your vetting application status has been updated.

Application Details:
- Application Number: {application.ApplicationNumber}
- New Status: {GetStatusDescription(newStatus)}
- Updated: {DateTime.UtcNow:MMMM dd, yyyy}

{GetNextStepsForStatus(newStatus)}

If you have any questions, please contact us at support@witchcityrope.com.

Best regards,
The WitchCityRope Team
";
            }

            // For development: Log email content instead of sending
            var emailLog = new
            {
                To = applicantEmail,
                Subject = subject,
                Body = body,
                ApplicationId = application.Id,
                ApplicationNumber = application.ApplicationNumber,
                TemplateType = templateType.ToString(),
                NewStatus = newStatus.ToString(),
                SentAt = DateTime.UtcNow
            };

            _logger.LogInformation("Email Content: {EmailLog}", JsonSerializer.Serialize(emailLog, new JsonSerializerOptions { WriteIndented = true }));

            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to send status update notification for application {ApplicationNumber}",
                application.ApplicationNumber);
            return Result<bool>.Failure("Email send failed", "Failed to send status update notification");
        }
    }

    /// <summary>
    /// Send reminder email to applicant
    /// </summary>
    public async Task<Result<bool>> SendReminderAsync(
        VettingApplication application,
        string applicantEmail,
        string applicantName,
        string? customMessage,
        CancellationToken cancellationToken = default)
    {
        try
        {
            _logger.LogInformation("Sending reminder email for application {ApplicationNumber} to {Email}",
                application.ApplicationNumber, applicantEmail);

            // Get reminder template from database
            var template = await _context.VettingEmailTemplates
                .Where(t => t.TemplateType == EmailTemplateType.InterviewReminder && t.IsActive)
                .OrderByDescending(t => t.Version)
                .FirstOrDefaultAsync(cancellationToken);

            string subject, body;
            if (template != null)
            {
                // Render template with variables
                subject = RenderTemplate(template.Subject, application, applicantName);
                body = RenderTemplate(template.Body, application, applicantName);

                // Add custom message if provided
                if (!string.IsNullOrEmpty(customMessage))
                {
                    body = body.Replace("{{custom_message}}", customMessage);
                }
            }
            else
            {
                // Use default reminder template
                subject = $"WitchCityRope Application Reminder - {application.ApplicationNumber}";
                body = $@"
Dear {applicantName},

This is a reminder regarding your vetting application with WitchCityRope.

Application Details:
- Application Number: {application.ApplicationNumber}
- Current Status: {application.Status}
- Submitted: {application.SubmittedAt:MMMM dd, yyyy}

{(string.IsNullOrEmpty(customMessage) ? "" : $"Additional Information:\n{customMessage}\n")}

If you have any questions, please contact us at support@witchcityrope.com.

Best regards,
The WitchCityRope Team
";
            }

            // For development: Log email content instead of sending
            var emailLog = new
            {
                To = applicantEmail,
                Subject = subject,
                Body = body,
                ApplicationId = application.Id,
                ApplicationNumber = application.ApplicationNumber,
                TemplateType = "Reminder",
                CustomMessage = customMessage,
                SentAt = DateTime.UtcNow
            };

            _logger.LogInformation("Email Content: {EmailLog}", JsonSerializer.Serialize(emailLog, new JsonSerializerOptions { WriteIndented = true }));

            return Result<bool>.Success(true);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to send reminder email for application {ApplicationNumber}",
                application.ApplicationNumber);
            return Result<bool>.Failure("Email send failed", "Failed to send reminder email");
        }
    }

    #region Private Helper Methods

    /// <summary>
    /// Render template by replacing variables with actual values
    /// </summary>
    private static string RenderTemplate(string template, VettingApplication application, string applicantName)
    {
        return template
            .Replace("{{applicant_name}}", applicantName)
            .Replace("{{application_number}}", application.ApplicationNumber)
            .Replace("{{application_date}}", application.SubmittedAt.ToString("MMMM dd, yyyy"))
            .Replace("{{status_change_date}}", DateTime.UtcNow.ToString("MMMM dd, yyyy"))
            .Replace("{{contact_email}}", "support@witchcityrope.com")
            .Replace("{{current_status}}", application.Status.ToString());
    }

    /// <summary>
    /// Map application status to email template type
    /// </summary>
    private static EmailTemplateType? GetTemplateTypeForStatus(VettingStatus status)
    {
        return status switch
        {
            VettingStatus.InterviewApproved => EmailTemplateType.InterviewApproved,
            VettingStatus.InterviewScheduled => EmailTemplateType.InterviewScheduled,
            VettingStatus.OnHold => EmailTemplateType.OnHold,
            VettingStatus.Approved => EmailTemplateType.Approved,
            VettingStatus.Denied => EmailTemplateType.Denied,
            _ => null // No email needed for other statuses
        };
    }

    /// <summary>
    /// Get user-friendly status description
    /// </summary>
    private static string GetStatusDescription(VettingStatus status)
    {
        return status switch
        {
            VettingStatus.Submitted => "Submitted",
            VettingStatus.UnderReview => "Under Review",
            VettingStatus.InterviewApproved => "Interview Approved",
            VettingStatus.InterviewScheduled => "Interview Scheduled",
            VettingStatus.OnHold => "On Hold",
            VettingStatus.Approved => "Approved",
            VettingStatus.Denied => "Denied",
            _ => status.ToString()
        };
    }

    /// <summary>
    /// Get next steps message for status
    /// </summary>
    private static string GetNextStepsForStatus(VettingStatus status)
    {
        return status switch
        {
            VettingStatus.InterviewApproved => "We will contact you soon to schedule your interview.",
            VettingStatus.InterviewScheduled => "Your interview is scheduled. Please check your email for details.",
            VettingStatus.OnHold => "We need additional information from you. Please check your email for details.",
            VettingStatus.Approved => "Welcome to WitchCityRope! You now have access to our community events and resources.",
            VettingStatus.Denied => "While your application was not approved at this time, you are welcome to reapply in the future.",
            _ => "We will contact you if any further action is needed."
        };
    }

    #endregion
}