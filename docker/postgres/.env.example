# PostgreSQL Environment Variables for WitchCityRope Docker Setup
# 
# This file contains example environment variables for PostgreSQL container configuration
# Copy this file to .env and adjust values for your environment
#
# SECURITY WARNING: Never commit actual passwords to version control
# Use different passwords for each environment (development, test, production)

# ============================================================================
# POSTGRESQL CORE CONFIGURATION
# ============================================================================

# Database superuser (postgres container default)
POSTGRES_USER=postgres
POSTGRES_PASSWORD=WitchCity2024!
POSTGRES_DB=witchcityrope

# Application database user (created by initialization scripts)
# This user has limited privileges for application operations only
DB_USER=witchcityrope_app
DB_PASSWORD=WitchCity2024!
DB_NAME=witchcityrope

# Database connection settings
DB_HOST=localhost
DB_PORT=5433

# ============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# ============================================================================

# Development Environment
# Use weaker security for local development convenience
POSTGRES_USER_DEV=postgres
POSTGRES_PASSWORD_DEV=WitchCity2024!
POSTGRES_DB_DEV=witchcityrope_dev
POSTGRES_INITDB_ARGS_DEV=--auth-host=trust --auth-local=trust

# Test Environment  
# Use temporary credentials for automated testing
POSTGRES_USER_TEST=test_user
POSTGRES_PASSWORD_TEST=test_pass
POSTGRES_DB_TEST=witchcityrope_test

# Production Environment
# Use strong security settings and external secrets management
POSTGRES_USER_PROD=witchcityrope_prod
POSTGRES_DB_PROD=witchcityrope
POSTGRES_INITDB_ARGS_PROD=--auth-host=md5 --auth-local=md5
# Production password should come from Docker secrets, not environment variables
# POSTGRES_PASSWORD_FILE=/run/secrets/db_password

# ============================================================================
# CONNECTION STRING COMPONENTS
# ============================================================================

# Connection pool settings (adjust based on expected load)
DB_MIN_POOL_SIZE=5
DB_MAX_POOL_SIZE=100
DB_CONNECTION_LIFETIME=300

# SSL settings (enable for production)
DB_SSL_MODE=Prefer
DB_TRUST_SERVER_CERTIFICATE=false

# ============================================================================
# POSTGRESQL PERFORMANCE TUNING
# ============================================================================

# Memory allocation (adjust based on container resources)
# These values are for 2GB container memory allocation
POSTGRES_SHARED_BUFFERS=512MB
POSTGRES_EFFECTIVE_CACHE_SIZE=1536MB
POSTGRES_MAINTENANCE_WORK_MEM=128MB
POSTGRES_WORK_MEM=16MB

# Connection limits
POSTGRES_MAX_CONNECTIONS=200

# ============================================================================
# LOGGING AND MONITORING
# ============================================================================

# Logging level (production should use 'warning' or 'error')
POSTGRES_LOG_LEVEL=info

# Log slow queries (0 logs all queries, production should use 1000+ ms)
POSTGRES_LOG_MIN_DURATION=0

# Enable connection logging for security audit
POSTGRES_LOG_CONNECTIONS=on
POSTGRES_LOG_DISCONNECTIONS=on

# ============================================================================
# BACKUP AND MAINTENANCE
# ============================================================================

# Backup configuration
BACKUP_RETENTION_DAYS=30
BACKUP_DIRECTORY=/var/backups/postgresql

# Maintenance scheduling
VACUUM_SCHEDULE=daily
ANALYZE_SCHEDULE=daily

# ============================================================================
# SECURITY SETTINGS
# ============================================================================

# Authentication method (production should use 'md5' or stronger)
POSTGRES_AUTH_METHOD=trust

# Network security
# Restrict connections to specific networks in production
POSTGRES_CLIENT_NETWORKS=172.20.0.0/16,127.0.0.1/32

# SSL certificate paths (production only)
POSTGRES_SSL_CERT_FILE=/etc/ssl/certs/postgresql.crt
POSTGRES_SSL_KEY_FILE=/etc/ssl/private/postgresql.key

# ============================================================================
# DOCKER COMPOSE INTEGRATION
# ============================================================================

# Container resource limits
POSTGRES_MEMORY_LIMIT=2g
POSTGRES_CPU_LIMIT=2.0
POSTGRES_MEMORY_RESERVATION=512m
POSTGRES_CPU_RESERVATION=0.5

# Volume configuration
POSTGRES_DATA_VOLUME=postgres_data
POSTGRES_BACKUP_VOLUME=postgres_backups

# Health check settings
POSTGRES_HEALTH_CHECK_INTERVAL=10s
POSTGRES_HEALTH_CHECK_TIMEOUT=5s
POSTGRES_HEALTH_CHECK_RETRIES=5
POSTGRES_HEALTH_CHECK_START_PERIOD=30s

# ============================================================================
# APPLICATION INTEGRATION
# ============================================================================

# ASP.NET Core environment integration
ASPNETCORE_ENVIRONMENT=Development

# Entity Framework connection string template
# The application will build the full connection string from these components
CONNECTION_STRING_TEMPLATE=Host=${DB_HOST};Port=${DB_PORT};Database=${DB_NAME};Username=${DB_USER};Password=${DB_PASSWORD};Pooling=true;Minimum Pool Size=${DB_MIN_POOL_SIZE};Maximum Pool Size=${DB_MAX_POOL_SIZE};Connection Lifetime=${DB_CONNECTION_LIFETIME};

# ============================================================================
# DEVELOPMENT TOOLS
# ============================================================================

# Enable pg_stat_statements for query analysis
POSTGRES_ENABLE_STATS=true

# Enable detailed query logging for development
POSTGRES_DEV_LOGGING=true

# Enable auto-migration on API startup (development only)
EF_AUTO_MIGRATE=true

# ============================================================================
# USAGE INSTRUCTIONS
# ============================================================================

# 1. Copy this file to .env in the same directory
# 2. Adjust passwords and settings for your environment
# 3. Never commit .env files with real passwords to version control
# 4. Use Docker secrets for production password management
# 5. Test connection with: docker-compose exec db psql -U postgres -d witchcityrope

# ============================================================================
# SECURITY REMINDERS
# ============================================================================

# ⚠️  NEVER use default passwords in production
# ⚠️  Use strong, unique passwords for each environment  
# ⚠️  Enable SSL/TLS for production connections
# ⚠️  Restrict network access with proper firewall rules
# ⚠️  Regular backup and test restore procedures
# ⚠️  Monitor logs for unauthorized access attempts
# ⚠️  Keep PostgreSQL version updated for security patches