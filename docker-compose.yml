version: '3.8'

services:
  # PostgreSQL Database Service
  postgres:
    image: postgres:16-alpine
    container_name: witchcity-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-WitchCity2024!}
      POSTGRES_DB: ${POSTGRES_DB:-witchcityrope_db}
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=en_US.UTF-8"
    ports:
      - "5433:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init:/docker-entrypoint-initdb.d:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-witchcityrope_db}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - witchcity-network

  # API Service
  api:
    build:
      context: .
      dockerfile: src/WitchCityRope.Api/Dockerfile
      target: ${BUILD_TARGET:-final}
    container_name: witchcity-api
    ports:
      - "5653:8080"
      - "5654:8081"  # HTTPS port for development
    environment:
      # ASP.NET Core Configuration
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:8080
      - ASPNETCORE_HTTPS_PORT=5654
      
      # Database Configuration - PostgreSQL
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_DB:-witchcityrope_db};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-WitchCity2024!};Include Error Detail=true
      
      # JWT Configuration
      - Jwt__Secret=${JWT_SECRET:-YourSuperSecretKeyForDevelopmentPurposesOnly!123}
      - Jwt__Issuer=WitchCityRope
      - Jwt__Audience=WitchCityRopeUsers
      - Jwt__ExpiresInMinutes=60
      
      # Email Configuration (SendGrid)
      - Email__SendGrid__ApiKey=${SENDGRID_API_KEY}
      - Email__FromEmail=noreply@witchcityrope.com
      - Email__FromName=Witch City Rope
      
      # PayPal Configuration
      - PayPal__ClientId=${PAYPAL_CLIENT_ID}
      - PayPal__ClientSecret=${PAYPAL_CLIENT_SECRET}
      - PayPal__Mode=${PAYPAL_MODE:-sandbox}
      
      # Google OAuth Configuration
      - Authentication__Google__ClientId=${GOOGLE_CLIENT_ID}
      - Authentication__Google__ClientSecret=${GOOGLE_CLIENT_SECRET}
      
      # Logging
      - Serilog__MinimumLevel__Default=Information
      - Serilog__MinimumLevel__Override__Microsoft=Warning
      - Serilog__MinimumLevel__Override__System=Warning
      
    volumes:
      # Logs volume
      - ./logs/api:/app/logs
      # Uploads volume (for file uploads if needed)
      - ./uploads:/app/uploads
      # Development certificates
      - ~/.aspnet/https:/https:ro
      # For hot reload in development (only when BUILD_TARGET=development)
      - ./src:/src:cached
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - witchcity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Web Service (Blazor Server)
  web:
    build:
      context: .
      dockerfile: src/WitchCityRope.Web/Dockerfile
      target: ${BUILD_TARGET:-final}
    container_name: witchcity-web
    ports:
      - "5651:8080"
      - "5652:8081"  # HTTPS port for development
    environment:
      # ASP.NET Core Configuration
      - ASPNETCORE_ENVIRONMENT=${ASPNETCORE_ENVIRONMENT:-Development}
      - ASPNETCORE_URLS=http://+:8080
      # Disable HTTPS for development
      # - ASPNETCORE_HTTPS_PORT=5652
      
      # API Configuration
      - ApiBaseUrl=http://api:8080/
      - ApiBaseUrlExternal=https://localhost:5654/
      - ApiUrl=http://api:8080
      
      # Database Configuration - PostgreSQL  
      - ConnectionStrings__DefaultConnection=Host=${POSTGRES_HOST:-postgres};Port=5432;Database=${POSTGRES_DB:-witchcityrope_db};Username=${POSTGRES_USER:-postgres};Password=${POSTGRES_PASSWORD:-WitchCity2024!};Include Error Detail=true
      
      # Syncfusion License
      - Syncfusion__LicenseKey=${SYNCFUSION_LICENSE_KEY}
      
      # Session Configuration
      - Session__IdleTimeout=20
      - Session__Cookie__Name=.WitchCityRope.Session
      - Session__Cookie__HttpOnly=true
      - Session__Cookie__IsEssential=true
      
      # Blazor Configuration
      - DetailedErrors=${DETAILED_ERRORS:-true}
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft.AspNetCore=Warning
      
      # Email Configuration (for direct email from web if needed)
      - Email__SendGrid__ApiKey=${SENDGRID_API_KEY}
      
    volumes:
      # Shared data volume
      - ./data:/app/data:ro
      # Logs volume
      - ./logs/web:/app/logs
      # Static files/uploads
      - ./uploads:/app/wwwroot/uploads:ro
      # Development certificates
      - ~/.aspnet/https:/https:ro
      # For hot reload in development (only when BUILD_TARGET=development)
      - ./src:/src:cached
    depends_on:
      api:
        condition: service_started
      postgres:
        condition: service_healthy
    networks:
      - witchcity-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # pgAdmin for PostgreSQL management (optional)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: witchcity-pgadmin
    restart: unless-stopped
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@example.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin}
      PGADMIN_CONFIG_SERVER_MODE: 'False'
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: 'False'
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - witchcity-network
    profiles:
      - tools

networks:
  witchcity-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local
  logs:
    driver: local
  uploads:
    driver: local