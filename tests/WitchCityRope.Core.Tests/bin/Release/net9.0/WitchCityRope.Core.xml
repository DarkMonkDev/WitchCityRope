<?xml version="1.0"?>
<doc>
    <assembly>
        <name>WitchCityRope.Core</name>
    </assembly>
    <members>
        <member name="T:WitchCityRope.Core.Entities.BaseEntity">
            <summary>
            Base class for all entities in the system
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.BaseEntity.Id">
            <summary>
            Unique identifier for the entity
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.BaseEntity.CreatedAt">
            <summary>
            Date and time when the entity was created
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.BaseEntity.UpdatedAt">
            <summary>
            Date and time when the entity was last updated
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.Event">
            <summary>
            Represents an event in the WitchCityRope system
            Business Rules:
            - Events have capacity limits
            - Events support sliding scale pricing
            - Events must have at least one organizer
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Event.Capacity">
            <summary>
            Maximum number of attendees allowed
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Event.PricingTiers">
            <summary>
            Sliding scale pricing tiers for the event
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.GetConfirmedRegistrationCount">
            <summary>
            Gets the number of confirmed registrations
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.GetAvailableSpots">
            <summary>
            Gets the number of available spots
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.HasAvailableCapacity">
            <summary>
            Checks if the event has available capacity
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.Publish">
            <summary>
            Publishes the event, making it visible for registration
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.Unpublish">
            <summary>
            Unpublishes the event
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.UpdateDetails(System.String,System.String,System.String)">
            <summary>
            Updates event details
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.UpdateDates(System.DateTime,System.DateTime)">
            <summary>
            Updates event dates
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.UpdateCapacity(System.Int32)">
            <summary>
            Updates event capacity
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.AddOrganizer(WitchCityRope.Core.Entities.User)">
            <summary>
            Adds an organizer to the event
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.RemoveOrganizer(WitchCityRope.Core.Entities.User)">
            <summary>
            Removes an organizer from the event
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Event.UpdatePricingTiers(System.Collections.Generic.IEnumerable{WitchCityRope.Core.ValueObjects.Money})">
            <summary>
            Updates pricing tiers for sliding scale
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.IncidentAction">
            <summary>
            Represents an action taken in response to an incident
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.IncidentReport">
            <summary>
            Represents an incident report for safety and community management
            Business Rules:
            - Reports can be anonymous
            - Reports are confidential and encrypted
            - Multiple moderators review each report
            - Follow-up actions are tracked
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.Description">
            <summary>
            Encrypted description of the incident
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.ReferenceNumber">
            <summary>
            Reference number for tracking the incident
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.IncidentType">
            <summary>
            Type of incident
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.Location">
            <summary>
            Location where the incident occurred
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.IncidentDate">
            <summary>
            Date when the incident occurred
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.RequestFollowUp">
            <summary>
            Indicates if follow-up was requested
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.PreferredContactMethod">
            <summary>
            Preferred contact method for follow-up
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReport.AssignedToId">
            <summary>
            User assigned to handle the incident
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.Acknowledge">
            <summary>
            Acknowledges receipt of the incident report
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.StartInvestigation">
            <summary>
            Begins investigation of the incident
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.AddReview(WitchCityRope.Core.Entities.IncidentReview)">
            <summary>
            Adds a review from a moderator
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.RecordAction(WitchCityRope.Core.Entities.IncidentAction)">
            <summary>
            Records an action taken in response to the incident
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.Resolve(System.String)">
            <summary>
            Resolves the incident with notes
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.UpdateSeverity(WitchCityRope.Core.Enums.IncidentSeverity,System.String)">
            <summary>
            Updates the severity of the incident
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.IncidentReport.AssignTo(WitchCityRope.Core.Entities.User)">
            <summary>
            Assigns the incident to a user for handling
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.IncidentReview">
            <summary>
            Represents a moderator's review of an incident report
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReview.Findings">
            <summary>
            Encrypted findings from the reviewer
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReview.RecommendedSeverity">
            <summary>
            The reviewer's assessment of the incident severity
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.IncidentReview.RecommendAction">
            <summary>
            Whether the reviewer recommends action be taken
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.Payment">
            <summary>
            Represents a payment transaction in the system
            Business Rules:
            - Payments support sliding scale pricing
            - Refunds are allowed within the cancellation window
            - Payment details are encrypted for security
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Payment.Amount">
            <summary>
            The amount paid (from sliding scale pricing)
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Payment.TransactionId">
            <summary>
            External payment processor transaction ID
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Payment.RefundAmount">
            <summary>
            Refund details if applicable
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.MarkAsCompleted">
            <summary>
            Marks the payment as completed
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.MarkAsFailed(System.String)">
            <summary>
            Marks the payment as failed
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.InitiateRefund(WitchCityRope.Core.ValueObjects.Money,System.String)">
            <summary>
            Initiates a refund for the payment
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.CompleteRefund(System.String)">
            <summary>
            Completes the refund process with transaction details
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.IsEligibleForRefund">
            <summary>
            Checks if the payment is eligible for refund
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Payment.GetNetAmount">
            <summary>
            Gets the net amount after any refunds
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.Registration">
            <summary>
            Represents a user's registration for an event
            Business Rules:
            - Registrations can be cancelled 48-72 hours before event (configurable per event)
            - Registration requires payment to be confirmed
            - Users can select from sliding scale pricing
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.SelectedPrice">
            <summary>
            The price selected from the sliding scale
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.EmergencyContactName">
            <summary>
            Emergency contact name for the attendee
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.EmergencyContactPhone">
            <summary>
            Emergency contact phone number for the attendee
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.CheckedInAt">
            <summary>
            Timestamp when the attendee was checked in to the event
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.CheckedInBy">
            <summary>
            ID of the staff member who performed the check-in
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.CreatedAt">
            <summary>
            Timestamp when the registration was created
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.Registration.ConfirmationCode">
            <summary>
            Unique confirmation code for the registration
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.Confirm(WitchCityRope.Core.Entities.Payment)">
            <summary>
            Confirms the registration after payment is processed
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.Cancel(System.String,System.Int32)">
            <summary>
            Cancels the registration
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.CheckIn(System.Guid)">
            <summary>
            Marks the registration as checked in at the event
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.UpdateDietaryRestrictions(System.String)">
            <summary>
            Updates dietary restrictions
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.UpdateAccessibilityNeeds(System.String)">
            <summary>
            Updates accessibility needs
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.Registration.IsEligibleForRefund(System.Int32)">
            <summary>
            Checks if registration is eligible for refund based on cancellation window
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.User">
            <summary>
            Represents a user in the WitchCityRope system
            Business Rules:
            - Users must be at least 21 years old
            - Legal names are encrypted for privacy
            - Scene names are public-facing identifiers
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.EncryptedLegalName">
            <summary>
            Legal name stored encrypted for privacy compliance
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.SceneName">
            <summary>
            Public-facing name used within the community
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.DisplayName">
            <summary>
            Display name derived from scene name
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.PronouncedName">
            <summary>
            Phonetic pronunciation of the user's name
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.Pronouns">
            <summary>
            User's preferred pronouns
            </summary>
        </member>
        <member name="P:WitchCityRope.Core.Entities.User.IsVetted">
            <summary>
            Indicates if the user has been vetted
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.GetAge">
            <summary>
            Calculates user's age
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.UpdateSceneName(WitchCityRope.Core.ValueObjects.SceneName)">
            <summary>
            Updates the user's scene name
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.UpdateEmail(WitchCityRope.Core.ValueObjects.EmailAddress)">
            <summary>
            Updates the user's email address
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.PromoteToRole(WitchCityRope.Core.Enums.UserRole)">
            <summary>
            Promotes user to a new role
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.Deactivate">
            <summary>
            Deactivates the user account
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.Reactivate">
            <summary>
            Reactivates the user account
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.UpdatePronouncedName(System.String)">
            <summary>
            Updates the user's pronounced name
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.UpdatePronouns(System.String)">
            <summary>
            Updates the user's pronouns
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.User.MarkAsVetted">
            <summary>
            Marks the user as vetted
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.VettingApplication">
            <summary>
            Represents a vetting application for new community members
            Business Rules:
            - Applications require references from existing members
            - Multiple reviewers assess each application
            - Applicants must be at least 21 years old (validated through User entity)
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.#ctor(WitchCityRope.Core.Entities.User,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Alternative constructor for creating from command/API usage
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.AddReview(WitchCityRope.Core.Entities.VettingReview)">
            <summary>
            Adds a review from a vetting team member
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.StartReview">
            <summary>
            Moves application to under review status
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.Approve(System.String)">
            <summary>
            Approves the vetting application
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.Reject(System.String)">
            <summary>
            Rejects the vetting application
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.RequestMoreInfo(System.String)">
            <summary>
            Requests additional information from the applicant
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Entities.VettingApplication.ProvideAdditionalInfo(System.String)">
            <summary>
            Updates application with additional information
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.VettingReview">
            <summary>
            Represents a review of a vetting application
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Entities.VettingStatus">
            <summary>
            Vetting application status
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.EventStatus">
            <summary>
            Status of an event
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventStatus.Draft">
            <summary>
            Event is in draft state, not yet published
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventStatus.Published">
            <summary>
            Event is published and open for registration
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventStatus.Cancelled">
            <summary>
            Event has been cancelled
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventStatus.Completed">
            <summary>
            Event has been completed
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.EventType">
            <summary>
            Types of events supported by the system
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Workshop">
            <summary>
            Educational workshop or class
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Social">
            <summary>
            Social gathering or munch
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.PlayParty">
            <summary>
            Play party or dungeon event
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Performance">
            <summary>
            Performance or demonstration
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.SkillShare">
            <summary>
            Skill share or peer learning
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Special">
            <summary>
            Special event or celebration
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Virtual">
            <summary>
            Online/virtual event
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.EventType.Conference">
            <summary>
            Multi-day event or conference
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.IncidentSeverity">
            <summary>
            Incident severity levels
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.IncidentStatus">
            <summary>
            Incident report status
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.IncidentType">
            <summary>
            Type of incident being reported
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.PaymentMethod">
            <summary>
            Payment methods supported by the system
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentMethod.CreditCard">
            <summary>
            Credit card payment
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentMethod.DebitCard">
            <summary>
            Debit card payment
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentMethod.PayPal">
            <summary>
            PayPal payment
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentMethod.Venmo">
            <summary>
            Venmo payment
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentMethod.Cash">
            <summary>
            Cash payment for in-person events
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.PaymentStatus">
            <summary>
            Status of a payment transaction
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentStatus.Pending">
            <summary>
            Payment initiated but not yet processed
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentStatus.Completed">
            <summary>
            Payment successfully completed
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentStatus.Failed">
            <summary>
            Payment failed or was declined
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentStatus.Refunded">
            <summary>
            Payment was refunded
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.PaymentStatus.PartiallyRefunded">
            <summary>
            Partial refund was issued
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.RegistrationStatus">
            <summary>
            Status of an event registration
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.RegistrationStatus.Pending">
            <summary>
            Registration created but payment not yet processed
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.RegistrationStatus.Confirmed">
            <summary>
            Payment received and registration confirmed
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.RegistrationStatus.Cancelled">
            <summary>
            Registration cancelled by user or system
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.RegistrationStatus.CheckedIn">
            <summary>
            User checked in at the event
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.RegistrationStatus.Waitlisted">
            <summary>
            On waiting list due to capacity
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Enums.UserRole">
            <summary>
            User roles within the system
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.UserRole.Attendee">
            <summary>
            Standard event attendee
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.UserRole.Member">
            <summary>
            Verified community member with additional privileges
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.UserRole.Organizer">
            <summary>
            Event organizer who can create and manage events
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.UserRole.Moderator">
            <summary>
            Community moderator who can review incidents and vetting
            </summary>
        </member>
        <member name="F:WitchCityRope.Core.Enums.UserRole.Administrator">
            <summary>
            System administrator with full access
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Exceptions.ConflictException">
            <summary>
            Exception thrown when there is a conflict with the current state
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Exceptions.ForbiddenException">
            <summary>
            Exception thrown when access to a resource is forbidden
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Exceptions.NotFoundException">
            <summary>
            Exception thrown when a requested resource is not found
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Exceptions.ValidationException">
            <summary>
            Exception thrown when validation fails
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.DomainException">
            <summary>
            Base exception for domain-specific business rule violations
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.EntityNotFoundException">
            <summary>
            Exception thrown when an entity is not found
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.BusinessRuleViolationException">
            <summary>
            Exception thrown when a business rule is violated
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.InsufficientCapacityException">
            <summary>
            Exception thrown when there's insufficient capacity
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.PaymentException">
            <summary>
            Exception thrown when a payment operation fails
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.UnauthorizedOperationException">
            <summary>
            Exception thrown when an operation is not authorized
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.IEmailService">
            <summary>
            Service for sending email notifications
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendEmailAsync(WitchCityRope.Core.ValueObjects.EmailAddress,System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to a single recipient
            </summary>
            <param name="to">Recipient email address</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body (HTML supported)</param>
            <param name="isHtml">Whether the body contains HTML</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendBulkEmailAsync(System.Collections.Generic.IEnumerable{WitchCityRope.Core.ValueObjects.EmailAddress},System.String,System.String,System.Boolean)">
            <summary>
            Sends an email to multiple recipients
            </summary>
            <param name="to">List of recipient email addresses</param>
            <param name="subject">Email subject</param>
            <param name="body">Email body (HTML supported)</param>
            <param name="isHtml">Whether the body contains HTML</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendTemplateEmailAsync(WitchCityRope.Core.ValueObjects.EmailAddress,System.String,System.Object)">
            <summary>
            Sends an email using a predefined template
            </summary>
            <param name="to">Recipient email address</param>
            <param name="templateName">Name of the email template</param>
            <param name="templateData">Data to populate the template</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendRegistrationConfirmationAsync(WitchCityRope.Core.ValueObjects.EmailAddress,System.String,System.String,System.DateTime)">
            <summary>
            Sends a registration confirmation email
            </summary>
            <param name="to">Recipient email address</param>
            <param name="sceneName">User's scene name</param>
            <param name="eventTitle">Title of the event</param>
            <param name="eventDate">Date of the event</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendCancellationConfirmationAsync(WitchCityRope.Core.ValueObjects.EmailAddress,System.String,System.String,WitchCityRope.Core.ValueObjects.Money)">
            <summary>
            Sends a cancellation confirmation email
            </summary>
            <param name="to">Recipient email address</param>
            <param name="sceneName">User's scene name</param>
            <param name="eventTitle">Title of the event</param>
            <param name="refundAmount">Refund amount if applicable</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEmailService.SendVettingStatusUpdateAsync(WitchCityRope.Core.ValueObjects.EmailAddress,System.String,System.String,System.String)">
            <summary>
            Sends a vetting application status update
            </summary>
            <param name="to">Recipient email address</param>
            <param name="sceneName">User's scene name</param>
            <param name="status">Application status</param>
            <param name="notes">Additional notes or feedback</param>
            <returns>True if sent successfully</returns>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.IEncryptionService">
            <summary>
            Service for encrypting and decrypting sensitive data
            Used for protecting legal names and other PII
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEncryptionService.EncryptAsync(System.String)">
            <summary>
            Encrypts a plain text string
            </summary>
            <param name="plainText">The text to encrypt</param>
            <returns>Encrypted string</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEncryptionService.DecryptAsync(System.String)">
            <summary>
            Decrypts an encrypted string
            </summary>
            <param name="encryptedText">The encrypted text</param>
            <returns>Decrypted plain text</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEncryptionService.Hash(System.String)">
            <summary>
            Generates a hash of the input for comparison purposes
            </summary>
            <param name="input">The text to hash</param>
            <returns>Hashed string</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IEncryptionService.VerifyHash(System.String,System.String)">
            <summary>
            Verifies if a plain text matches a hash
            </summary>
            <param name="plainText">The plain text to verify</param>
            <param name="hash">The hash to compare against</param>
            <returns>True if matches, false otherwise</returns>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.IPaymentService">
            <summary>
            Service for processing payments and refunds
            Supports sliding scale pricing model
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IPaymentService.ProcessPaymentAsync(WitchCityRope.Core.Entities.Registration,WitchCityRope.Core.ValueObjects.Money,System.String)">
            <summary>
            Processes a payment for an event registration
            </summary>
            <param name="registration">The registration to process payment for</param>
            <param name="amount">The amount to charge (from sliding scale)</param>
            <param name="paymentMethodId">Payment method identifier from payment processor</param>
            <returns>Payment result with transaction details</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IPaymentService.ProcessRefundAsync(WitchCityRope.Core.Entities.Payment,WitchCityRope.Core.ValueObjects.Money,System.String)">
            <summary>
            Processes a refund for a payment
            </summary>
            <param name="payment">The payment to refund</param>
            <param name="refundAmount">Amount to refund (null for full refund)</param>
            <param name="reason">Reason for the refund</param>
            <returns>Refund result with transaction details</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IPaymentService.ValidatePaymentMethodAsync(System.String)">
            <summary>
            Validates a payment method before processing
            </summary>
            <param name="paymentMethodId">Payment method identifier</param>
            <returns>True if valid, false otherwise</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IPaymentService.CreatePaymentIntentAsync(WitchCityRope.Core.ValueObjects.Money,WitchCityRope.Core.Interfaces.PaymentMetadata)">
            <summary>
            Creates a payment intent for client-side processing
            </summary>
            <param name="amount">The amount for the payment intent</param>
            <param name="metadata">Additional metadata for the payment</param>
            <returns>Payment intent details</returns>
        </member>
        <member name="M:WitchCityRope.Core.Interfaces.IPaymentService.GetPaymentStatusAsync(System.String)">
            <summary>
            Retrieves the status of a payment transaction
            </summary>
            <param name="transactionId">The transaction identifier</param>
            <returns>Current payment status</returns>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.PaymentResult">
            <summary>
            Result of a payment processing operation
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.RefundResult">
            <summary>
            Result of a refund processing operation
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.PaymentIntent">
            <summary>
            Payment intent for client-side processing
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Interfaces.PaymentMetadata">
            <summary>
            Metadata associated with a payment
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.Models.PagedResult`1">
            <summary>
            Represents a paginated result set
            </summary>
            <typeparam name="T">The type of items in the result set</typeparam>
        </member>
        <member name="T:WitchCityRope.Core.ValueObjects.EmailAddress">
            <summary>
            Represents a valid email address
            Business Rules:
            - Must be a valid email format
            - Case-insensitive for comparison
            - Used for user communication and authentication
            </summary>
        </member>
        <member name="M:WitchCityRope.Core.ValueObjects.EmailAddress.TryCreate(System.String,WitchCityRope.Core.ValueObjects.EmailAddress@)">
            <summary>
            Tries to create an EmailAddress from a string
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.ValueObjects.Money">
            <summary>
            Represents a monetary value with currency
            Business Rules:
            - Supports sliding scale pricing
            - Amount must be non-negative for prices
            - Currency code must be valid ISO 4217
            </summary>
        </member>
        <member name="T:WitchCityRope.Core.ValueObjects.SceneName">
            <summary>
            Represents a scene name used within the community
            Business Rules:
            - Scene names must be between 2 and 50 characters
            - Scene names cannot contain offensive content
            - Scene names are case-insensitive for uniqueness
            </summary>
        </member>
    </members>
</doc>
